{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/ahoy.tsx","r":[0,597],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useRouter} from 'next/router'\nimport configuredAhoy from 'utils/ahoy'\n\nexport const Ahoy = function () {\n  const router = useRouter()\n  React.useEffect(() => {\n    function onRouteChange(url: string) {\n      if (window.ahoy) window.ahoy.trackView()\n    }\n\n    configuredAhoy().then((ahoy) => {\n      if (ahoy) {\n        window.ahoy = ahoy\n        window.ahoy.trackView()\n      }\n    })\n\n    router.events.on('routeChangeComplete', onRouteChange)\n    return () => {\n      router.events.off('routeChangeComplete', onRouteChange)\n    }\n  }, [])\n  return null\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/facebook-pixel.tsx","r":[0,765],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useRouter} from 'next/router'\n\nconst FACEBOOK_PIXEL_ID = process.env.NEXT_PUBLIC_FACEBOOK_PIXEL_ID\n\nexport const FacebookPixel = function () {\n  const router = useRouter()\n  React.useEffect(() => {\n    if (!FACEBOOK_PIXEL_ID) return\n    let fb: any\n\n    function onRouteChange(url: string) {\n      fb?.pageView()\n    }\n\n    import('react-facebook-pixel')\n      .then((module) => (fb = module.default))\n      .then(() => {\n        fb?.init(FACEBOOK_PIXEL_ID, {\n          autoConfig: true,\n          debug: true,\n        })\n        fb?.pageView()\n      })\n\n    router.events.on('routeChangeComplete', onRouteChange)\n    return () => {\n      router.events.off('routeChangeComplete', onRouteChange)\n    }\n  }, [])\n  return null\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/last-resource.tsx","r":[0,1345],"t":"import useLastResource from 'hooks/use-last-resource'\nimport {isEmpty} from 'lodash'\nimport Link from 'next/link'\nimport * as React from 'react'\nimport {track} from 'utils/analytics'\n\nconst LastResource: React.FunctionComponent<{\n  className?: string\n  location?: string\n}> = ({children, className, location}) => {\n  const {lastResource, clearResource} = useLastResource()\n\n  const trackAndClearResource = (event: string) => {\n    if (!isEmpty(lastResource)) {\n      track(event, {\n        lesson: lastResource.slug,\n        location,\n      })\n    }\n    clearResource()\n  }\n\n  return !isEmpty(lastResource) ? (\n    <div>\n      {children}{' '}\n      <Link\n        href={lastResource.path}\n        onClick={() => {\n          trackAndClearResource('clicked show last resource')\n        }}\n        className={className}>\n\n        {lastResource.title}\n\n      </Link>\n      <div className=\"w-100 flex items-center justify-end\">\n        <button\n          className=\"rounded text-xs px-2 py-1 flex justify-center items-center bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out \"\n          onClick={() => {\n            trackAndClearResource('clicked stop showing last resource')\n          }}\n        >\n          x\n        </button>\n      </div>\n    </div>\n  ) : null;\n}\n\nexport default LastResource\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/link.tsx","r":[0,888],"t":"import React, {FunctionComponent} from 'react'\nimport {useRouter} from 'next/router'\nimport NextLink from 'next/link'\nimport {UrlObject} from 'url'\n\ndeclare type Url = string | UrlObject\n\ntype LinkProps = {\n  href: Url\n  children: React.ReactElement\n  activeClassName?: string\n  partialMatch?: boolean\n}\n\nconst Link: FunctionComponent<LinkProps> = ({\n  href,\n  children,\n  activeClassName,\n  partialMatch = false,\n  ...props\n}) => {\n  const router = useRouter()\n  let className = children?.props?.className || ''\n  if (partialMatch) {\n    if (router.asPath.includes(`${href}`)) {\n      className = `${className} ${activeClassName}`\n    }\n  } else {\n    if (router.asPath === href) {\n      className = `${className} ${activeClassName}`\n    }\n  }\n\n  return (\n    (<NextLink href={href} {...props} legacyBehavior>\n      {React.cloneElement(children, {className})}\n    </NextLink>)\n  );\n}\n\nexport default Link\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-cio.tsx","r":[0,1712],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport axios from 'axios'\n\nexport const CIO_KEY = 'cio_id'\n\nexport const cioIdentify = async (id: string, options?: any) => {\n  if (id) {\n    return await axios.post(`/api/cio/identify/${id}`, options)\n  }\n}\n\nexport type CIOSubscriber = {\n  id: string\n  email: string\n  attributes: any\n}\n\nexport const CioContext = React.createContext<{\n  subscriber?: CIOSubscriber\n  loadingSubscriber: boolean\n  cioIdentify: (id: string, options?: any) => void\n}>({loadingSubscriber: true, cioIdentify})\n\nexport const CioProvider: React.FunctionComponent = ({children}) => {\n  const [subscriber, setSubscriber] = React.useState<CIOSubscriber>()\n  const [loadingSubscriber, setLoadingSubscriber] = React.useState(true)\n  React.useEffect(() => {\n    // if (typeof window !== 'undefined') {\n    // const queryParams = queryString.parse(window.location.search)\n    // const cioSubscriberId = get(queryParams, CIO_KEY)\n    // if (!isEmpty(cioSubscriberId)) {\n    //   cookie.set(CIO_KEY, cioSubscriberId)\n    //   setTimeout(() => {\n    //     window.history.replaceState(\n    //       null,\n    //       document.title,\n    //       window.location.pathname,\n    //     )\n    //   }, 250)\n    // }\n    // }\n\n    axios\n      .get(`/api/cio-subscriber`)\n      .then(({data}) => {\n        setSubscriber(data)\n        cioIdentify(data.id)\n      })\n      .finally(() => setLoadingSubscriber(false))\n  }, [])\n\n  return (\n    <CioContext.Provider\n      value={{\n        subscriber,\n        loadingSubscriber,\n        cioIdentify: React.useCallback(cioIdentify, []),\n      }}\n    >\n      {children}\n    </CioContext.Provider>\n  )\n}\n\nexport default function useCio() {\n  return React.useContext(CioContext)\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-convertkit.tsx","r":[0,1357],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport queryString from 'query-string'\nimport {isEmpty, get} from 'lodash'\nimport cookie from '../utils/cookies'\nimport axios from 'axios'\n\nexport const ConverkitContext = React.createContext<{\n  subscriber?: any\n  loadingSubscriber: boolean\n}>({loadingSubscriber: true})\n\nexport const ConvertkitProvider: React.FunctionComponent = ({children}) => {\n  const [subscriber, setSubscriber] = React.useState()\n  const [loadingSubscriber, setLoadingSubscriber] = React.useState(true)\n  React.useEffect(() => {\n    // if (typeof window !== 'undefined') {\n    // const queryParams = queryString.parse(window.location.search)\n    // const ckSubscriberId = get(queryParams, 'ck_subscriber_id')\n    // if (!isEmpty(ckSubscriberId)) {\n    //   cookie.set('ck_subscriber_id', ckSubscriberId)\n    //\n    //   window.history.replaceState(\n    //     null,\n    //     document.title,\n    //     window.location.pathname,\n    //   )\n    // }\n    // }\n\n    axios\n      .get(`/api/subscriber`)\n      .then(({data}) => {\n        setSubscriber(data)\n      })\n      .finally(() => setLoadingSubscriber(false))\n  }, [])\n\n  return (\n    <ConverkitContext.Provider value={{subscriber, loadingSubscriber}}>\n      {children}\n    </ConverkitContext.Provider>\n  )\n}\n\nexport default function useConvertkit() {\n  return React.useContext(ConverkitContext)\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-egghead-schedule.tsx","r":[0,696],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport axios from 'axios'\nimport {take} from 'lodash'\n\nexport type ScheduleEvent = {\n  title: string\n  subtitle: string\n  expiresAt: number\n  calendarUrl: string\n  description: string\n  informationUrl: string\n}\n\nconst useSchedule = (limit = -1): [ScheduleEvent[], boolean] => {\n  const [schedule, setSchedule] = React.useState([])\n  const [scheduleLoading, setScheduleLoading] = React.useState(true)\n\n  React.useEffect(() => {\n    axios\n      .get(`/api/schedule`)\n      .then(({data}) => setSchedule(limit > 0 ? take(data, limit) : data))\n      .finally(() => setScheduleLoading(false))\n  }, [])\n\n  return [schedule, scheduleLoading]\n}\n\nexport default useSchedule\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-experience-api.tsx","r":[0,480],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport axios from 'axios'\n\ntype ExperienceStatementTarget = {\n  id: string\n  definition: {\n    name: {\n      'en-US': string\n    }\n    type: string\n    moreinfo: string\n  }\n}\n\nexport const useExperienceApi = () => {\n  const trackExperience = React.useCallback(\n    (verb: string, target: ExperienceStatementTarget) => {\n      axios.post(`/api/progress`, {verb, target})\n    },\n    [],\n  )\n  return trackExperience\n}\n\nexport default useExperienceApi\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-last-resource.tsx","r":[0,1669],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport cookie from 'utils/cookies'\n\nexport const LAST_RESOURCE_COOKIE_NAME = 'last-resource'\n\nexport type Resource = {\n  title: string\n  path: string\n  type: string\n  description: string\n  slug: string\n  image_url?: string\n}\n\ntype LastResourceAction = {type: 'update'; resource: Resource} | {type: 'clear'}\n\nfunction reducer(_: any, action: LastResourceAction) {\n  switch (action.type) {\n    case 'update':\n      const {title, path, image_url, type, description, slug} = action.resource\n      const resource = cookie.set(\n        LAST_RESOURCE_COOKIE_NAME,\n        {\n          title,\n          path,\n          image_url,\n          type,\n          description,\n          slug,\n        },\n        {expires: 7},\n      )\n      return {resource}\n    case 'clear':\n      cookie.remove(LAST_RESOURCE_COOKIE_NAME)\n      return {}\n    default:\n      throw new Error()\n  }\n}\n\nconst useLastResource = (resource?: Resource) => {\n  const [state, dispatch] = React.useReducer(reducer, {resource})\n  const clearResource = React.useCallback(() => {\n    dispatch({type: 'clear'})\n  }, [])\n\n  const updateResource = React.useCallback((resource: Resource) => {\n    dispatch({type: 'update', resource})\n  }, [])\n\n  React.useEffect(() => {\n    const savedResource = cookie.get(LAST_RESOURCE_COOKIE_NAME)\n    const isResourceUpdated = resource && savedResource?.slug !== resource.slug\n    if (resource && isResourceUpdated) {\n      updateResource(resource)\n    } else if (savedResource) {\n      updateResource(savedResource)\n    }\n  }, [resource?.slug])\n\n  return {lastResource: state.resource, clearResource, updateResource}\n}\n\nexport default useLastResource\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-logrocket.tsx","r":[0,2417],"t":"import React from \"react\";\nimport LogRocket from 'logrocket'\nimport React, * as React from 'react';\nimport {Viewer} from '../types'\nimport {useViewer} from '../context/viewer-context'\n\nexport const logRocketIdentify = (id: string, options?: any) => {\n  console.debug(`log rocket identify ${id}`)\n  if (id) {\n    LogRocket.identify(id, {\n      ...(!!options && options),\n    })\n  }\n}\n\ntype LogRocket = {\n  LogRocket: any\n  identified: Viewer | boolean\n  identifyViewer: (viewer: Viewer) => void\n  initialized: boolean\n  setEnabled: (enabled: boolean) => void\n}\n\nexport const LogRocketContext = React.createContext<LogRocket>({\n  LogRocket,\n  identified: false,\n  identifyViewer: (viewer: Viewer) => {},\n  initialized: false,\n  setEnabled: (enabled: boolean) => {},\n})\n\nexport const LogRocketProvider: React.FunctionComponent = ({children}) => {\n  const [identified, setIdentified] = React.useState<Viewer | boolean>(false)\n  const [initialized, setInitialized] = React.useState(false)\n  const [enabled, setEnabled] = React.useState(false)\n  const {viewer} = useViewer()\n  const isPro = viewer?.is_pro === true\n\n  React.useEffect(() => {\n    if (isPro) {\n      setEnabled(true)\n    }\n  }, [isPro])\n\n  const initialize = React.useCallback(() => {\n    if (enabled) {\n      console.debug(`initializing log rocket`)\n      LogRocket.init('9oatww/egghead-next')\n      setInitialized(true)\n    }\n  }, [enabled])\n\n  const identifyViewer = React.useCallback(\n    (viewer: Viewer) => {\n      if (!viewer) return\n\n      if (!initialized) {\n        initialize()\n      }\n      if (enabled && initialized) {\n        const {contact_id, ...rest} = viewer\n        logRocketIdentify(contact_id, {\n          ...rest,\n        })\n        setIdentified(viewer)\n      }\n    },\n    [enabled, initialized, initialize],\n  )\n\n  React.useEffect(() => {\n    identifyViewer(viewer)\n  }, [identified, initialized, viewer])\n\n  React.useEffect(() => {\n    if (!initialized) {\n      initialize()\n    }\n  }, [initialized, initialize])\n\n  return (\n    <LogRocketContext.Provider\n      value={{\n        LogRocket,\n        identified,\n        identifyViewer,\n        initialized,\n        setEnabled,\n      }}\n    >\n      {children}\n    </LogRocketContext.Provider>\n  )\n}\n\nexport default function useLogRocket({viewer}: {viewer: any}) {\n  const logRocketContext = React.useContext(LogRocketContext)\n\n  if (viewer) {\n    logRocketContext.identifyViewer(viewer)\n  }\n\n  return logRocketContext\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-subscription-data.tsx","r":[0,1508],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport axios from 'axios'\n\ntype SubscriptionData = {\n  portalUrl?: string\n  billingScheme: 'tiered' | 'per_unit'\n  subscription?: any\n  price?: any\n  product?: any\n  latestInvoice?: any\n  upcomingInvoice?: any\n}\n\nexport const recur = (price: any) => {\n  if (price === undefined) return ''\n\n  const {\n    recurring: {interval, interval_count},\n  } = price\n\n  if (interval === 'month' && interval_count === 3) return 'quarter'\n  if (interval === 'month' && interval_count === 6) return '6-months'\n  if (interval === 'month' && interval_count === 1) return 'month'\n  if (interval === 'year' && interval_count === 1) return 'year'\n}\n\nconst useSubscriptionDetails = ({\n  stripeCustomerId,\n}: {\n  stripeCustomerId?: string\n}): {subscriptionData: SubscriptionData; loading: boolean} => {\n  const [loading, setLoading] = React.useState<boolean>(true)\n  const [\n    subscriptionData,\n    setSubscriptionData,\n  ] = React.useState<SubscriptionData>({billingScheme: 'per_unit'})\n\n  React.useEffect(() => {\n    if (stripeCustomerId) {\n      setLoading(true)\n\n      axios\n        .get(`/api/stripe/billing/session`, {\n          params: {\n            customer_id: stripeCustomerId,\n          },\n        })\n        .then(({data}) => {\n          if (data) {\n            setSubscriptionData(data)\n          }\n        })\n        .finally(() => {\n          setLoading(false)\n        })\n    }\n  }, [stripeCustomerId])\n\n  return {subscriptionData, loading}\n}\n\nexport default useSubscriptionDetails\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/hooks/use-track-component.tsx","r":[0,212],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {track} from 'utils/analytics'\n\nexport const useTrackComponent = (event: string, properties: any = {}) => {\n  React.useEffect(() => {\n    track(event, properties)\n  }, [])\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/layouts/ultimate-guide.tsx","r":[0,5009],"t":"import React, {FunctionComponent} from 'react'\nimport {NextSeo} from 'next-seo'\nimport Contributors from 'components/contributors'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {useRouter} from 'next/router'\n\ntype LayoutProps = {\n  meta?: {\n    title?: string\n    description?: string\n    titleAppendSiteName?: boolean\n    url?: string\n    ogImage?: any\n    coverImage?: {url: string; alt: string}\n    author?: {name: string; image: string; path: string} | undefined\n    contributors?: {name: string; type: string; image: string; path: string}[]\n    state?: string\n  }\n}\n\nconst UltimateGuideLayout: FunctionComponent<LayoutProps> = ({\n  children,\n  meta = {},\n}) => {\n  const {\n    title,\n    description,\n    titleAppendSiteName = false,\n    url,\n    ogImage,\n    coverImage,\n    author,\n    contributors,\n    state,\n  } = meta\n\n  const defaultOgImage: string | undefined = title\n    ? `https://og-image-react-egghead.now.sh/article/${encodeURIComponent(\n        title,\n      )}`\n    : undefined\n\n  const router = useRouter()\n\n  const editUrl = `https://github.com/eggheadio/egghead-next/edit/main/src/pages${router.pathname}/index.mdx`\n  const EditLink: FunctionComponent<{className: string}> = ({className}) => (\n    <div>\n      <a\n        href={editUrl}\n        className={`flex items-center space-x-1 font-medium ${className}`}\n      >\n        {/* prettier-ignore */}\n        <svg className=\"text-blue-500\" width={18} height={18} viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"M17.414 2.586a2 2 0 0 0-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 0 0 0-2.828z\" fill=\"currentColor\"/><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2 6a2 2 0 0 1 2-2h4a1 1 0 0 1 0 2H4v10h10v-4a1 1 0 1 1 2 0v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6z\" fill=\"currentColor\"/></g></svg>\n        <span>Edit this article on GitHub</span>\n      </a>\n    </div>\n  )\n\n  return (\n    <>\n      <NextSeo\n        title={title}\n        description={description}\n        titleTemplate={titleAppendSiteName ? undefined : '%s'}\n        openGraph={{\n          title,\n          description,\n          url,\n          images: ogImage\n            ? [ogImage]\n            : [\n                {\n                  url: defaultOgImage,\n                  alt: title,\n                },\n              ],\n        }}\n        canonical={url}\n      />\n      <div>\n        <article className=\"mx-auto max-w-screen-md lg:mt-14 md:mt-8 mt-3\">\n          <header>\n            {state && <State state={state} />}\n            <h1 className=\"max-w-screen-md lg:text-6xl md:text-5xl sm:text-4xl text-3xl w-full font-extrabold mb-8 lg:mb-10 leading-tighter\">\n              {title}\n            </h1>\n            {author && <Author author={author} />}\n            {coverImage?.url && (\n              <div className=\"mt-4\">\n                <Image\n                  src={coverImage.url}\n                  alt={coverImage.alt || title}\n                  width={1280}\n                  height={720}\n                  quality={100}\n                  className=\"rounded-lg\"\n                />\n              </div>\n            )}\n          </header>\n\n          <main className=\"prose dark:prose-dark sm:prose-lg lg:prose-xl mt-5 max-w-none\">\n            <div>{children}</div>\n          </main>\n          <footer className=\"mt-8 border-t border-gray-200 py-10 flex sm:flex-row flex-col-reverse justify-between sm:items-start items-center sm:text-left text-center\">\n            {contributors && <Contributors contributors={contributors} />}\n            <EditLink className=\"sm:mb-0 mb-16\" />\n          </footer>\n        </article>\n      </div>\n    </>\n  )\n}\n\nconst State: FunctionComponent<{state: string}> = ({state}) => {\n  switch (state) {\n    case 'draft':\n      return (\n        <div className=\"px-3 py-1 rounded-lg bg-yellow-100 dark:text-gray-900 inline-block mb-2 text-sm font-semibold\">\n          {state}\n        </div>\n      )\n    case 'notes':\n      return (\n        <div className=\"px-3 py-1 rounded-lg bg-green-100 dark:text-gray-900 inline-block mb-2 text-sm font-semibold\">\n          {state}\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nconst Author: FunctionComponent<{\n  author: {\n    name: string\n    image?: string\n    path?: string\n  }\n}> = ({author}) => {\n  const {name, image, path} = author\n  const Profile = () => (\n    <>\n      {image && (\n        <Image\n          src={image}\n          width={48}\n          height={48}\n          alt={name}\n          className=\"rounded-full\"\n        />\n      )}\n      <div className=\"leading-tighter\">\n        <span className=\"text-xs uppercase\">author</span>\n        <div className=\"font-semibold\">{name}</div>\n      </div>\n    </>\n  )\n  return name ? (\n    path ? (\n      <Link href={path} className=\"inline-flex items-center space-x-2\">\n\n        <Profile />\n\n      </Link>\n    ) : (\n      <div className=\"inline-flex items-center space-x-2\">\n        <Profile />\n      </div>\n    )\n  ) : null;\n}\n\nexport default UltimateGuideLayout\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/404.tsx","r":[0,742],"t":"import React from \"react\";\nimport React, * as React from 'react';\n\nexport default function Custom404() {\n  const [appVersionOfPath, setAppVersionOfPath] = React.useState<any>()\n\n  React.useEffect(() => {\n    setAppVersionOfPath(\n      `${process.env.NEXT_PUBLIC_AUTH_DOMAIN}/${(\n        window.location.pathname + window.location.search\n      ).substr(1)}`,\n    )\n  }, [])\n\n  return (\n    <div className=\"flex items-center justify-center mb-60 prose\">\n      <h1>404 - Page Not Found</h1>\n      <p>\n        The page you are looking for may now live at{' '}\n        <code>{process.env.NEXT_PUBLIC_AUTH_DOMAIN}</code>. Try visiting{' '}\n        <a style={{color: '#1C64F2'}} href={appVersionOfPath}>\n          {appVersionOfPath}\n        </a>\n        .\n      </p>\n    </div>\n  )\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/_app.tsx","r":[0,3681],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {AppProps, NextWebVitalsMetric} from 'next/app'\nimport {MDXProvider} from '@mdx-js/react'\nimport {ViewerProvider} from 'context/viewer-context'\nimport {DefaultSeo, SocialProfileJsonLd} from 'next-seo'\nimport AppLayout from 'components/app/layout'\nimport mdxComponents from 'components/mdx'\nimport defaultSeoConfig from 'next-seo.json'\nimport '@reach/listbox/styles.css'\nimport '@reach/dialog/styles.css'\nimport '@reach/tabs/styles.css'\nimport '../styles/index.css'\nimport 'focus-visible'\nimport {ConvertkitProvider} from 'hooks/use-convertkit'\nimport {FacebookPixel} from 'components/facebook-pixel'\nimport {Ahoy} from 'components/ahoy'\nimport {CioProvider} from 'hooks/use-cio'\nimport {LogRocketProvider} from 'hooks/use-logrocket'\nimport RouteLoadingIndicator from 'components/route-loading-indicator'\nimport {useRouter} from 'next/router'\nimport {ThemeProvider} from 'next-themes'\nimport {Toaster} from 'react-hot-toast'\n\ndeclare global {\n  interface Window {\n    ahoy: any\n    _cio: any\n    fbq: any\n    becomeUser: any\n    ga: any\n  }\n}\n\nexport function reportWebVitals(metric: NextWebVitalsMetric) {\n  console.debug(`web vitals`, metric)\n}\n\nconst App: React.FC<AppProps> = ({Component, pageProps}) => {\n  const AppComponent = Component as any\n\n  const router = useRouter()\n\n  const [state, setState] = React.useState({\n    isRouteChanging: false,\n    loadingKey: 0,\n  })\n\n  React.useEffect(() => {\n    const storage = window?.sessionStorage\n    if (!storage) return\n    // Set the previous path as the value of the current path.\n    const prevPath = storage.getItem('currentPath') || ''\n    storage.setItem('prevPath', prevPath)\n    // Set the current path value by looking at the browser's location object.\n    storage.setItem('currentPath', window.location.pathname)\n  }, [router.asPath])\n\n  React.useEffect(() => {\n    const handleRouteChangeStart = () => {\n      setState((prevState) => ({\n        ...prevState,\n        isRouteChanging: true,\n        loadingKey: prevState.loadingKey ^ 1,\n      }))\n    }\n\n    const handleRouteChangeEnd = () => {\n      setState((prevState) => ({\n        ...prevState,\n        isRouteChanging: false,\n      }))\n    }\n\n    router.events.on('routeChangeStart', handleRouteChangeStart)\n    router.events.on('routeChangeComplete', handleRouteChangeEnd)\n    router.events.on('routeChangeError', handleRouteChangeEnd)\n\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChangeStart)\n      router.events.off('routeChangeComplete', handleRouteChangeEnd)\n      router.events.off('routeChangeError', handleRouteChangeEnd)\n    }\n  }, [router.events])\n\n  const getLayout =\n    AppComponent.getLayout ||\n    ((Page: any) => (\n      <AppLayout>\n        <Page {...pageProps} />\n      </AppLayout>\n    ))\n\n  return (\n    <>\n      <RouteLoadingIndicator isRouteChanging={state.isRouteChanging} />\n      <Ahoy />\n      <FacebookPixel />\n      <DefaultSeo {...defaultSeoConfig} />\n      <SocialProfileJsonLd\n        type=\"Organization\"\n        name=\"egghead.io\"\n        url={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}`}\n        sameAs={['https://twitter.com/eggheadio']}\n      />\n      <Toaster position=\"bottom-center\" />\n      <ThemeProvider attribute=\"class\">\n        <ViewerProvider>\n          <LogRocketProvider>\n            <CioProvider>\n              <ConvertkitProvider>\n                <MDXProvider components={mdxComponents}>\n                  {getLayout(Component, pageProps)}\n                </MDXProvider>\n              </ConvertkitProvider>\n            </CioProvider>\n          </LogRocketProvider>\n        </ViewerProvider>\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default App\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/confirmed.tsx","r":[0,1256],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport EmailConfirmation from 'components/pages/email-confirmation'\nimport getTracer from '../utils/honeycomb-tracer'\nimport {GetServerSideProps} from 'next'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport useCio from '../hooks/use-cio'\n\nconst tracer = getTracer('lesson-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  query,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  return {\n    props: {\n      to: query?.to || 'all',\n    },\n  }\n}\n\nconst Confirmed: React.FunctionComponent<{to: string}> = ({to}) => {\n  const {subscriber, cioIdentify} = useCio()\n\n  React.useEffect(() => {\n    if (subscriber) {\n      switch (to) {\n        case 'all':\n          cioIdentify(subscriber.id, {\n            unsubscribed: false,\n          })\n          break\n        default:\n          cioIdentify(subscriber.id, {\n            [`unsubscribed_from_${to.toLowerCase()}`]: false,\n          })\n          break\n      }\n    }\n  }, [subscriber])\n  return (\n    <EmailConfirmation>\n      <h1>You've confirmed your subscription to emails.</h1>\n      <p>You can unsubscribe at any time.</p>\n    </EmailConfirmation>\n  )\n}\n\nexport default Confirmed\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/logout.tsx","r":[0,399],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useViewer} from 'context/viewer-context'\nimport useLastResource from '../hooks/use-last-resource'\n\nfunction Logout() {\n  const {logout} = useViewer()\n  const {clearResource} = useLastResource()\n\n  React.useEffect(() => {\n    clearResource()\n    logout()\n  }, [])\n\n  return null\n}\n\nLogout.getLayout = (Page: any) => {\n  return <Page />\n}\n\nexport default Logout\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/redirect.tsx","r":[0,613],"t":"import React from \"react\";\nimport {LAST_RESOURCE_COOKIE_NAME} from 'hooks/use-last-resource'\nimport {isEmpty} from 'lodash'\nimport {useRouter} from 'next/router'\nimport React, * as React from 'react';\nimport cookieUtil from 'utils/cookies'\n\nconst Redirect = () => {\n  const router = useRouter()\n\n  React.useEffect(() => {\n    const lastResource = cookieUtil.get(LAST_RESOURCE_COOKIE_NAME)\n    if (!isEmpty(lastResource)) {\n      router.replace(lastResource.path)\n    } else {\n      router.replace('/')\n    }\n  }, [])\n  return null\n}\n\nRedirect.getLayout = (Page: any, pageProps: any) => {\n  return <Page {...pageProps} />\n}\n\nexport default Redirect\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/topics.tsx","r":[0,1727],"t":"import * as React from 'react'\nimport {sortBy} from 'lodash'\nimport Link from 'next/link'\nimport {FunctionComponent} from 'react'\nimport {GetStaticProps} from 'next'\nimport Image from 'next/image'\n\nimport tags from 'pages/site-directory/tags.json'\nimport {track} from '../utils/analytics'\n\ntype TagsProps = {\n  tags: any[]\n}\n\nconst Tags: FunctionComponent<TagsProps> = ({tags}) => {\n  return (\n    (<div className=\"max-w-screen-xl grid sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 grid-cols-2 sm:gap-5 gap-4 mx-auto sm:pb-16 pb-8\">\n      {tags.map((tag) => {\n        return (\n          (<div className=\"flex justify-center\" key={tag.slug}>\n            <Link\n              href={`/q/${tag.slug}`}\n              onClick={() =>\n                track(`clicked topic`, {\n                  location: 'topic page',\n                  topic: tag.slug,\n                })\n              }\n              className=\"space-x-2 flex flex-row items-center justify-start rounded-lg hover:shadow-sm border border-transparent hover:border-gray-200 sm:p-5 p-4 w-full transition-all ease-in-out duration-150\">\n\n              {tag.image_64_url && (\n                <Image\n                  quality={100}\n                  src={tag.image_64_url}\n                  alt={tag.label}\n                  width={64}\n                  height={64}\n                />\n              )}\n              <span className=\"font-medium leading-tight\">{tag.label}</span>\n\n            </Link>\n          </div>)\n        );\n      })}\n    </div>)\n  );\n}\n\nexport default Tags\n\nexport const getStaticProps: GetStaticProps = async () => {\n  return {\n    props: {\n      tags: sortBy(tags, ['name']),\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/unsubscribed.tsx","r":[0,1410],"t":"import * as React from 'react'\nimport EmailConfirmation from 'components/pages/email-confirmation'\nimport getTracer from '../utils/honeycomb-tracer'\nimport {GetServerSideProps} from 'next'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport useCio from '../hooks/use-cio'\nimport Link from 'next/link'\n\nconst tracer = getTracer('lesson-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  query,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  return {\n    props: {\n      from: query?.from || 'all',\n    },\n  }\n}\n\nconst Unsubscribed: React.FunctionComponent<{from: string}> = ({from}) => {\n  const {subscriber, cioIdentify} = useCio()\n\n  React.useEffect(() => {\n    if (subscriber) {\n      switch (from) {\n        case 'all':\n          cioIdentify(subscriber.id, {\n            unsubscribed: true,\n          })\n          break\n        default:\n          cioIdentify(subscriber.id, {\n            [`unsubscribed_from_${from.toLowerCase()}`]: true,\n          })\n          break\n      }\n    }\n  }, [subscriber])\n  return (\n    (<EmailConfirmation>\n      <h1>You've been unsubscribed from {from} emails.</h1>\n      <p>\n        If this was a mistake{' '}\n        <Link href={`/confirmed?to=${from}`}>\n          click here\n        </Link>\n        .\n      </p>\n    </EmailConfirmation>)\n  );\n}\n\nexport default Unsubscribed\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/unsubscribed.tsx","r":[0,1410],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport EmailConfirmation from 'components/pages/email-confirmation'\nimport getTracer from '../utils/honeycomb-tracer'\nimport {GetServerSideProps} from 'next'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport useCio from '../hooks/use-cio'\nimport Link from 'next/link'\n\nconst tracer = getTracer('lesson-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  query,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  return {\n    props: {\n      from: query?.from || 'all',\n    },\n  }\n}\n\nconst Unsubscribed: React.FunctionComponent<{from: string}> = ({from}) => {\n  const {subscriber, cioIdentify} = useCio()\n\n  React.useEffect(() => {\n    if (subscriber) {\n      switch (from) {\n        case 'all':\n          cioIdentify(subscriber.id, {\n            unsubscribed: true,\n          })\n          break\n        default:\n          cioIdentify(subscriber.id, {\n            [`unsubscribed_from_${from.toLowerCase()}`]: true,\n          })\n          break\n      }\n    }\n  }, [subscriber])\n  return (\n    <EmailConfirmation>\n      <h1>You've been unsubscribed from {from} emails.</h1>\n      <p>\n        If this was a mistake{' '}\n        <Link href={`/confirmed?to=${from}`}>\n          <a>click here</a>\n        </Link>\n        .\n      </p>\n    </EmailConfirmation>\n  )\n}\n\nexport default Unsubscribed\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/video-test.tsx","r":[0,1435],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {GetServerSideProps} from 'next'\nimport VideoResourcePlayer from 'components/player'\nimport {PlayerProvider} from 'cueplayer-react'\nimport {VideoResource} from 'types'\nimport {loadBasicLesson} from 'lib/lessons'\nimport PlayerSidebar from 'components/player/player-sidebar'\nimport PlayerContainer from 'components/player/player-container'\n\nconst VideoTest: React.FC<{\n  videoResource: VideoResource\n}> = ({videoResource}) => {\n  const playerContainer = React.useRef(null)\n  return (\n    <div className=\"-mx-5\">\n      <PlayerProvider>\n        {videoResource.hls_url && (\n          <PlayerContainer\n            ref={playerContainer}\n            className=\"relative grid grid-cols-1 lg:grid-cols-12 font-sans text-base\"\n          >\n            <VideoResourcePlayer\n              containerRef={playerContainer}\n              videoResource={videoResource}\n            />\n            <PlayerSidebar videoResource={videoResource} />\n          </PlayerContainer>\n        )}\n      </PlayerProvider>\n    </div>\n  )\n}\n\nexport default VideoTest\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  params,\n  query,\n}) {\n  const lesson =\n    (query?.lesson as string) || 'react-a-beginners-guide-to-react-introduction'\n  const videoResource: VideoResource = (await loadBasicLesson(\n    lesson,\n  )) as VideoResource\n\n  return {\n    props: {\n      videoResource,\n    },\n  }\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/utils/make-store.tsx","r":[0,1143],"t":"import React from \"react\";\nimport React, * as React from 'react';\n\nconst dispatchNoop: React.Dispatch<any> = (value: any) => {\n  return <></>\n}\n\nexport default function makeStore(\n  userReducer: (state: any, action: any) => any,\n  initialState: any,\n  key: string,\n): [React.FunctionComponent<any>, () => React.Dispatch<any>, () => any] {\n  const dispatchContext = React.createContext(dispatchNoop)\n  const storeContext = React.createContext(initialState)\n\n  const reducer = (state: any, action: any) => {\n    const newState = userReducer(state, action)\n    return newState\n  }\n\n  const StoreProvider: React.FunctionComponent<any> = ({\n    children,\n  }): JSX.Element => {\n    const [store, dispatch] = React.useReducer(reducer, initialState)\n    return (\n      <>\n        <dispatchContext.Provider value={dispatch}>\n          <storeContext.Provider value={store}>\n            {children}\n          </storeContext.Provider>\n        </dispatchContext.Provider>\n      </>\n    )\n  }\n\n  function useDispatch() {\n    return React.useContext(dispatchContext)\n  }\n\n  function useStore() {\n    return React.useContext(storeContext)\n  }\n\n  return [StoreProvider, useDispatch, useStore]\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/app/footer.tsx","r":[0,5909],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport Link from '../link'\nimport Eggo from '../images/eggo.svg'\nimport {track} from 'utils/analytics'\nimport {useViewer} from 'context/viewer-context'\nimport {reject} from 'lodash'\nimport {useTheme} from 'next-themes'\nimport useCio from 'hooks/use-cio'\n\nconst content = [\n  {\n    path: '/q',\n    label: 'Search',\n  },\n  {\n    path: '/blog',\n    label: 'Articles',\n  },\n  {\n    path: '/talks',\n    label: 'Talks',\n  },\n  {\n    path: '/podcasts',\n    label: 'Podcasts',\n  },\n  {\n    path: '/topics',\n    label: 'Topics',\n  },\n  {\n    path: '/site-directory',\n    label: 'Machine',\n  },\n]\n\nconst about = [\n  {\n    path: '/pricing',\n    label: 'Pricing',\n  },\n  {\n    path: 'https://store.egghead.io/',\n    label: 'Store',\n  },\n  {\n    path: 'mailto:support@egghead.io',\n    label: 'support@egghead.io',\n  },\n  {\n    path: '/logout',\n    label: 'Log Out',\n    viewerRequired: true,\n  },\n]\n\nconst Item: FunctionComponent<{\n  children: React.ReactNode\n  path: string\n  onClick: any\n}> = ({children, path, onClick}) => (\n  <li className=\"py-1 md:text-sm text-base leading-relaxed\">\n    <Link href={path} activeClassName=\"underline\">\n      <a\n        onClick={onClick}\n        className=\"hover:text-blue-600 transition-colors ease-in-out duration-150\"\n      >\n        {children}\n      </a>\n    </Link>\n  </li>\n)\n\nconst FooterNavigation: FunctionComponent = () => {\n  const {viewer} = useViewer()\n  const filterViewerRequired = (items: any[]) => {\n    return reject(items, (item) => {\n      return item.viewerRequired && !viewer\n    })\n  }\n  return (\n    <nav className=\"w-full md:space-y-0 space-y-6 flex md:flex-row flex-col items-center md:items-start justify-between gap-6 md:pt-14 pt-16 lg:pb-40 pb-16\">\n      <div className=\"space-y-5 h-full flex flex-col md:items-start items-center w-72\">\n        <Link href=\"/\">\n          <a className=\"flex flex-col md:flex-row items-center md:items-start text-center md:text-left md:space-x-2 space-y-3 md:space-y-0\">\n            <Eggo className=\"md:w-8 w-12 flex-shrink-0\" />\n            <div className=\"mt-1 text-lg font-semibold leading-tighter tracking-tight\">\n              Build your Developer Portfolio and climb the engineering career\n              ladder.\n            </div>\n          </a>\n        </Link>\n      </div>\n      <div className=\"grid md:grid-cols-2 grid-cols-1 lg:pr-6 md:gap-10 md:text-left text-center md:items-start items-center md:w-auto w-full\">\n        <ul>\n          {filterViewerRequired(content).map((link) => (\n            <Item\n              onClick={() => track(`clicked ${link.label} (footer)`)}\n              path={link.path}\n              key={link.path}\n            >\n              {link.label}\n            </Item>\n          ))}\n        </ul>\n        <ul>\n          {filterViewerRequired(about).map((link) => (\n            <Item\n              onClick={() => track(`clicked ${link.label} (footer)`)}\n              path={link.path}\n              key={link.path}\n            >\n              {link.label}\n            </Item>\n          ))}\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nconst Footer: FunctionComponent = () => {\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 print:hidden dark:text-gray-200 px-5\">\n      <footer className=\"max-w-screen-xl w-full mx-auto\">\n        <FooterNavigation />\n        <small className=\"space-x-6 py-6 text-xs w-full flex items-center md:justify-end justify-center text-gray-500 dark:text-gray-300\">\n          <div>©egghead.io</div>\n          <Link href=\"/privacy\">\n            <a onClick={() => track(`clicked privacy`, {location: 'footer'})}>\n              Terms & Conditions\n            </a>\n          </Link>\n          <DarkModeToggle />\n        </small>\n      </footer>\n    </div>\n  )\n}\n\nconst DarkModeToggle = () => {\n  const [mounted, setMounted] = React.useState(false)\n  const {subscriber, cioIdentify} = useCio()\n  const {theme, setTheme} = useTheme()\n  React.useEffect(() => setMounted(true), [])\n  const handleClick = () => {\n    const nextTheme = theme === 'dark' ? 'light' : 'dark'\n    setTheme(nextTheme)\n    track(`toggled dark mode`, {\n      mode: nextTheme,\n    })\n    if (subscriber) {\n      cioIdentify(subscriber.id, {\n        theme_preference: nextTheme,\n      })\n    }\n  }\n  return (\n    <div className=\"flex justify-between items-center\">\n      <h2 className=\"mr-3\">{theme === 'dark' ? 'Dark' : 'Light'} Mode</h2>\n      <div\n        className=\"w-16 h-10 bg-gray-300 dark:bg-gray-1000 rounded-full flex-shrink-0 p-1\"\n        onClick={handleClick}\n        aria-label=\"Toggle Dark Mode\"\n        role=\"button\"\n      >\n        <div\n          className={`bg-white w-8 h-8 rounded-full shadow-md duration-300 ease-in-out flex items-center justify-center dark:bg-gray-800 ${\n            mounted && (theme === 'dark' ? 'translate-x-6' : '')\n          }`}\n        >\n          {mounted && (\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"currentColor\"\n              stroke=\"currentColor\"\n              className=\"h-4 w-4 text-gray-400 dark:text-gray-200\"\n            >\n              {theme === 'dark' ? (\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\n                />\n              ) : (\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\n                />\n              )}\n            </svg>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Footer\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/buttons/index.tsx","r":[0,1386],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport noop from 'utils/noop'\n\ntype ButtonProps = {\n  url: string\n  label: string\n  className?: string\n  quiet?: boolean\n  onClick?: () => void\n}\n\nexport const PrimaryButton: React.FC<ButtonProps> = ({\n  url,\n  className,\n  label,\n  onClick = noop,\n}) => {\n  return (\n    (<Link\n      href={url}\n      onClick={onClick}\n      className={`${className} inline-flex justify-center items-center px-4 py-2 rounded-md bg-blue-600 text-white font-medium transition-all hover:bg-blue-800 dark:hover:bg-blue-500 ease-in-out duration-200`}>\n\n      {label}\n\n    </Link>)\n  );\n}\n\nexport const SecondaryButton: React.FC<ButtonProps> = ({\n  url,\n  className,\n  label,\n  quiet,\n  onClick = noop,\n}) => {\n  return (\n    (<Link\n      href={url}\n      onClick={onClick}\n      className={`${className}  inline-flex justify-center items-center px-4 py-2 rounded-md font-normal transition-all   hover:text-gray-800 ease-in-out duration-200 ${\n        quiet\n          ? 'hover:bg-gray-100 text-gray-700 dark:text-gray-300 dark:hover:bg-gray-700 dark:border-gray-600'\n          : 'hover:bg-gray-50 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-200 border dark:border-gray-600 border-gray-100 dark:bg-gray-700 bg-white shadow-sm hover:shadow'\n      }`}>\n\n      {label}\n\n    </Link>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/card/horizontal-resource-card.tsx","r":[0,2566],"t":"import * as React from 'react'\nimport {\n  Card,\n  CardPreview,\n  CardHeader,\n  CardContent,\n  CardBody,\n  CardMeta,\n} from './index'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Markdown from '../markdown'\nimport {track} from 'utils/analytics'\nimport {get} from 'lodash'\n\nconst HorizontalResourceCard: React.FC<any> = ({\n  resource,\n  location,\n  className = 'border-none my-4',\n  ...props\n}) => {\n  className = `${className} flex sm:flex-row flex-col sm:space-x-5 space-x-0 sm:space-y-0 space-y-5 items-center sm:text-left text-center`\n\n  return (\n    (<Card {...props} className={className}>\n      {resource.image && (\n        <Link\n          href={resource.path}\n          onClick={() => {\n            track('clicked resource', {\n              resource: resource.path,\n              linkType: 'image',\n              location,\n            })\n          }}\n          className=\"block flex-shrink-0 sm:w-auto m:w-24 w-36\"\n          tabIndex={-1}>\n\n          <CardPreview>\n            <Image\n              src={get(resource.image, 'src', resource.image)}\n              width={160}\n              height={160}\n              layout=\"fixed\"\n              className=\"object-cover rounded-md\"\n              alt={`illustration for ${resource.title}`}\n            />\n          </CardPreview>\n\n        </Link>\n      )}\n      <CardContent className=\"flex flex-col justify-center sm:items-start items-center\">\n        <CardHeader>\n          <h2 className=\" uppercase font-semibold text-xs tracking-tight text-gray-700 dark:text-gray-300 mb-1\">\n            {resource.name}\n          </h2>\n          <Link\n            href={resource.path}\n            onClick={() => {\n              track('clicked resource', {\n                resource: resource.path,\n                linkType: 'text',\n                location,\n              })\n            }}\n            className=\"hover:text-blue-600 dark:hover:text-blue-300\">\n\n            <h3 className=\"text-lg font-bold leading-tighter pt-2\">\n              {resource.title}\n            </h3>\n\n          </Link>\n        </CardHeader>\n        <CardMeta className=\"text-xs text-gray-600 dark:text-gray-300 pb-2 pt-1\">\n          {resource.byline}\n        </CardMeta>\n        <CardBody className=\"prose dark:prose-dark dark:prose-dark-sm prose-sm max-w-none\">\n          <Markdown>{resource.description}</Markdown>\n        </CardBody>\n      </CardContent>\n    </Card>)\n  );\n}\n\nexport {HorizontalResourceCard}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/card/index.tsx","r":[0,3865],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {createNamedContext} from '@reach/utils/context'\nimport {useId} from '@reach/auto-id'\nimport type * as Polymorphic from '@reach/utils/polymorphic'\n\nconst CardContext = createNamedContext<InternalCardContextValue>(\n  'CardContext',\n  {} as InternalCardContextValue,\n)\n\ntype InternalCardContextValue = {\n  cardId: string | undefined\n  quiet: boolean\n  horizontal: boolean\n}\n\ntype CardProps = {\n  quiet?: boolean\n  horizontal?: boolean\n}\n\nconst cardDefaultClasses = `bg-white dark:bg-gray-800 dark:text-gray-200 shadow-sm rounded-lg overflow-hidden p-5`\n\nconst Card = React.forwardRef(function Card(\n  {\n    children,\n    as: Comp = 'div',\n    quiet = false,\n    horizontal = false,\n    className,\n    ...props\n  },\n  forwardRef,\n) {\n  if (!quiet) {\n    className = `${cardDefaultClasses} ${className ? className : ''}`\n  }\n  const id = useId(props.id)\n  const context: InternalCardContextValue = React.useMemo(\n    () => ({\n      cardId: id,\n      quiet,\n      horizontal,\n    }),\n    [quiet, id, horizontal],\n  )\n\n  return (\n    <CardContext.Provider value={context}>\n      <Comp\n        className={className}\n        {...props}\n        ref={forwardRef}\n        data-egghead-card=\"\"\n      >\n        {children}\n      </Comp>\n    </CardContext.Provider>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardProps>\n\ntype CardPreviewProps = {}\n\nconst CardPreview = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-preview=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardPreviewProps>\n\ntype CardContentProps = {}\n\nconst CardContent = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-content=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardContentProps>\n\ntype CardHeaderProps = {}\n\nconst CardHeader = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-header=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardHeaderProps>\n\ntype CardBodyProps = {}\n\nconst CardBody = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-body=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardBodyProps>\n\ntype CardMetaProps = {}\n\nconst CardMeta = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-meta=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardMetaProps>\n\ntype CardFooterProps = {}\n\nconst CardFooter = React.forwardRef(function CardPreview(\n  {children, as: Comp = 'div', ...props},\n  forwardRef,\n) {\n  const {horizontal, quiet} = React.useContext(CardContext)\n\n  return (\n    <Comp {...props} ref={forwardRef} data-egghead-card-footer=\"\">\n      {children}\n    </Comp>\n  )\n}) as Polymorphic.ForwardRefComponent<'div', CardFooterProps>\n\nexport type {\n  CardProps,\n  CardPreviewProps,\n  CardContentProps,\n  CardHeaderProps,\n  CardBodyProps,\n  CardMetaProps,\n  CardFooterProps,\n}\n\nexport {\n  Card,\n  CardPreview,\n  CardContent,\n  CardHeader,\n  CardBody,\n  CardMeta,\n  CardFooter,\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/card/vertical-resource-collection-card.tsx","r":[0,5654],"t":"import * as React from 'react'\nimport {\n  Card,\n  CardPreview,\n  CardHeader,\n  CardContent,\n  CardBody,\n  CardMeta,\n} from './index'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Markdown from '../markdown'\nimport {track} from 'utils/analytics'\nimport {get} from 'lodash'\nimport {CardResource} from 'types'\nimport Textfit from 'react-textfit'\n\nconst VerticalResourceCollectionCard: React.FC<{\n  resource: CardResource\n  location?: string\n  describe?: boolean\n  className?: string\n  titleColor?: string\n}> = ({resource, location, className = '', titleColor, ...props}) => {\n  className = `${className} border-none flex flex-col sm:py-8 py-6`\n\n  return (\n    (<Card {...props} className={className}>\n      {resource.image && (\n        <Link\n          href={resource.path}\n          onClick={() => {\n            track('clicked resource', {\n              resource: resource.path,\n              linkType: 'image',\n              location,\n            })\n          }}\n          className=\"block flex-shrink-0 sm:w-auto m:w-24 w-36\"\n          tabIndex={-1}>\n\n          <CardPreview>\n            <Image\n              src={get(resource.image, 'src', resource.image)}\n              width={220}\n              height={220}\n              layout=\"fixed\"\n              className=\"object-cover rounded-md\"\n              alt={`illustration for ${resource.title}`}\n            />\n          </CardPreview>\n\n        </Link>\n      )}\n      <CardContent>\n        <CardHeader>\n          <h2 className=\"uppercase font-semibold text-xs mb-1 text-gray-700 dark:text-gray-300\">\n            {resource.name}\n          </h2>\n          {resource.path ? (\n            <Link\n              href={resource.path}\n              onClick={() => {\n                track('clicked resource', {\n                  resource: resource.path,\n                  linkType: 'text',\n                  location,\n                })\n              }}\n              className=\"hover:text-blue-600 dark:hover:text-blue-300\">\n\n              <h3\n                className={`text-xl font-bold leading-tighter text-${titleColor}`}\n              >\n                {resource.title}\n              </h3>\n\n            </Link>\n          ) : (\n            <h3\n              className={`text-xl font-bold leading-tighter text-${titleColor}`}\n            >\n              {resource.title}\n            </h3>\n          )}\n        </CardHeader>\n        <CardMeta className=\"text-xs text-gray-600 dark:text-gray-300 mb-2 mt-1\">\n          {resource.byline}\n        </CardMeta>\n        {resource.description && (\n          <CardBody className=\"prose dark:prose-dark dark:prose-dark-sm prose-sm max-w-none\">\n            <Markdown>{resource.description}</Markdown>\n          </CardBody>\n        )}\n        {resource.resources &&\n          resource.resources.map((resource) => {\n            const getImageSize = (image: string) => {\n              return image.includes('tags') ? 32 : 50\n            }\n            const className = `flex items-center py-2`\n            return (\n              (<Card {...props} className={className} quiet>\n                {resource.image && (\n                  <Link\n                    href={resource.path}\n                    onClick={() => {\n                      track('clicked resource', {\n                        resource: resource.path,\n                        linkType: 'image',\n                        location,\n                      })\n                    }}\n                    className=\"sm:w-12 w-12 flex-shrink-0 flex justify-center items-center\"\n                    tabIndex={-1}>\n\n                    <CardPreview>\n                      <Image\n                        src={get(resource.image, 'src', resource.image)}\n                        width={getImageSize(\n                          get(resource.image, 'src', resource.image),\n                        )}\n                        height={getImageSize(\n                          get(resource.image, 'src', resource.image),\n                        )}\n                        alt={`illustration for ${resource.title}`}\n                      />\n                    </CardPreview>\n\n                  </Link>\n                )}\n                <CardContent\n                  className={`${resource.image ? 'ml-3' : ''} flex flex-col`}\n                >\n                  <CardHeader>\n                    <Link\n                      href={resource.path}\n                      onClick={() => {\n                        track('clicked resource', {\n                          resource: resource.path,\n                          linkType: 'text',\n                          location,\n                        })\n                      }}\n                      className=\"hover:text-blue-600 dark:hover:text-blue-300\">\n\n                      <h4 className=\"text-lg font-semibold leading-tight\">\n                        <Textfit mode=\"multi\" min={14} max={17}>\n                          {resource.title}\n                        </Textfit>\n                      </h4>\n\n                    </Link>\n                  </CardHeader>\n                  <CardMeta className=\"text-xs text-gray-600 dark:text-gray-300\">\n                    {resource.byline}\n                  </CardMeta>\n                </CardContent>\n              </Card>)\n            );\n          })}\n      </CardContent>\n    </Card>)\n  );\n}\n\nexport {VerticalResourceCollectionCard}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/card/verticle-resource-card.tsx","r":[0,2544],"t":"import * as React from 'react'\nimport {\n  Card,\n  CardPreview,\n  CardHeader,\n  CardContent,\n  CardBody,\n  CardMeta,\n} from './index'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Markdown from '../markdown'\nimport {track} from 'utils/analytics'\nimport {get} from 'lodash'\nimport {CardResource} from 'types'\n\nconst VerticalResourceCard: React.FC<{\n  resource: CardResource\n  location?: string\n  describe?: boolean\n  className?: string\n}> = ({\n  children,\n  resource,\n  location,\n  className = 'border-none flex flex-col items-center justify-center text-center sm:py-8 py-6',\n  describe = false,\n  ...props\n}) => {\n  return (\n    <Card {...props} className={className}>\n      {resource.image && resource.path ? (\n        <ResourceLink path={resource.path} location={location} linkType=\"image\">\n          <PreviewImage image={resource.image} title={resource.title} />\n        </ResourceLink>\n      ) : (\n        <PreviewImage image={resource.image} title={resource.title} />\n      )}\n      <CardContent>\n        <CardHeader>\n          <h2 className=\"uppercase font-semibold text-xs mb-1 text-gray-700 dark:text-gray-300\">\n            {resource.name}\n          </h2>\n          <ResourceLink path={resource.path} location={location}>\n            <h3 className=\"text-lg font-bold leading-tighter py-3 hover:text-blue-700\">\n              {resource.title}\n            </h3>\n          </ResourceLink>\n        </CardHeader>\n        <CardMeta className=\"text-xs text-gray-600 dark:text-gray-300 mb-2 mt-1\">\n          {resource.byline}\n        </CardMeta>\n        {describe && (\n          <CardBody className=\"prose dark:prose-dark dark:prose-dark-sm prose-sm max-w-none\">\n            <Markdown>{resource.description}</Markdown>\n          </CardBody>\n        )}\n      </CardContent>\n      {children}\n    </Card>\n  )\n}\n\nconst ResourceLink: React.FC<{\n  path: string\n  location?: string\n  className?: string\n  linkType?: string\n}> = ({children, path, location, linkType = 'text', ...props}) => (\n  <Link\n    href={path}\n    onClick={() => {\n      track('clicked resource', {\n        resource: path,\n        linkType,\n        location,\n      })\n    }}\n    {...props}>\n\n    {children}\n\n  </Link>\n)\n\nconst PreviewImage: React.FC<{title: string; image: any}> = ({\n  title,\n  image,\n}) => (\n  <CardPreview>\n    <Image\n      src={get(image, 'src', image)}\n      width={200}\n      height={200}\n      quality={100}\n      alt={`illustration for ${title}`}\n    />\n  </CardPreview>\n)\nexport {VerticalResourceCard}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/feedback-input/index.tsx","r":[0,18265],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport axios from 'utils/configured-axios'\nimport * as Yup from 'yup'\nimport isEmpty from 'lodash/isEmpty'\nimport {motion} from 'framer-motion'\nimport {useInterval} from 'react-use'\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\nimport {DialogOverlay, DialogContent} from '@reach/dialog'\nimport {track} from 'utils/analytics'\nimport {Listbox, Transition} from '@headlessui/react'\nimport {CheckIcon, SelectorIcon} from '@heroicons/react/solid'\n\nimport Sob from './images/Sob'\nimport Hearteyes from './images/Hearteyes'\nimport NeutralFace from './images/NeutralFace'\nimport useCio from 'hooks/use-cio'\n\ntype FeedbackCategory = {\n  id: number\n  category: string\n  label: string\n  placeholderText: string\n  supportingInformation: React.ReactFragment | string\n  buttonText: string\n}\n\ntype FeedbackSelectCategoryProps = {\n  selectedCategory: FeedbackCategory\n  setSelectedCategory: any\n}\n\n// Feedback categories select menu\n\nconst feedbackCategories: FeedbackCategory[] = [\n  {\n    id: 1,\n    category: 'general',\n    label: 'General product feedback',\n    placeholderText: 'Tell us how you feel about it...',\n    supportingInformation:\n      'We read all feedback submissions and take your opinion into account when designing product improvements.',\n    buttonText: 'Send feedback',\n  },\n  {\n    id: 2,\n    category: 'account',\n    label: 'Help with my account or subscription',\n    placeholderText: 'Tell us what you need help with...',\n    supportingInformation: (\n      <>\n        You can also get help by emailing{' '}\n        <a\n          href=\"mailto:support@egghead.io\"\n          style={{textDecoration: 'underline'}}\n        >\n          support@egghead.io\n        </a>\n        . We'll get back to you as soon as we can.\n      </>\n    ),\n    buttonText: 'Send support request',\n  },\n  {\n    id: 3,\n    category: 'bug',\n    label: 'Report a bug',\n    placeholderText: 'Tell us what the problem is...',\n    supportingInformation:\n      \"We'll pass the message onto our dev team. Thanks for helping us make egghead work well for everyone!\",\n    buttonText: 'Send bug report',\n  },\n]\n\nfunction classNames(...classes: string[]) {\n  return classes.filter(Boolean).join(' ')\n}\n\nfunction FeedbackSelectCategory({\n  selectedCategory,\n  setSelectedCategory,\n}: FeedbackSelectCategoryProps) {\n  return (\n    <Listbox value={selectedCategory} onChange={setSelectedCategory}>\n      {({open}) => (\n        <>\n          <Listbox.Label className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\">\n            What kind of feedback would you like to leave?\n          </Listbox.Label>\n          <div className=\"mt-1 relative\">\n            <Listbox.Button className=\"bg-white relative w-full border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\">\n              <span className=\"block truncate text-black\">\n                {selectedCategory.label}\n              </span>\n              <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon\n                  className=\"h-5 w-5 text-gray-400\"\n                  aria-hidden=\"true\"\n                />\n              </span>\n            </Listbox.Button>\n            {/* @ts-ignore */}\n            <Transition\n              show={open}\n              as={React.Fragment}\n              leave=\"transition ease-in duration-100\"\n              leaveFrom=\"opacity-100\"\n              leaveTo=\"opacity-0\"\n            >\n              <Listbox.Options className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n                {feedbackCategories.map((category) => (\n                  <Listbox.Option\n                    key={category.id}\n                    className={({active}) =>\n                      classNames(\n                        active ? 'text-white bg-blue-600' : 'text-gray-900',\n                        'cursor-default select-none relative py-2 pl-3 pr-9',\n                      )\n                    }\n                    value={category}\n                  >\n                    {({active, selected}) => (\n                      <>\n                        <span\n                          className={classNames(\n                            selected ? 'font-semibold' : 'font-normal',\n                            'block truncate',\n                          )}\n                        >\n                          {category.label}\n                        </span>\n\n                        {selected ? (\n                          <span\n                            className={classNames(\n                              active ? 'text-white' : 'text-blue-600',\n                              'absolute inset-y-0 right-0 flex items-center pr-4',\n                            )}\n                          >\n                            <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                          </span>\n                        ) : null}\n                      </>\n                    )}\n                  </Listbox.Option>\n                ))}\n              </Listbox.Options>\n            </Transition>\n          </div>\n        </>\n      )}\n    </Listbox>\n  )\n}\n\n// Feedback Yup email validation\n\nconst feedbackSchema = Yup.object().shape({\n  emoji: Yup.string(),\n  feedback: Yup.string().when('emoji', {\n    is: undefined,\n    then: Yup.string()\n      .required(\n        `Oops, you forgot to leave feedback! Please pick an emoji or write us a message in the area above.`,\n      )\n      .min(4, `Too short. Tell us more! 😊`),\n  }),\n})\n\n// Feedback emoji select menu\n\nconst EMOJIS = new Map([\n  [<Hearteyes />, 'heart_eyes'],\n  [<NeutralFace />, 'neutral_face'],\n  [<Sob />, 'sob'],\n])\n\ntype FeedbackProps = {\n  className?: string\n  children: React.ReactChild\n  user: any\n}\n\nconst Feedback: FunctionComponent<FeedbackProps> = ({\n  className,\n  children,\n  user,\n}) => {\n  const [showDialog, setShowDialog] = React.useState(false)\n  const [state, setState] = React.useState<{\n    loading: boolean\n    success: boolean\n    errorMessage: any\n  }>({\n    loading: false,\n    success: false,\n    errorMessage: null,\n  })\n  const [selectedCategory, setSelectedCategory] =\n    React.useState<FeedbackCategory>(feedbackCategories[0])\n\n  const {subscriber, cioIdentify} = useCio()\n\n  const openDialog = () => {\n    setShowDialog(true)\n    setState({success: false, loading: false, errorMessage: null})\n  }\n  const closeDialog = () => {\n    setShowDialog(false)\n  }\n\n  useInterval(() => closeDialog(), state.success ? 2000 : null)\n\n  function handleSubmit(values: any, actions: any) {\n    const slackEmojiCode = isEmpty(values.emoji)\n      ? ':unicorn_face:'\n      : `:${values.emoji}:`\n\n    setState({loading: true, success: false, errorMessage: null})\n    actions.setSubmitting(true)\n    axios\n      .post('/api/v1/feedback', {\n        feedback: {\n          url: window.location.toString(),\n          site: `egghead-next`,\n          category: selectedCategory.category,\n          comment: values.feedback,\n          user: user,\n          emotion: slackEmojiCode,\n        },\n      })\n      .then(() => {\n        track(`sent feedback`, {\n          category: selectedCategory.category,\n          comment: values.feedback,\n          emotion: slackEmojiCode,\n          url: window.location.toString(),\n        })\n        if (subscriber) {\n          const learner_score =\n            Number(subscriber.attributes?.learner_score) || 0\n          cioIdentify(subscriber.id, {\n            learner_score: learner_score + 100,\n          })\n        }\n        actions.setSubmitting(false)\n        actions.resetForm()\n        setState({\n          success: true,\n          loading: false,\n          errorMessage: null,\n        })\n      })\n      .catch((err) => {\n        actions.setSubmitting(false)\n        setState({success: false, errorMessage: err.message, loading: false})\n      })\n  }\n\n  let EMOJI_CODES: any = null\n\n  function getEmoji(code: any) {\n    if (code === null) return code\n    if (EMOJI_CODES === null) {\n      EMOJI_CODES = new Map([...(EMOJIS as any)].map(([k, v]) => [v, k]))\n    }\n    return EMOJI_CODES.get(code)\n  }\n\n  const Emoji: FunctionComponent<{code: any}> = ({code}) => getEmoji(code)\n\n  return (\n    <>\n      <button className={className} onClick={openDialog} type=\"button\">\n        {children}\n      </button>\n      <DialogOverlay\n        isOpen={showDialog}\n        onDismiss={closeDialog}\n        className=\"bg-black/50 backdrop-blur-sm flex justify-center items-center p-4 xs:p-6 z-50\"\n      >\n        <DialogContent\n          aria-label=\"write us feedback\"\n          className=\"bg-white dark:bg-gray-900 shadow-lg rounded-lg max-w-screen-sm text-text border dark:border-gray-800 relative w-full p-3 xs:p-6\"\n        >\n          <div className=\"w-full flex flex-col\">\n            {state.success ? (\n              <motion.div\n                animate={{opacity: [0, 1]}}\n                initial={{opacity: 0}}\n                className=\"relative flex flex-col items-center justify-center\"\n              >\n                <div className=\"text-white w-16 h-16 bg-green-500 flex items-center justify-center rounded-full p-2\">\n                  {/* prettier-ignore */}\n                  <svg width=\"32\" height=\"32\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\" fill=\"currentColor\"/></g></svg>\n                </div>\n                <h4 className=\"text-lg text-center mt-4 font-semibold\">\n                  Thank you!\n                </h4>\n              </motion.div>\n            ) : (\n              <>\n                <h4 className=\"text-[1.125rem] xs:text-lg mb-4 font-semibold\">\n                  We'd love to hear from you.\n                </h4>\n                <FeedbackSelectCategory\n                  selectedCategory={selectedCategory}\n                  setSelectedCategory={setSelectedCategory}\n                />\n                <Formik\n                  initialValues={{feedback: '', emoji: ''}}\n                  enableReinitialize={true}\n                  validationSchema={feedbackSchema}\n                  validateOnBlur={false}\n                  onSubmit={(values, actions) => handleSubmit(values, actions)}\n                >\n                  {({errors, isValid, touched, isSubmitting, values}) => {\n                    return (\n                      <Form>\n                        <label\n                          htmlFor=\"feedback\"\n                          className=\"sr-only text-sm font-medium leading-5 text-gray-700\"\n                        >\n                          Your feedback\n                        </label>\n                        <Field\n                          disabled={isSubmitting || state.loading}\n                          className=\"mt-2 form-input bg-background border border-gray-200 focus:shadow-outline-blue dark:text-gray-900 w-full h-36 p-3\"\n                          component=\"textarea\"\n                          name=\"feedback\"\n                          id=\"feedback\"\n                          placeholder={selectedCategory.placeholderText}\n                          aria-label=\"Enter your feedback\"\n                        />\n\n                        {/* Supporting text below input */}\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300 mt-1 mb-4\">\n                          {selectedCategory.supportingInformation}\n                        </div>\n\n                        {/* Emoji picker and submit button */}\n                        <div className=\"w-full flex flex-col sm:flex-row justify-between\">\n                          <div className=\"flex items-center justify-center\">\n                            <div id=\"emoji\" className=\"mr-3 font-semibold\">\n                              Pick an emoji\n                            </div>\n                            <div\n                              role=\"group\"\n                              aria-labelledby=\"emoji\"\n                              className=\"flex items-center\"\n                            >\n                              {Array.from(EMOJIS.values()).map((emoji) => {\n                                return (\n                                  <label\n                                    className=\"flex items-center\"\n                                    key={emoji}\n                                  >\n                                    <Field\n                                      disabled={isSubmitting || state.loading}\n                                      type=\"radio\"\n                                      name=\"emoji\"\n                                      value={emoji}\n                                      className=\"form-radio hidden\"\n                                    />\n                                    <div\n                                      className={`p-2 hover:scale-110 flex items-center border border-transparent justify-center cursor-pointer rounded-full  transition-all ease-in-out duration-100 ${\n                                        values.emoji === emoji\n                                          ? 'bg-blue-100 dark:bg-gray-600 border border-blue-200 dark:border-gray-500'\n                                          : 'hover:border-blue-200'\n                                      }`}\n                                    >\n                                      <Emoji code={emoji} />\n                                    </div>\n                                  </label>\n                                )\n                              })}\n                            </div>\n                          </div>\n\n                          <button\n                            className={`${\n                              errors.feedback && touched.feedback\n                                ? 'cursor-not-allowed hover:scale-100 bg-gray-400 hover:bg-gray-400'\n                                : ''\n                            } mt-3 block font-semibold px-5 py-3 text-base hover:scale-105 bg-blue-600 hover:bg-blue-700 transition-all ease-in-out duration-200 text-white rounded-md leading-6`}\n                            disabled={!isValid || isSubmitting || state.loading}\n                            type=\"submit\"\n                          >\n                            {isSubmitting || state.loading ? (\n                              <div className=\"flex items-center justify-center space-x-2\">\n                                <svg\n                                  className=\"text-blue-100\"\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  width={24}\n                                  height={24}\n                                  viewBox=\"0 0 24 24\"\n                                >\n                                  <motion.g\n                                    animate={{rotateZ: [0, 360]}}\n                                    transition={{repeat: Infinity}}\n                                    fill=\"currentColor\"\n                                  >\n                                    <path fill=\"none\" d=\"M0 0h24v24H0z\"></path>\n                                    <path d=\"M12 3a9 9 0 0 1 9 9h-2a7 7 0 0 0-7-7V3z\"></path>\n                                  </motion.g>\n                                </svg>\n                                <span>Sending...</span>\n                              </div>\n                            ) : (\n                              selectedCategory.buttonText\n                            )}\n                          </button>\n                        </div>\n                        <ErrorMessage\n                          name=\"feedback\"\n                          render={(msg) => (\n                            <div className=\"mt-4 flex items-start bg-orange-100 dark:bg-gray-800 rounded\">\n                              <div className=\"py-4 px-6 flex items-center text-black dark:text-gray-200\">\n                                {msg}\n                                {state.errorMessage &&\n                                  ` & ${state.errorMessage}`}\n                              </div>\n                            </div>\n                          )}\n                        />\n                      </Form>\n                    )\n                  }}\n                </Formik>\n              </>\n            )}\n          </div>\n          <div className=\"block absolute top-0 right-0 pt-2 pr-2\">\n            <button\n              onClick={closeDialog}\n              type=\"button\"\n              className={`text-gray-600 dark:text-gray-400 hover:bg-blue-100 hover:text-blue-600 dark:hover:text-blue-300 dark:hover:bg-gray-800 p-2 focus:shadow-outline-blue transition-all rounded-full hover:scale-110 ease-in-out duration-200`}\n              aria-label=\"Close\"\n            >\n              <span className=\"sr-only\">close feedback dialog</span>\n              {/* prettier-ignore */}\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" /></svg>\n            </button>\n            {state.success && (\n              <svg\n                className=\"w-12 text-blue-600 absolute pointer-events-none top-2 right-0\"\n                viewBox=\"-5 -5 60 60\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                {/* prettier-ignore */}\n                <motion.path d=\"M 0, 20 a 20, 20 0 1,0 40,0 a 20, 20 0 1,0 -40,0\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3px\" strokeDasharray=\"0 1\"\n                      animate={{\n                        pathLength: [0, 1],\n                        opacity: [0.2, 1],\n                      }}\n                      transition={{\n                        duration: 1.9,\n                        type: 'spring',\n                      }}\n                    />\n              </svg>\n            )}\n          </div>\n        </DialogContent>\n      </DialogOverlay>\n    </>\n  )\n}\n\nexport default Feedback\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/layouts/collection-page-layout.tsx","r":[0,44848],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport Markdown from 'react-markdown'\nimport toast from 'react-hot-toast'\nimport InstructorProfile from 'components/pages/courses/instructor-profile'\nimport PlayIcon from 'components/pages/courses/play-icon'\nimport getDependencies from 'data/courseDependencies'\nimport {get, first, filter, isEmpty, take, find} from 'lodash'\nimport {NextSeo} from 'next-seo'\nimport removeMarkdown from 'remove-markdown'\nimport {track} from 'utils/analytics'\nimport FolderDownloadIcon from '../icons/folder-download'\nimport RSSIcon from '../icons/rss'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport ClockIcon from '../icons/clock'\nimport CheckIcon from '../icons/check'\nimport {LessonResource} from 'types'\nimport BookmarkIcon from '../icons/bookmark'\nimport axios from 'utils/configured-axios'\nimport friendlyTime from 'friendly-time'\nimport LearnerRatings from '../pages/courses/learner-ratings'\nimport FiveStars from '../five-stars'\nimport CommunityResource from 'components/community-resource'\nimport {IconGithub} from 'components/pages/lessons/code-link'\nimport TagList from './tag-list'\nimport {useTheme} from 'next-themes'\nimport ClosedCaptionIcon from '../icons/closed-captioning'\nimport {HorizontalResourceCard} from '../card/horizontal-resource-card'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport DialogButton from '../pages/courses/dialog-button'\nimport MembershipDialogButton from '../pages/courses/membership-dialog-button'\n\nimport LoginForm from 'pages/login'\n\ntype CoursePageLayoutProps = {\n  lessons: any\n  course: any\n  ogImageUrl: string\n}\n\ntype CollectionResource = {\n  title: string\n  duration: number\n  instructor: {\n    full_name: string\n  }\n  square_cover_url: string\n  image_url: string\n  path: string\n  slug: string\n  description: string\n}\n\nconst logCollectionResource = (collection: CollectionResource) => {\n  if (typeof window !== 'undefined') {\n    const {\n      title,\n      duration,\n      instructor,\n      square_cover_url,\n      image_url,\n      path,\n      slug,\n      description,\n    } = collection\n    const image = square_cover_url || image_url\n    const formattedDuration = convertTimeWithTitles(duration)\n    const byline = `${\n      instructor?.full_name && `${instructor.full_name}・`\n    }${formattedDuration}・Course`\n\n    console.debug('collection resource', {\n      title,\n      byline,\n      ...(!!image && {image}),\n      path,\n      slug,\n      description,\n    })\n  }\n}\n\nconst Duration: React.FunctionComponent<{duration: string}> = ({duration}) => (\n  <div className=\"flex flex-row items-center\">\n    <ClockIcon className=\"w-4 h-4 mr-1 opacity-60\" />\n    <span>{duration}</span>{' '}\n    <ClosedCaptionIcon className=\"w-4 h-4 inline-block ml-2\" />\n  </div>\n)\n\nexport const UpdatedAt: React.FunctionComponent<{date: string}> = ({date}) => (\n  <div>Updated {date}</div>\n)\n\nexport const PublishedAt: React.FunctionComponent<{date: string}> = ({\n  date,\n}) => <div>Published {date}</div>\n\nconst StarsRating: React.FunctionComponent<{\n  rating: number\n}> = ({rating}) => (\n  <div className=\"flex items-center\">\n    <FiveStars rating={rating} />\n    <span className=\"ml-1 font-semibold leading-tight\">\n      {rating.toFixed(1)}\n    </span>\n  </div>\n)\n\nconst PeopleCompleted: React.FunctionComponent<{count: number}> = ({count}) => (\n  <div className=\"flex items-center flex-nowrap\">\n    <div className=\"font-semibold mr-1\">{count}</div>\n    <div className=\"whitespace-nowrap\">people completed</div>\n  </div>\n)\n\nconst CollectionPageLayout: React.FunctionComponent<CoursePageLayoutProps> = ({\n  lessons = [],\n  course,\n  ogImageUrl,\n}) => {\n  const courseDependencies: any = getDependencies(course.slug)\n  const [isFavorite, setIsFavorite] = React.useState(false)\n  const [clickable, setIsClickable] = React.useState(true)\n\n  const defaultPairWithResources: any[] = take(\n    [\n      {\n        title: 'Introduction to Cloudflare Workers',\n        byline: 'Kristian Freeman・36m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/418/892/thumb/EGH_IntroCloudFlareWorkers_Final.png',\n        path: '/playlists/introduction-to-cloudflare-workers-5aa3',\n        slug: 'introduction-to-cloudflare-workers-5aa3',\n        description:\n          \"Become familiar with the Workers CLI `wrangler` that we will use to bootstrap our Worker project. From there you'll understand how a Worker receives and returns requests/Responses. We will also build this serverless function locally for development and deploy it to a custom domain.\",\n      },\n      {\n        title: 'Create an eCommerce Store with Next.js and Stripe Checkout',\n        byline: 'Colby Fayock・1h 4m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/412/781/thumb/ecommerce-stripe-next.png',\n        path: '/playlists/create-an-ecommerce-store-with-next-js-and-stripe-checkout-562c',\n        slug: 'create-an-ecommerce-store-with-next-js-and-stripe-checkout-562c',\n        description: `This is a practical project based look at building a working e-commerce store\n        using modern tools and APIs. Excellent for a weekend side-project for your [developer project portfolio](https://joelhooks.com/developer-portfolio)`,\n      },\n      {\n        title: 'Practical Git for Everyday Professional Use',\n        byline: 'Trevor Miller・1h・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/050/thumb/egghead-practical-git-course.png',\n        path: '/courses/practical-git-for-everyday-professional-use',\n        slug: 'practical-git-for-everyday-professional-use',\n        description: `[git](/q/git) is a critical component in the modern web developers tool box. This course\n         is a solid introduction and goes beyond the basics with some more advanced git commands\n         you are sure to find useful.`,\n      },\n      {\n        title: 'Build an App with the AWS Cloud Development Kit',\n        byline: 'Tomasz Łakomy・1h 4m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/450/thumb/EGH_AWS-TS.png',\n        path: '/courses/build-an-app-with-the-aws-cloud-development-kit',\n        slug: 'build-an-app-with-the-aws-cloud-development-kit',\n        description:\n          \"Tomasz Łakomy will guide you through using TypeScript to complete the lifecycle of an application powered by AWS CDK. You'll see how to start a project, develop it locally, deploy it globally, then tear it all down when you're done. Excellent kick start for your next side project or your developer portfolio.\",\n      },\n    ].filter((resource) => {\n      return resource.slug !== course.slug\n    }),\n    3,\n  )\n\n  const {\n    topics,\n    illustrator,\n    dependencies,\n    pairWithResources = defaultPairWithResources,\n    courseProject,\n    quickFacts,\n    prerequisites,\n    essentialQuestions,\n    multiModuleCourse,\n    moduleResource,\n    moduleLabel,\n    multiModuleSlug,\n    multiModuletitle,\n    totalCourseModules,\n    multiModuleLineheight,\n  } = courseDependencies\n\n  const {\n    title,\n    image_thumb_url,\n    square_cover_480_url,\n    instructor,\n    average_rating_out_of_5,\n    watched_count,\n    description,\n    rss_url,\n    download_url,\n    toggle_favorite_url,\n    duration,\n    collection_progress,\n    favorited,\n    updated_at,\n    published_at,\n    created_at,\n    access_state,\n    customOgImage,\n    prerequisites: sanityPrerequisites,\n    topics: sanityTopics,\n    pairWithResources: sanityPairWithResources,\n    essentialQuestions: sanityEssentialQuestions,\n    illustrator: sanityIllustrator,\n    dependencies: sanityDependencies,\n    state,\n    path,\n    tags = [],\n  } = course\n\n  const ogImage = customOgImage ? customOgImage.url : ogImageUrl\n\n  const relatedResources = sanityPairWithResources\n    ? sanityPairWithResources\n    : pairWithResources\n  const courseEssentialQuestions = !isEmpty(sanityEssentialQuestions)\n    ? transformSanityEssentialQuestions(sanityEssentialQuestions)\n    : essentialQuestions\n  const courseTopics = !isEmpty(sanityTopics)\n    ? transformSanityTopics(sanityTopics)\n    : topics\n  const coursePrerequisites = !isEmpty(sanityPrerequisites)\n    ? sanityPrerequisites\n    : prerequisites\n  const courseIllustrator = !isEmpty(sanityIllustrator)\n    ? sanityIllustrator\n    : illustrator\n\n  const podcast = first(\n    course?.items?.filter((item: any) => item.type === 'podcast'),\n  )\n\n  logCollectionResource(course)\n\n  const courseTags = tags.map((tag: any) => {\n    const ogVersion = get(dependencies, tag.name)\n    const sanityTag = find(sanityDependencies, {name: tag.name})?.version\n\n    const version = !isEmpty(sanityTag) ? sanityTag : ogVersion\n\n    return {\n      ...tag,\n      ...(!!version && {version}),\n    }\n  })\n\n  React.useEffect(() => {\n    setIsFavorite(favorited)\n  }, [favorited])\n\n  const completedLessonSlugs = get(\n    collection_progress,\n    'completed_lessons',\n    [],\n  ).map((lesson: LessonResource) => lesson.slug)\n\n  const {\n    full_name: name,\n    avatar_url,\n    slug,\n    bio_short,\n    twitter,\n  } = instructor || {}\n\n  const image_url = square_cover_480_url || image_thumb_url\n\n  const imageIsTag = image_url.includes('tags/image')\n\n  const playlists = filter(course.items, {type: 'playlist'}) || []\n\n  const playlistLessons = playlists.reduce((acc, playlist) => {\n    const lessons = playlist?.lessons ?? []\n    return [...acc, ...lessons]\n  }, [])\n\n  // this is a pretty sloppy approach to fetching the next lesson\n  // via playlist lessons, but those are for nested playlists in\n  // playlists\n  const nextLesson: any = isEmpty(playlistLessons)\n    ? first(\n        lessons.filter(\n          (lesson: LessonResource) =>\n            !completedLessonSlugs.includes(lesson.slug),\n        ),\n      )\n    : first(\n        playlistLessons.filter(\n          (lesson: LessonResource) =>\n            !completedLessonSlugs.includes(lesson.slug),\n        ),\n      )\n\n  const PlayButton: React.FunctionComponent<{lesson: LessonResource}> = ({\n    lesson,\n  }) => {\n    const isContinuing =\n      lesson && lesson !== first(lessons) && lesson !== first(playlistLessons)\n    return lesson ? (\n      <Link\n        href={lesson.path}\n        onClick={() => {\n          track(\n            `clicked ${isContinuing ? 'continue' : 'start'} watching course`,\n            {\n              course: course.slug,\n            },\n          )\n        }}\n        className=\"inline-flex justify-center items-center px-6 py-4 font-semibold rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\">\n\n        <PlayIcon className=\"text-blue-100 mr-2\" />\n        {isContinuing ? 'Continue' : 'Start'}Watching\n      </Link>\n    ) : null;\n  }\n\n  const CourseArtwork: React.FunctionComponent<{\n    path: string\n    size: number\n    trackText: string\n  }> = ({path, size, trackText}) => {\n    return path ? (\n      <Link\n        href={path}\n        onClick={() =>\n          track(trackText, {\n            course: course.slug,\n          })\n        }>\n\n        <Image\n          src={image_url}\n          alt={`illustration for ${title}`}\n          height={size}\n          width={size}\n          quality={100}\n        />\n\n      </Link>\n    ) : (\n      <Image\n        src={image_url}\n        alt={`illustration for ${title}`}\n        height={size}\n        width={size}\n        quality={100}\n      />\n    );\n  }\n\n  const EpicReactBanner = ({\n    image = 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1626109728/epic-react/default-banners/banner-course-page_2x.jpg',\n    width = 1416,\n    height = 508,\n  }) => {\n    return get(course, 'owner.id') === 15369 ? (\n      <ExternalTrackedLink\n        eventName=\"clicked epic react banner\"\n        params={{location: course.path}}\n        href=\"https://epicreact.dev\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        className=\"block\"\n      >\n        <div className=\"overflow-hidden flex items-center justify-center rounded-lg\">\n          <Image\n            src={image}\n            alt=\"Get Really Good at React on EpicReact.dev by Kent C. Dodds\"\n            width={width}\n            height={height}\n            quality={100}\n            className=\"hover:scale-[102%] ease-in-out duration-500\"\n          />\n        </div>\n      </ExternalTrackedLink>\n    ) : null\n  }\n\n  const trackEmailCapture = (email: string) => {\n    track('submitted email - disabled bookmark button', {\n      course: course.slug,\n      email,\n    })\n  }\n\n  return (<>\n    <NextSeo\n      description={removeMarkdown(description)}\n      canonical={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`}\n      title={title}\n      titleTemplate={'%s | egghead.io'}\n      twitter={{\n        handle: instructor?.twitter ?? `@eggheadio`,\n        site: `@eggheadio`,\n        cardType: 'summary_large_image',\n      }}\n      openGraph={{\n        title,\n        url: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`,\n        description: removeMarkdown(description),\n        site_name: 'egghead',\n        images: [\n          {\n            url: ogImage,\n          },\n        ],\n      }}\n    />\n    <div className=\"max-w-screen-xl mx-auto sm:pb-16 pb-8 dark:text-gray-100\">\n      {state === 'retired' && (\n        <div className=\"w-full text-lg bg-orange-100 text-orange-800 p-3 rounded-md border border-orange-900 border-opacity-20\">\n          ⚠️ This course has been retired and might contain outdated\n          information.\n        </div>\n      )}\n      <div className=\"mt-10 grid md:grid-cols-5 grid-cols-1 md:gap-16 gap-5 rounded-md w-full left-0 mb-4\">\n        <div className=\"md:col-span-3 md:row-start-auto flex flex-col h-full max-w-screen-2xl w-full mx-auto\">\n          <header>\n            {image_url && (\n              <div className=\"md:hidden flex items-center justify-center\">\n                <CourseArtwork\n                  path={nextLesson.path}\n                  trackText=\"clicked course image on mobile\"\n                  size={imageIsTag ? 100 : 200}\n                />\n              </div>\n            )}\n            {access_state && (\n              <div\n                className={`${\n                  access_state === 'free' ? 'bg-orange-500' : 'bg-blue-500'\n                } text-white w-12 items-center text-center py-1 rounded-full uppercase font-bold my-2 text-xs mx-auto md:m-0 md:mb-2`}\n              >\n                {access_state}\n              </div>\n            )}\n            {moduleResource && (\n              <div className=\"text-base leading-loose text-center mt-4 -mb-4 md:mb-0 md:mt-0 md:text-left\">\n                <Link href={multiModuleSlug}>\n\n                  <span className=\"text-gray-700 dark:text-gray-400 hover:underline\">\n                    {multiModuletitle && multiModuletitle}\n                  </span>\n\n                </Link>\n                {' • '}\n                <span className=\"font-semibold\">Part {moduleLabel}</span>\n              </div>\n            )}\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold leading-tight md:leading-tighter md:text-left text-center mt-4 md:mt-0\">\n              {title}\n            </h1>\n\n            {/* Start of metadata block */}\n            <div className=\"flex flex-col my-6 items-center md:items-start space-y-2\">\n              {instructor && (\n                <InstructorProfile\n                  name={name}\n                  avatar_url={avatar_url}\n                  url={slug}\n                  bio_short={bio_short}\n                  twitter={twitter}\n                />\n              )}\n\n              <div className=\"pt-2 flex items-center flex-col md:flex-row flex-wrap\">\n                <TagList tags={courseTags} courseSlug={course.slug} />\n                <div className=\"flex items-center md:justify-start justify-center md:mr-4\">\n                  {duration && (\n                    <div className=\"mr-4 mt-2 md:mt-0\">\n                      <Duration duration={convertTimeWithTitles(duration)} />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex flex-col md:flex-row items-center md:justify-start justify-center space-y-4 md:space-y-0 md:space-x-6 w-full\">\n                <div className=\"flex flex-col sm:flex-row items-center space-y-3 sm:space-y-0 sm:space-x-4 sm:flex-nowrap\">\n                  {average_rating_out_of_5 > 0 && (\n                    <StarsRating rating={average_rating_out_of_5} />\n                  )}\n                  {watched_count > 0 && (\n                    <PeopleCompleted count={watched_count} />\n                  )}\n                </div>\n              </div>\n\n              <div className=\"opacity-80 text-sm flex flex-row space-x-3 md:items-start\">\n                {created_at && (\n                  <PublishedAt date={friendlyTime(new Date(created_at))} />\n                )}{' '}\n                <span className=\"text-gray-400\">|</span>\n                {updated_at && (\n                  <UpdatedAt date={friendlyTime(new Date(updated_at))} />\n                )}\n              </div>\n            </div>\n            {/* End of metadata block */}\n\n            {/* Start of action buttons block */}\n            <div className=\"dark:text-gray-900 flex items-center md:justify-start justify-center mt-4 space-x-2\">\n              {/* Bookmark button */}\n              {toggle_favorite_url ? (\n                <button\n                  onClick={() => {\n                    if (clickable) {\n                      setIsClickable(false)\n                      track(\n                        `clicked ${isFavorite ? 'remove' : 'add'} bookmark`,\n                        {\n                          course: course.slug,\n                        },\n                      )\n                      setTimeout(() => {\n                        setIsClickable(true)\n                      }, 1000)\n                      axios.post(toggle_favorite_url).then((resp) => {\n                        setIsFavorite(!isFavorite)\n                        toast(\n                          `Course ${\n                            isFavorite ? 'removed from' : 'added to'\n                          } Bookmarks`,\n                          {duration: 1000},\n                        )\n                      })\n                    }\n                  }}\n                >\n                  <div\n                    className={\n                      ' flex flex-row items-center rounded  px-4 py-2 border transition-all text-sm xs:text-base ease-in-out duration-150 shadow-sm ' +\n                      (isFavorite\n                        ? 'hover:bg-blue-500 bg-blue-600 border-blue-700 text-white'\n                        : 'bg-white text-gray-600 hover:bg-gray-200 dark:text-gray-300 dark:hover:bg-gray-700 border-gray-300  dark:bg-gray-800 dark:border-gray-600')\n                    }\n                  >\n                    <BookmarkIcon\n                      className=\"w-4 h-4 mr-2\"\n                      fill={isFavorite}\n                    />{' '}\n                    {isFavorite ? 'Bookmarked' : 'Bookmark'}\n                  </div>\n                </button>\n              ) : (\n                <DialogButton\n                  buttonText=\"Bookmark\"\n                  title=\"Sign in or create a free account to bookmark\"\n                  buttonStyles=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-100 \n                    dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out opacity-90 shadow-sm\"\n                >\n                  <LoginForm\n                    image={<></>}\n                    className=\"w-full mx-auto flex flex-col items-center justify-center\"\n                    label=\"Email address\"\n                    formClassName=\"max-w-xs md:max-w-sm mx-auto w-full\"\n                    button=\"Sign In or Create an Account\"\n                    track={trackEmailCapture}\n                  >\n                    <p className=\"max-w-10 text-center text-gray-700 dark:text-gray-400 px-3\">\n                      You need to be signed in to bookmark courses. Sign in or\n                      create a free account to save this course.\n                    </p>\n                  </LoginForm>\n                </DialogButton>\n              )}\n\n              {/* Download button */}\n              {download_url ? (\n                <Link\n                  href={download_url}\n                  onClick={() => {\n                    track(`clicked download course`, {\n                      course: course.slug,\n                    })\n                  }}>\n\n                  <div\n                    className=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-200 \n                  dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out shadow-sm\"\n                  >\n                    <FolderDownloadIcon className=\"w-4 h-4 mr-1\" /> Download\n                  </div>\n\n                </Link>\n              ) : (\n                <MembershipDialogButton\n                  buttonText=\"Download\"\n                  title=\"Become a member to download this course\"\n                >\n                  As an egghead member you can download any of our courses and\n                  watch them offline.\n                </MembershipDialogButton>\n              )}\n\n              {/* RSS button */}\n              {rss_url ? (\n                <Link\n                  href={rss_url}\n                  onClick={() => {\n                    track(`clicked rss feed link`, {\n                      course: course.slug,\n                    })\n                  }}>\n\n                  <div\n                    className=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-200 \n                  dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out shadow-sm\"\n                  >\n                    <RSSIcon className=\"w-4 h-4 mr-1\" /> RSS\n                  </div>\n\n                </Link>\n              ) : (\n                <a\n                  onClick={() => {\n                    track(`clicked disabled rss feed link`, {\n                      course: course.slug,\n                    })\n                  }}\n                >\n                  <MembershipDialogButton\n                    buttonText=\"RSS\"\n                    title=\"Become a member to access RSS feeds\"\n                  >\n                    As an egghead member you can subscribe to any of our\n                    courses using an RSS feed.\n                  </MembershipDialogButton>\n                </a>\n              )}\n            </div>\n            {/* End of action buttons block */}\n\n            <div className=\"md:hidden flex items-center justify-center w-full mt-5\">\n              <PlayButton lesson={nextLesson} />\n            </div>\n            <Markdown className=\"prose dark:prose-dark md:prose-lg md:dark:prose-lg-dark text-gray-900 dark:text-gray-100 mt-14 mb-6\">\n              {description}\n            </Markdown>\n            <div className=\"pt-5 md:hidden block\">\n              <CourseProjectCard courseProject={courseProject} />\n\n              {get(course, 'access_state') === 'free' && (\n                <div className=\"p-4 my-8 border border-gray-100 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800\">\n                  <CommunityResource type=\"course\" />\n                </div>\n              )}\n            </div>\n            {!isEmpty(podcast) && (\n              <CoursePodcast podcast={podcast} instructorName={name} />\n            )}\n\n            {courseTopics && (\n              <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                <h2 className=\"text-lg font-semibold mb-3\">\n                  What you'll learn:\n                </h2>\n                <div className=\"prose dark:prose-dark\">\n                  <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                    {courseTopics?.map((topic: string) => (\n                      <li\n                        key={topic}\n                        className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                      >\n                        {topic}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n            {coursePrerequisites && (\n              <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                <h2 className=\"text-lg font-semibold mb-3\">Prerequisites:</h2>\n                <div className=\"prose dark:prose-dark\">\n                  <Prereqs prerequisites={coursePrerequisites} />\n                </div>\n              </div>\n            )}\n            {quickFacts && (\n              <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                <h2 className=\"text-lg font-semibold mb-3\">Quick Facts:</h2>\n                <div className=\"prose dark:prose-dark\">\n                  <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                    {quickFacts?.map((quickFact: string) => (\n                      <li\n                        key={quickFact}\n                        className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                      >\n                        {quickFact}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n            {courseEssentialQuestions && (\n              <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                <h2 className=\"text-lg font-semibold mb-3\">\n                  Questions to Think About:\n                </h2>\n                <div className=\"prose dark:prose-dark\">\n                  <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                    {courseEssentialQuestions?.map(\n                      (essentialQuestion: string) => (\n                        <li\n                          key={essentialQuestion}\n                          className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                        >\n                          {essentialQuestion}\n                        </li>\n                      ),\n                    )}\n                  </ul>\n                </div>\n              </div>\n            )}\n            <LearnerRatings collection={course} />\n            {!isEmpty(relatedResources) && (\n              <div className=\"my-12 md:flex hidden flex-col space-y-2\">\n                <h2 className=\"text-lg font-semibold mb-3\">\n                  You might also like these resources:\n                </h2>\n                <EpicReactBanner />\n                {relatedResources.map((resource: any) => {\n                  return (\n                    <div key={resource.slug}>\n                      <HorizontalResourceCard\n                        className=\"border my-4 border-opacity-10 border-gray-400 dark:border-gray-700\"\n                        resource={resource}\n                        location={course.path}\n                      />\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </header>\n        </div>\n        <div className=\"md:col-span-2 flex flex-col items-center justify-start md:mb-0 mb-4\">\n          {image_url && (\n            <div className=\"md:block hidden\">\n              <CourseArtwork\n                path={nextLesson.path}\n                size={imageIsTag ? 200 : 420}\n                trackText=\"clicked course image\"\n              />\n            </div>\n          )}\n          {courseIllustrator && (\n            <div className=\"md:block hidden text-sm opacity-80 text-center\">\n              <h4 className=\"font-semibold\">Credits</h4>\n              <span>{courseIllustrator?.name}</span>\n            </div>\n          )}\n          <div className=\"md:block hidden space-y-6\">\n            <div className=\"w-full flex justify-center mt-10 mb-4\">\n              <PlayButton lesson={nextLesson} />\n            </div>\n\n            <CourseProjectCard courseProject={courseProject} />\n\n            {get(course, 'access_state') === 'free' && (\n              <div className=\"p-4 my-8 border border-gray-100 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800\">\n                <CommunityResource type=\"course\" />\n              </div>\n            )}\n          </div>\n          <section className=\"mt-8\">\n            <div className=\"mb-2 flex flex-col space-y-4 \">\n              {moduleResource && (\n                <div className=\"border border-gray-100 dark:text-gray-400 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800 p-4 my-4\">\n                  Part{' '}\n                  {moduleLabel && (\n                    <span className=\"font-semibold dark:text-gray-100\">\n                      {moduleLabel}\n                    </span>\n                  )}{' '}\n                  of {totalCourseModules && totalCourseModules} in the{' '}\n                  <Link href={multiModuleSlug}>\n\n                    <span className=\"font-semibold hover:underline dark:text-gray-100\">\n                      {multiModuletitle && multiModuletitle}\n                    </span>\n\n                  </Link>\n                </div>\n              )}\n              <h2 className=\"text-xl font-bold\">\n                {multiModuleCourse ? 'Modules' : 'Course Content'}\n              </h2>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 font-normal\">\n                {duration && `${convertTimeWithTitles(duration)} • `}\n                {lessons.length + playlistLessons.length} lessons{' '}\n                {multiModuleCourse && '• 4 Modules'}{' '}\n              </div>\n            </div>\n            {multiModuleCourse ? (\n              <ul className=\"relative\">\n                <div\n                  className=\"bg-gray-200 dark:bg-gray-700 absolute left-[79px] w-[1px] top-[8%] z-0\"\n                  // @ts-ignore\n                  css={{\n                    height: multiModuleLineheight,\n                  }}\n                ></div>\n                {playlists.map((course: any) => {\n                  return (\n                    (<ul key={course.slug}>\n                      <div className=\"py-10 max-w-max-content flex space-x-10 items-center\">\n                        <Link href={course.path}>\n\n                          <div className=\"flex-shrink-0 flex\">\n                            <Image\n                              src={course.square_cover_url}\n                              width={160}\n                              height={160}\n                              layout=\"fixed\"\n                              quality={100}\n                            />\n                          </div>\n\n                        </Link>\n                        <div className=\"flex flex-col\">\n                          <Link href={course.path}>\n\n                            <h2 className=\"text-lg font-semibold leading-tight\">\n                              {course.title}\n                            </h2>\n\n                          </Link>\n                          <div className=\"text-xs text-gray-700 dark:text-gray-500 font-semibold mt-1\">\n                            {course.duration &&\n                              `${convertTimeWithTitles(course.duration)} • `}\n                            {course.lessons.length} lessons\n                          </div>\n                        </div>\n                      </div>\n                    </ul>)\n                  );\n                })}\n              </ul>\n            ) : (\n              <div>\n                <ul>\n                  {playlists.map((playlist: any) => {\n                    return (\n                      (<li key={playlist.slug}>\n                        <div className=\"font-semibold flex items-center leading-tight py-2\">\n                          {playlist.path && (\n                            <Link\n                              href={playlist.path}\n                              onClick={() => {\n                                track(\n                                  `clicked collection link on course page`,\n                                  {\n                                    course: course.slug,\n                                    collection: playlist.slug,\n                                  },\n                                )\n                              }}\n                              className=\"hover:underline font-semibold flex items-center w-full\">\n\n                              <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-900 dark:text-gray-100 mt-0\">\n                                {playlist.title}\n                              </Markdown>\n\n                            </Link>\n                          )}\n                        </div>\n                        <div>\n                          <ul className=\"ml-8\">\n                            {playlist?.lessons?.map(\n                              (lesson: LessonResource, index: number) => {\n                                const isComplete =\n                                  completedLessonSlugs.includes(lesson.slug)\n                                return (\n                                  (<li\n                                    key={`${playlist.slug}::${lesson.slug}`}\n                                  >\n                                    <div className=\"flex items-center leading-tight py-2\">\n                                      <div className=\"flex items-center mr-2 flex-grow\">\n                                        <small className=\"text-gray-500 dark:text-gray-600 pt-px font-xs scale-75 font-normal w-4\">\n                                          {isComplete ? `✔️` : index + 1}\n                                        </small>\n                                        <PlayIcon className=\"text-gray-500 dark:text-gray-100 mx-1\" />\n                                      </div>\n                                      {lesson.path && (\n                                        <Link\n                                          href={lesson.path}\n                                          onClick={() => {\n                                            track(\n                                              `clicked collection video link on course page`,\n                                              {\n                                                course: course.slug,\n                                                video: lesson.slug,\n                                                collection: playlist.slug,\n                                              },\n                                            )\n                                          }}\n                                          className=\"hover:underline flex items-center w-full\">\n\n                                          <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-700 dark:text-gray-100 mt-0\">\n                                            {lesson.title}\n                                          </Markdown>\n\n                                        </Link>\n                                      )}\n                                    </div>\n                                  </li>)\n                                );\n                              },\n                            )}\n                          </ul>\n                        </div>\n                      </li>)\n                    );\n                  })}\n                </ul>\n              </div>\n            )}\n\n            <div>\n              <ul>\n                {lessons.map((lesson: LessonResource, index: number) => {\n                  const isComplete = completedLessonSlugs.includes(\n                    lesson.slug,\n                  )\n                  return (\n                    (<li key={lesson.slug}>\n                      <div className=\"font-semibold flex  leading-tight py-2\">\n                        <div className=\"flex items-center mr-2 space-x-2\">\n                          <div\n                            className={`${\n                              isComplete\n                                ? 'text-blue-600 dark:text-green-400'\n                                : 'text-gray-500 dark:text-gray-400'\n                            } pt-px font-xs scale-75 font-normal w-4`}\n                          >\n                            {isComplete ? (\n                              <CheckIcon className=\"w-6 h-6 -translate-x-2\" />\n                            ) : (\n                              index + 1\n                            )}\n                          </div>\n                          {lesson.icon_url && (\n                            <div className=\"flex flex-shrink-0 w-8 items-center\">\n                              <Image\n                                src={lesson.icon_url}\n                                width={24}\n                                height={24}\n                              />\n                            </div>\n                          )}\n                        </div>\n                        {lesson.path && (\n                          <div className=\"flex flex-col \">\n                            <div>\n                              <Link\n                                href={lesson.path}\n                                onClick={() => {\n                                  track(\n                                    `clicked video link on course page`,\n                                    {\n                                      course: course.slug,\n                                      video: lesson.slug,\n                                    },\n                                  )\n                                }}\n                                className=\"text-lg hover:underline hover:text-blue-600 font-semibold dark:text-gray-100\">\n\n                                {lesson.title}\n\n                              </Link>\n                            </div>\n                            <div className=\"text-xs text-gray-700 dark:text-gray-500\">\n                              {convertTimeWithTitles(lesson.duration, {\n                                showSeconds: true,\n                              })}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </li>)\n                  );\n                })}\n              </ul>\n            </div>\n          </section>\n          {!isEmpty(pairWithResources) && (\n            <div className=\"my-12 flex md:hidden flex-col space-y-2\">\n              <h2 className=\"text-lg font-semibold mb-3\">\n                You might also like these resources:\n              </h2>\n              <EpicReactBanner\n                // 25% off\n                // image=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1625226676/epic-react/summer-sale-2021/banner-react-page_2x.jpg\"\n                // default\n                image=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1626109728/epic-react/default-banners/banner-react-page_2x.jpg\"\n                width={916 / 2}\n                height={1024 / 2}\n              />\n              {pairWithResources.map((resource: any) => {\n                return (\n                  <div key={resource.slug}>\n                    <HorizontalResourceCard\n                      className=\"border my-4 border-opacity-10 border-gray-400 dark:border-gray-500\"\n                      resource={resource}\n                      location={course.path}\n                    />\n                  </div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  </>);\n}\n\nconst CourseProjectCard = ({courseProject}: {courseProject: any}) => {\n  return (<>\n    {courseProject && (\n      <div className=\"border-indigo-500 hover:border-indigo-700 dark:hover:border-indigo-400 rounded-md bg-indigo-100 dark:bg-indigo-900 border-opacity-20 p-4 my-8 border\">\n        {courseProject && (\n          <Link href={courseProject.url}>\n\n            {courseProject.label && (\n              <h2 className=\"text-xl font-semibold mb-4\">\n                ⚔️ {courseProject.label}\n              </h2>\n            )}\n            {courseProject.text && (\n              <Markdown className=\"prose dark:prose-dark w-full\">\n                {courseProject.text}\n              </Markdown>\n            )}\n\n          </Link>\n        )}\n      </div>\n    )}\n  </>);\n}\n\nconst CoursePodcast = ({\n  podcast: {transcript, simplecast_uid: id},\n  instructorName,\n}: any) => {\n  const [isOpen, setOpen] = React.useState(false)\n  const {theme} = useTheme()\n\n  if (isEmpty(id)) {\n    return null\n  } else {\n    return (\n      <div className=\"w-full pt-2 pb-3\">\n        <h3 className=\"font-semibold text-xl my-2\">\n          {`Listen to ${instructorName} tell you about this course:`}{' '}\n          {transcript && (\n            <span>\n              <button onClick={() => setOpen(!isOpen)}>\n                {isOpen ? 'Hide Transcript' : 'Show Transcript'}\n              </button>\n            </span>\n          )}\n        </h3>\n        <iframe\n          height=\"52px\"\n          width=\"100%\"\n          frameBorder=\"no\"\n          scrolling=\"no\"\n          title=\"Podcast Player\"\n          seamless\n          src={`https://player.simplecast.com/${id}?dark=${\n            theme === 'dark'\n          }&color=${theme === 'dark' && '111827'}`}\n        />\n        {isOpen && transcript && (\n          <Markdown className=\"bb b--black-10 pb3 lh-copy\">\n            {transcript}\n          </Markdown>\n        )}\n      </div>\n    )\n  }\n}\n\nconst Prereqs = ({prerequisites}: any) => {\n  return (\n    (<ul className=\"grid grid-cols-1 md:gap-x-5\">\n      {prerequisites?.map((prerequisite: any) =>\n        prerequisite.path ? (\n          <li\n            key={prerequisite.id}\n            className=\"text-gray-900 dark:text-gray-100 leading-6\"\n          >\n            <Link href={prerequisite.path}>\n              {prerequisite.title}\n            </Link>\n          </li>\n        ) : (\n          <li\n            key={prerequisite.id}\n            className=\"text-gray-900 dark:text-gray-100 leading-6\"\n          >\n            {prerequisite.title}\n          </li>\n        ),\n      )}\n    </ul>)\n  );\n}\n\nconst transformSanityEssentialQuestions = (essentialQuestions: any) => {\n  return essentialQuestions.map((question: any) => question.question)\n}\n\nconst transformSanityTopics = (topics: any) => {\n  return topics.items\n}\n\nexport default CollectionPageLayout\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/layouts/collection-page-layout.tsx","r":[0,44848],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport Markdown from 'react-markdown'\nimport toast from 'react-hot-toast'\nimport InstructorProfile from 'components/pages/courses/instructor-profile'\nimport PlayIcon from 'components/pages/courses/play-icon'\nimport getDependencies from 'data/courseDependencies'\nimport {get, first, filter, isEmpty, take, find} from 'lodash'\nimport {NextSeo} from 'next-seo'\nimport removeMarkdown from 'remove-markdown'\nimport {track} from 'utils/analytics'\nimport FolderDownloadIcon from '../icons/folder-download'\nimport RSSIcon from '../icons/rss'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport ClockIcon from '../icons/clock'\nimport CheckIcon from '../icons/check'\nimport {LessonResource} from 'types'\nimport BookmarkIcon from '../icons/bookmark'\nimport axios from 'utils/configured-axios'\nimport friendlyTime from 'friendly-time'\nimport LearnerRatings from '../pages/courses/learner-ratings'\nimport FiveStars from '../five-stars'\nimport CommunityResource from 'components/community-resource'\nimport {IconGithub} from 'components/pages/lessons/code-link'\nimport TagList from './tag-list'\nimport {useTheme} from 'next-themes'\nimport ClosedCaptionIcon from '../icons/closed-captioning'\nimport {HorizontalResourceCard} from '../card/horizontal-resource-card'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport DialogButton from '../pages/courses/dialog-button'\nimport MembershipDialogButton from '../pages/courses/membership-dialog-button'\n\nimport LoginForm from 'pages/login'\n\ntype CoursePageLayoutProps = {\n  lessons: any\n  course: any\n  ogImageUrl: string\n}\n\ntype CollectionResource = {\n  title: string\n  duration: number\n  instructor: {\n    full_name: string\n  }\n  square_cover_url: string\n  image_url: string\n  path: string\n  slug: string\n  description: string\n}\n\nconst logCollectionResource = (collection: CollectionResource) => {\n  if (typeof window !== 'undefined') {\n    const {\n      title,\n      duration,\n      instructor,\n      square_cover_url,\n      image_url,\n      path,\n      slug,\n      description,\n    } = collection\n    const image = square_cover_url || image_url\n    const formattedDuration = convertTimeWithTitles(duration)\n    const byline = `${\n      instructor?.full_name && `${instructor.full_name}・`\n    }${formattedDuration}・Course`\n\n    console.debug('collection resource', {\n      title,\n      byline,\n      ...(!!image && {image}),\n      path,\n      slug,\n      description,\n    })\n  }\n}\n\nconst Duration: React.FunctionComponent<{duration: string}> = ({duration}) => (\n  <div className=\"flex flex-row items-center\">\n    <ClockIcon className=\"w-4 h-4 mr-1 opacity-60\" />\n    <span>{duration}</span>{' '}\n    <ClosedCaptionIcon className=\"w-4 h-4 inline-block ml-2\" />\n  </div>\n)\n\nexport const UpdatedAt: React.FunctionComponent<{date: string}> = ({date}) => (\n  <div>Updated {date}</div>\n)\n\nexport const PublishedAt: React.FunctionComponent<{date: string}> = ({\n  date,\n}) => <div>Published {date}</div>\n\nconst StarsRating: React.FunctionComponent<{\n  rating: number\n}> = ({rating}) => (\n  <div className=\"flex items-center\">\n    <FiveStars rating={rating} />\n    <span className=\"ml-1 font-semibold leading-tight\">\n      {rating.toFixed(1)}\n    </span>\n  </div>\n)\n\nconst PeopleCompleted: React.FunctionComponent<{count: number}> = ({count}) => (\n  <div className=\"flex items-center flex-nowrap\">\n    <div className=\"font-semibold mr-1\">{count}</div>\n    <div className=\"whitespace-nowrap\">people completed</div>\n  </div>\n)\n\nconst CollectionPageLayout: React.FunctionComponent<CoursePageLayoutProps> = ({\n  lessons = [],\n  course,\n  ogImageUrl,\n}) => {\n  const courseDependencies: any = getDependencies(course.slug)\n  const [isFavorite, setIsFavorite] = React.useState(false)\n  const [clickable, setIsClickable] = React.useState(true)\n\n  const defaultPairWithResources: any[] = take(\n    [\n      {\n        title: 'Introduction to Cloudflare Workers',\n        byline: 'Kristian Freeman・36m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/418/892/thumb/EGH_IntroCloudFlareWorkers_Final.png',\n        path: '/playlists/introduction-to-cloudflare-workers-5aa3',\n        slug: 'introduction-to-cloudflare-workers-5aa3',\n        description:\n          \"Become familiar with the Workers CLI `wrangler` that we will use to bootstrap our Worker project. From there you'll understand how a Worker receives and returns requests/Responses. We will also build this serverless function locally for development and deploy it to a custom domain.\",\n      },\n      {\n        title: 'Create an eCommerce Store with Next.js and Stripe Checkout',\n        byline: 'Colby Fayock・1h 4m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/412/781/thumb/ecommerce-stripe-next.png',\n        path: '/playlists/create-an-ecommerce-store-with-next-js-and-stripe-checkout-562c',\n        slug: 'create-an-ecommerce-store-with-next-js-and-stripe-checkout-562c',\n        description: `This is a practical project based look at building a working e-commerce store\n        using modern tools and APIs. Excellent for a weekend side-project for your [developer project portfolio](https://joelhooks.com/developer-portfolio)`,\n      },\n      {\n        title: 'Practical Git for Everyday Professional Use',\n        byline: 'Trevor Miller・1h・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/050/thumb/egghead-practical-git-course.png',\n        path: '/courses/practical-git-for-everyday-professional-use',\n        slug: 'practical-git-for-everyday-professional-use',\n        description: `[git](/q/git) is a critical component in the modern web developers tool box. This course\n         is a solid introduction and goes beyond the basics with some more advanced git commands\n         you are sure to find useful.`,\n      },\n      {\n        title: 'Build an App with the AWS Cloud Development Kit',\n        byline: 'Tomasz Łakomy・1h 4m・Course',\n        image:\n          'https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/450/thumb/EGH_AWS-TS.png',\n        path: '/courses/build-an-app-with-the-aws-cloud-development-kit',\n        slug: 'build-an-app-with-the-aws-cloud-development-kit',\n        description:\n          \"Tomasz Łakomy will guide you through using TypeScript to complete the lifecycle of an application powered by AWS CDK. You'll see how to start a project, develop it locally, deploy it globally, then tear it all down when you're done. Excellent kick start for your next side project or your developer portfolio.\",\n      },\n    ].filter((resource) => {\n      return resource.slug !== course.slug\n    }),\n    3,\n  )\n\n  const {\n    topics,\n    illustrator,\n    dependencies,\n    pairWithResources = defaultPairWithResources,\n    courseProject,\n    quickFacts,\n    prerequisites,\n    essentialQuestions,\n    multiModuleCourse,\n    moduleResource,\n    moduleLabel,\n    multiModuleSlug,\n    multiModuletitle,\n    totalCourseModules,\n    multiModuleLineheight,\n  } = courseDependencies\n\n  const {\n    title,\n    image_thumb_url,\n    square_cover_480_url,\n    instructor,\n    average_rating_out_of_5,\n    watched_count,\n    description,\n    rss_url,\n    download_url,\n    toggle_favorite_url,\n    duration,\n    collection_progress,\n    favorited,\n    updated_at,\n    published_at,\n    created_at,\n    access_state,\n    customOgImage,\n    prerequisites: sanityPrerequisites,\n    topics: sanityTopics,\n    pairWithResources: sanityPairWithResources,\n    essentialQuestions: sanityEssentialQuestions,\n    illustrator: sanityIllustrator,\n    dependencies: sanityDependencies,\n    state,\n    path,\n    tags = [],\n  } = course\n\n  const ogImage = customOgImage ? customOgImage.url : ogImageUrl\n\n  const relatedResources = sanityPairWithResources\n    ? sanityPairWithResources\n    : pairWithResources\n  const courseEssentialQuestions = !isEmpty(sanityEssentialQuestions)\n    ? transformSanityEssentialQuestions(sanityEssentialQuestions)\n    : essentialQuestions\n  const courseTopics = !isEmpty(sanityTopics)\n    ? transformSanityTopics(sanityTopics)\n    : topics\n  const coursePrerequisites = !isEmpty(sanityPrerequisites)\n    ? sanityPrerequisites\n    : prerequisites\n  const courseIllustrator = !isEmpty(sanityIllustrator)\n    ? sanityIllustrator\n    : illustrator\n\n  const podcast = first(\n    course?.items?.filter((item: any) => item.type === 'podcast'),\n  )\n\n  logCollectionResource(course)\n\n  const courseTags = tags.map((tag: any) => {\n    const ogVersion = get(dependencies, tag.name)\n    const sanityTag = find(sanityDependencies, {name: tag.name})?.version\n\n    const version = !isEmpty(sanityTag) ? sanityTag : ogVersion\n\n    return {\n      ...tag,\n      ...(!!version && {version}),\n    }\n  })\n\n  React.useEffect(() => {\n    setIsFavorite(favorited)\n  }, [favorited])\n\n  const completedLessonSlugs = get(\n    collection_progress,\n    'completed_lessons',\n    [],\n  ).map((lesson: LessonResource) => lesson.slug)\n\n  const {\n    full_name: name,\n    avatar_url,\n    slug,\n    bio_short,\n    twitter,\n  } = instructor || {}\n\n  const image_url = square_cover_480_url || image_thumb_url\n\n  const imageIsTag = image_url.includes('tags/image')\n\n  const playlists = filter(course.items, {type: 'playlist'}) || []\n\n  const playlistLessons = playlists.reduce((acc, playlist) => {\n    const lessons = playlist?.lessons ?? []\n    return [...acc, ...lessons]\n  }, [])\n\n  // this is a pretty sloppy approach to fetching the next lesson\n  // via playlist lessons, but those are for nested playlists in\n  // playlists\n  const nextLesson: any = isEmpty(playlistLessons)\n    ? first(\n        lessons.filter(\n          (lesson: LessonResource) =>\n            !completedLessonSlugs.includes(lesson.slug),\n        ),\n      )\n    : first(\n        playlistLessons.filter(\n          (lesson: LessonResource) =>\n            !completedLessonSlugs.includes(lesson.slug),\n        ),\n      )\n\n  const PlayButton: React.FunctionComponent<{lesson: LessonResource}> = ({\n    lesson,\n  }) => {\n    const isContinuing =\n      lesson && lesson !== first(lessons) && lesson !== first(playlistLessons)\n    return lesson ? (\n      <Link href={lesson.path}>\n        <a\n          onClick={() => {\n            track(\n              `clicked ${isContinuing ? 'continue' : 'start'} watching course`,\n              {\n                course: course.slug,\n              },\n            )\n          }}\n          className=\"inline-flex justify-center items-center px-6 py-4 font-semibold rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\"\n        >\n          <PlayIcon className=\"text-blue-100 mr-2\" />\n          {isContinuing ? 'Continue' : 'Start'} Watching\n        </a>\n      </Link>\n    ) : null\n  }\n\n  const CourseArtwork: React.FunctionComponent<{\n    path: string\n    size: number\n    trackText: string\n  }> = ({path, size, trackText}) => {\n    return path ? (\n      <Link href={path}>\n        <a\n          onClick={() =>\n            track(trackText, {\n              course: course.slug,\n            })\n          }\n        >\n          <Image\n            src={image_url}\n            alt={`illustration for ${title}`}\n            height={size}\n            width={size}\n            quality={100}\n          />\n        </a>\n      </Link>\n    ) : (\n      <Image\n        src={image_url}\n        alt={`illustration for ${title}`}\n        height={size}\n        width={size}\n        quality={100}\n      />\n    )\n  }\n\n  const EpicReactBanner = ({\n    image = 'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1626109728/epic-react/default-banners/banner-course-page_2x.jpg',\n    width = 1416,\n    height = 508,\n  }) => {\n    return get(course, 'owner.id') === 15369 ? (\n      <ExternalTrackedLink\n        eventName=\"clicked epic react banner\"\n        params={{location: course.path}}\n        href=\"https://epicreact.dev\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        className=\"block\"\n      >\n        <div className=\"overflow-hidden flex items-center justify-center rounded-lg\">\n          <Image\n            src={image}\n            alt=\"Get Really Good at React on EpicReact.dev by Kent C. Dodds\"\n            width={width}\n            height={height}\n            quality={100}\n            className=\"hover:scale-[102%] ease-in-out duration-500\"\n          />\n        </div>\n      </ExternalTrackedLink>\n    ) : null\n  }\n\n  const trackEmailCapture = (email: string) => {\n    track('submitted email - disabled bookmark button', {\n      course: course.slug,\n      email,\n    })\n  }\n\n  return (\n    <>\n      <NextSeo\n        description={removeMarkdown(description)}\n        canonical={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`}\n        title={title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          handle: instructor?.twitter ?? `@eggheadio`,\n          site: `@eggheadio`,\n          cardType: 'summary_large_image',\n        }}\n        openGraph={{\n          title,\n          url: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`,\n          description: removeMarkdown(description),\n          site_name: 'egghead',\n          images: [\n            {\n              url: ogImage,\n            },\n          ],\n        }}\n      />\n      <div className=\"max-w-screen-xl mx-auto sm:pb-16 pb-8 dark:text-gray-100\">\n        {state === 'retired' && (\n          <div className=\"w-full text-lg bg-orange-100 text-orange-800 p-3 rounded-md border border-orange-900 border-opacity-20\">\n            ⚠️ This course has been retired and might contain outdated\n            information.\n          </div>\n        )}\n        <div className=\"mt-10 grid md:grid-cols-5 grid-cols-1 md:gap-16 gap-5 rounded-md w-full left-0 mb-4\">\n          <div className=\"md:col-span-3 md:row-start-auto flex flex-col h-full max-w-screen-2xl w-full mx-auto\">\n            <header>\n              {image_url && (\n                <div className=\"md:hidden flex items-center justify-center\">\n                  <CourseArtwork\n                    path={nextLesson.path}\n                    trackText=\"clicked course image on mobile\"\n                    size={imageIsTag ? 100 : 200}\n                  />\n                </div>\n              )}\n              {access_state && (\n                <div\n                  className={`${\n                    access_state === 'free' ? 'bg-orange-500' : 'bg-blue-500'\n                  } text-white w-12 items-center text-center py-1 rounded-full uppercase font-bold my-2 text-xs mx-auto md:m-0 md:mb-2`}\n                >\n                  {access_state}\n                </div>\n              )}\n              {moduleResource && (\n                <div className=\"text-base leading-loose text-center mt-4 -mb-4 md:mb-0 md:mt-0 md:text-left\">\n                  <Link href={multiModuleSlug}>\n                    <a>\n                      <span className=\"text-gray-700 dark:text-gray-400 hover:underline\">\n                        {multiModuletitle && multiModuletitle}\n                      </span>\n                    </a>\n                  </Link>\n                  {' • '}\n                  <span className=\"font-semibold\">Part {moduleLabel}</span>\n                </div>\n              )}\n              <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold leading-tight md:leading-tighter md:text-left text-center mt-4 md:mt-0\">\n                {title}\n              </h1>\n\n              {/* Start of metadata block */}\n              <div className=\"flex flex-col my-6 items-center md:items-start space-y-2\">\n                {instructor && (\n                  <InstructorProfile\n                    name={name}\n                    avatar_url={avatar_url}\n                    url={slug}\n                    bio_short={bio_short}\n                    twitter={twitter}\n                  />\n                )}\n\n                <div className=\"pt-2 flex items-center flex-col md:flex-row flex-wrap\">\n                  <TagList tags={courseTags} courseSlug={course.slug} />\n                  <div className=\"flex items-center md:justify-start justify-center md:mr-4\">\n                    {duration && (\n                      <div className=\"mr-4 mt-2 md:mt-0\">\n                        <Duration duration={convertTimeWithTitles(duration)} />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col md:flex-row items-center md:justify-start justify-center space-y-4 md:space-y-0 md:space-x-6 w-full\">\n                  <div className=\"flex flex-col sm:flex-row items-center space-y-3 sm:space-y-0 sm:space-x-4 sm:flex-nowrap\">\n                    {average_rating_out_of_5 > 0 && (\n                      <StarsRating rating={average_rating_out_of_5} />\n                    )}\n                    {watched_count > 0 && (\n                      <PeopleCompleted count={watched_count} />\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"opacity-80 text-sm flex flex-row space-x-3 md:items-start\">\n                  {created_at && (\n                    <PublishedAt date={friendlyTime(new Date(created_at))} />\n                  )}{' '}\n                  <span className=\"text-gray-400\">|</span>\n                  {updated_at && (\n                    <UpdatedAt date={friendlyTime(new Date(updated_at))} />\n                  )}\n                </div>\n              </div>\n              {/* End of metadata block */}\n\n              {/* Start of action buttons block */}\n              <div className=\"dark:text-gray-900 flex items-center md:justify-start justify-center mt-4 space-x-2\">\n                {/* Bookmark button */}\n                {toggle_favorite_url ? (\n                  <button\n                    onClick={() => {\n                      if (clickable) {\n                        setIsClickable(false)\n                        track(\n                          `clicked ${isFavorite ? 'remove' : 'add'} bookmark`,\n                          {\n                            course: course.slug,\n                          },\n                        )\n                        setTimeout(() => {\n                          setIsClickable(true)\n                        }, 1000)\n                        axios.post(toggle_favorite_url).then((resp) => {\n                          setIsFavorite(!isFavorite)\n                          toast(\n                            `Course ${\n                              isFavorite ? 'removed from' : 'added to'\n                            } Bookmarks`,\n                            {duration: 1000},\n                          )\n                        })\n                      }\n                    }}\n                  >\n                    <div\n                      className={\n                        ' flex flex-row items-center rounded  px-4 py-2 border transition-all text-sm xs:text-base ease-in-out duration-150 shadow-sm ' +\n                        (isFavorite\n                          ? 'hover:bg-blue-500 bg-blue-600 border-blue-700 text-white'\n                          : 'bg-white text-gray-600 hover:bg-gray-200 dark:text-gray-300 dark:hover:bg-gray-700 border-gray-300  dark:bg-gray-800 dark:border-gray-600')\n                      }\n                    >\n                      <BookmarkIcon\n                        className=\"w-4 h-4 mr-2\"\n                        fill={isFavorite}\n                      />{' '}\n                      {isFavorite ? 'Bookmarked' : 'Bookmark'}\n                    </div>\n                  </button>\n                ) : (\n                  <DialogButton\n                    buttonText=\"Bookmark\"\n                    title=\"Sign in or create a free account to bookmark\"\n                    buttonStyles=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-100 \n                      dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out opacity-90 shadow-sm\"\n                  >\n                    <LoginForm\n                      image={<></>}\n                      className=\"w-full mx-auto flex flex-col items-center justify-center\"\n                      label=\"Email address\"\n                      formClassName=\"max-w-xs md:max-w-sm mx-auto w-full\"\n                      button=\"Sign In or Create an Account\"\n                      track={trackEmailCapture}\n                    >\n                      <p className=\"max-w-10 text-center text-gray-700 dark:text-gray-400 px-3\">\n                        You need to be signed in to bookmark courses. Sign in or\n                        create a free account to save this course.\n                      </p>\n                    </LoginForm>\n                  </DialogButton>\n                )}\n\n                {/* Download button */}\n                {download_url ? (\n                  <Link href={download_url}>\n                    <a\n                      onClick={() => {\n                        track(`clicked download course`, {\n                          course: course.slug,\n                        })\n                      }}\n                    >\n                      <div\n                        className=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-200 \n                      dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out shadow-sm\"\n                      >\n                        <FolderDownloadIcon className=\"w-4 h-4 mr-1\" /> Download\n                      </div>\n                    </a>\n                  </Link>\n                ) : (\n                  <MembershipDialogButton\n                    buttonText=\"Download\"\n                    title=\"Become a member to download this course\"\n                  >\n                    As an egghead member you can download any of our courses and\n                    watch them offline.\n                  </MembershipDialogButton>\n                )}\n\n                {/* RSS button */}\n                {rss_url ? (\n                  <Link href={rss_url}>\n                    <a\n                      onClick={() => {\n                        track(`clicked rss feed link`, {\n                          course: course.slug,\n                        })\n                      }}\n                    >\n                      <div\n                        className=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-200 \n                      dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out shadow-sm\"\n                      >\n                        <RSSIcon className=\"w-4 h-4 mr-1\" /> RSS\n                      </div>\n                    </a>\n                  </Link>\n                ) : (\n                  <a\n                    onClick={() => {\n                      track(`clicked disabled rss feed link`, {\n                        course: course.slug,\n                      })\n                    }}\n                  >\n                    <MembershipDialogButton\n                      buttonText=\"RSS\"\n                      title=\"Become a member to access RSS feeds\"\n                    >\n                      As an egghead member you can subscribe to any of our\n                      courses using an RSS feed.\n                    </MembershipDialogButton>\n                  </a>\n                )}\n              </div>\n              {/* End of action buttons block */}\n\n              <div className=\"md:hidden flex items-center justify-center w-full mt-5\">\n                <PlayButton lesson={nextLesson} />\n              </div>\n              <Markdown className=\"prose dark:prose-dark md:prose-lg md:dark:prose-lg-dark text-gray-900 dark:text-gray-100 mt-14 mb-6\">\n                {description}\n              </Markdown>\n              <div className=\"pt-5 md:hidden block\">\n                <CourseProjectCard courseProject={courseProject} />\n\n                {get(course, 'access_state') === 'free' && (\n                  <div className=\"p-4 my-8 border border-gray-100 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800\">\n                    <CommunityResource type=\"course\" />\n                  </div>\n                )}\n              </div>\n              {!isEmpty(podcast) && (\n                <CoursePodcast podcast={podcast} instructorName={name} />\n              )}\n\n              {courseTopics && (\n                <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                  <h2 className=\"text-lg font-semibold mb-3\">\n                    What you'll learn:\n                  </h2>\n                  <div className=\"prose dark:prose-dark\">\n                    <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                      {courseTopics?.map((topic: string) => (\n                        <li\n                          key={topic}\n                          className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                        >\n                          {topic}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              )}\n              {coursePrerequisites && (\n                <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                  <h2 className=\"text-lg font-semibold mb-3\">Prerequisites:</h2>\n                  <div className=\"prose dark:prose-dark\">\n                    <Prereqs prerequisites={coursePrerequisites} />\n                  </div>\n                </div>\n              )}\n              {quickFacts && (\n                <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                  <h2 className=\"text-lg font-semibold mb-3\">Quick Facts:</h2>\n                  <div className=\"prose dark:prose-dark\">\n                    <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                      {quickFacts?.map((quickFact: string) => (\n                        <li\n                          key={quickFact}\n                          className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                        >\n                          {quickFact}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              )}\n              {courseEssentialQuestions && (\n                <div className=\"mt-8 border border-gray-100 dark:border-gray-700 rounded-md p-5\">\n                  <h2 className=\"text-lg font-semibold mb-3\">\n                    Questions to Think About:\n                  </h2>\n                  <div className=\"prose dark:prose-dark\">\n                    <ul className=\"grid grid-cols-1 md:gap-x-5\">\n                      {courseEssentialQuestions?.map(\n                        (essentialQuestion: string) => (\n                          <li\n                            key={essentialQuestion}\n                            className=\"text-gray-900 dark:text-gray-100 leading-6\"\n                          >\n                            {essentialQuestion}\n                          </li>\n                        ),\n                      )}\n                    </ul>\n                  </div>\n                </div>\n              )}\n              <LearnerRatings collection={course} />\n              {!isEmpty(relatedResources) && (\n                <div className=\"my-12 md:flex hidden flex-col space-y-2\">\n                  <h2 className=\"text-lg font-semibold mb-3\">\n                    You might also like these resources:\n                  </h2>\n                  <EpicReactBanner />\n                  {relatedResources.map((resource: any) => {\n                    return (\n                      <div key={resource.slug}>\n                        <HorizontalResourceCard\n                          className=\"border my-4 border-opacity-10 border-gray-400 dark:border-gray-700\"\n                          resource={resource}\n                          location={course.path}\n                        />\n                      </div>\n                    )\n                  })}\n                </div>\n              )}\n            </header>\n          </div>\n          <div className=\"md:col-span-2 flex flex-col items-center justify-start md:mb-0 mb-4\">\n            {image_url && (\n              <div className=\"md:block hidden\">\n                <CourseArtwork\n                  path={nextLesson.path}\n                  size={imageIsTag ? 200 : 420}\n                  trackText=\"clicked course image\"\n                />\n              </div>\n            )}\n            {courseIllustrator && (\n              <div className=\"md:block hidden text-sm opacity-80 text-center\">\n                <h4 className=\"font-semibold\">Credits</h4>\n                <span>{courseIllustrator?.name}</span>\n              </div>\n            )}\n            <div className=\"md:block hidden space-y-6\">\n              <div className=\"w-full flex justify-center mt-10 mb-4\">\n                <PlayButton lesson={nextLesson} />\n              </div>\n\n              <CourseProjectCard courseProject={courseProject} />\n\n              {get(course, 'access_state') === 'free' && (\n                <div className=\"p-4 my-8 border border-gray-100 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800\">\n                  <CommunityResource type=\"course\" />\n                </div>\n              )}\n            </div>\n            <section className=\"mt-8\">\n              <div className=\"mb-2 flex flex-col space-y-4 \">\n                {moduleResource && (\n                  <div className=\"border border-gray-100 dark:text-gray-400 rounded-md bg-gray-50 dark:border-gray-800 dark:bg-gray-800 p-4 my-4\">\n                    Part{' '}\n                    {moduleLabel && (\n                      <span className=\"font-semibold dark:text-gray-100\">\n                        {moduleLabel}\n                      </span>\n                    )}{' '}\n                    of {totalCourseModules && totalCourseModules} in the{' '}\n                    <Link href={multiModuleSlug}>\n                      <a>\n                        <span className=\"font-semibold hover:underline dark:text-gray-100\">\n                          {multiModuletitle && multiModuletitle}\n                        </span>\n                      </a>\n                    </Link>\n                  </div>\n                )}\n                <h2 className=\"text-xl font-bold\">\n                  {multiModuleCourse ? 'Modules' : 'Course Content'}\n                </h2>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 font-normal\">\n                  {duration && `${convertTimeWithTitles(duration)} • `}\n                  {lessons.length + playlistLessons.length} lessons{' '}\n                  {multiModuleCourse && '• 4 Modules'}{' '}\n                </div>\n              </div>\n              {multiModuleCourse ? (\n                <ul className=\"relative\">\n                  <div\n                    className=\"bg-gray-200 dark:bg-gray-700 absolute left-[79px] w-[1px] top-[8%] z-0\"\n                    // @ts-ignore\n                    css={{\n                      height: multiModuleLineheight,\n                    }}\n                  ></div>\n                  {playlists.map((course: any) => {\n                    return (\n                      <ul key={course.slug}>\n                        <div className=\"py-10 max-w-max-content flex space-x-10 items-center\">\n                          <Link href={course.path}>\n                            <a>\n                              <div className=\"flex-shrink-0 flex\">\n                                <Image\n                                  src={course.square_cover_url}\n                                  width={160}\n                                  height={160}\n                                  layout=\"fixed\"\n                                  quality={100}\n                                />\n                              </div>\n                            </a>\n                          </Link>\n                          <div className=\"flex flex-col\">\n                            <Link href={course.path}>\n                              <a>\n                                <h2 className=\"text-lg font-semibold leading-tight\">\n                                  {course.title}\n                                </h2>\n                              </a>\n                            </Link>\n                            <div className=\"text-xs text-gray-700 dark:text-gray-500 font-semibold mt-1\">\n                              {course.duration &&\n                                `${convertTimeWithTitles(course.duration)} • `}\n                              {course.lessons.length} lessons\n                            </div>\n                          </div>\n                        </div>\n                      </ul>\n                    )\n                  })}\n                </ul>\n              ) : (\n                <div>\n                  <ul>\n                    {playlists.map((playlist: any) => {\n                      return (\n                        <li key={playlist.slug}>\n                          <div className=\"font-semibold flex items-center leading-tight py-2\">\n                            {playlist.path && (\n                              <Link href={playlist.path}>\n                                <a\n                                  onClick={() => {\n                                    track(\n                                      `clicked collection link on course page`,\n                                      {\n                                        course: course.slug,\n                                        collection: playlist.slug,\n                                      },\n                                    )\n                                  }}\n                                  className=\"hover:underline font-semibold flex items-center w-full\"\n                                >\n                                  <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-900 dark:text-gray-100 mt-0\">\n                                    {playlist.title}\n                                  </Markdown>\n                                </a>\n                              </Link>\n                            )}\n                          </div>\n                          <div>\n                            <ul className=\"ml-8\">\n                              {playlist?.lessons?.map(\n                                (lesson: LessonResource, index: number) => {\n                                  const isComplete =\n                                    completedLessonSlugs.includes(lesson.slug)\n                                  return (\n                                    <li\n                                      key={`${playlist.slug}::${lesson.slug}`}\n                                    >\n                                      <div className=\"flex items-center leading-tight py-2\">\n                                        <div className=\"flex items-center mr-2 flex-grow\">\n                                          <small className=\"text-gray-500 dark:text-gray-600 pt-px font-xs scale-75 font-normal w-4\">\n                                            {isComplete ? `✔️` : index + 1}\n                                          </small>\n                                          <PlayIcon className=\"text-gray-500 dark:text-gray-100 mx-1\" />\n                                        </div>\n                                        {lesson.path && (\n                                          <Link href={lesson.path}>\n                                            <a\n                                              onClick={() => {\n                                                track(\n                                                  `clicked collection video link on course page`,\n                                                  {\n                                                    course: course.slug,\n                                                    video: lesson.slug,\n                                                    collection: playlist.slug,\n                                                  },\n                                                )\n                                              }}\n                                              className=\"hover:underline flex items-center w-full\"\n                                            >\n                                              <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-700 dark:text-gray-100 mt-0\">\n                                                {lesson.title}\n                                              </Markdown>\n                                            </a>\n                                          </Link>\n                                        )}\n                                      </div>\n                                    </li>\n                                  )\n                                },\n                              )}\n                            </ul>\n                          </div>\n                        </li>\n                      )\n                    })}\n                  </ul>\n                </div>\n              )}\n\n              <div>\n                <ul>\n                  {lessons.map((lesson: LessonResource, index: number) => {\n                    const isComplete = completedLessonSlugs.includes(\n                      lesson.slug,\n                    )\n                    return (\n                      <li key={lesson.slug}>\n                        <div className=\"font-semibold flex  leading-tight py-2\">\n                          <div className=\"flex items-center mr-2 space-x-2\">\n                            <div\n                              className={`${\n                                isComplete\n                                  ? 'text-blue-600 dark:text-green-400'\n                                  : 'text-gray-500 dark:text-gray-400'\n                              } pt-px font-xs scale-75 font-normal w-4`}\n                            >\n                              {isComplete ? (\n                                <CheckIcon className=\"w-6 h-6 -translate-x-2\" />\n                              ) : (\n                                index + 1\n                              )}\n                            </div>\n                            {lesson.icon_url && (\n                              <div className=\"flex flex-shrink-0 w-8 items-center\">\n                                <Image\n                                  src={lesson.icon_url}\n                                  width={24}\n                                  height={24}\n                                />\n                              </div>\n                            )}\n                          </div>\n                          {lesson.path && (\n                            <div className=\"flex flex-col \">\n                              <div>\n                                <Link href={lesson.path}>\n                                  <a\n                                    onClick={() => {\n                                      track(\n                                        `clicked video link on course page`,\n                                        {\n                                          course: course.slug,\n                                          video: lesson.slug,\n                                        },\n                                      )\n                                    }}\n                                    className=\"text-lg hover:underline hover:text-blue-600 font-semibold dark:text-gray-100\"\n                                  >\n                                    {lesson.title}\n                                  </a>\n                                </Link>\n                              </div>\n                              <div className=\"text-xs text-gray-700 dark:text-gray-500\">\n                                {convertTimeWithTitles(lesson.duration, {\n                                  showSeconds: true,\n                                })}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n            </section>\n            {!isEmpty(pairWithResources) && (\n              <div className=\"my-12 flex md:hidden flex-col space-y-2\">\n                <h2 className=\"text-lg font-semibold mb-3\">\n                  You might also like these resources:\n                </h2>\n                <EpicReactBanner\n                  // 25% off\n                  // image=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1625226676/epic-react/summer-sale-2021/banner-react-page_2x.jpg\"\n                  // default\n                  image=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1626109728/epic-react/default-banners/banner-react-page_2x.jpg\"\n                  width={916 / 2}\n                  height={1024 / 2}\n                />\n                {pairWithResources.map((resource: any) => {\n                  return (\n                    <div key={resource.slug}>\n                      <HorizontalResourceCard\n                        className=\"border my-4 border-opacity-10 border-gray-400 dark:border-gray-500\"\n                        resource={resource}\n                        location={course.path}\n                      />\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst CourseProjectCard = ({courseProject}: {courseProject: any}) => {\n  return (\n    <>\n      {courseProject && (\n        <div className=\"border-indigo-500 hover:border-indigo-700 dark:hover:border-indigo-400 rounded-md bg-indigo-100 dark:bg-indigo-900 border-opacity-20 p-4 my-8 border\">\n          {courseProject && (\n            <Link href={courseProject.url}>\n              <a>\n                {courseProject.label && (\n                  <h2 className=\"text-xl font-semibold mb-4\">\n                    ⚔️ {courseProject.label}\n                  </h2>\n                )}\n                {courseProject.text && (\n                  <Markdown className=\"prose dark:prose-dark w-full\">\n                    {courseProject.text}\n                  </Markdown>\n                )}\n              </a>\n            </Link>\n          )}\n        </div>\n      )}\n    </>\n  )\n}\n\nconst CoursePodcast = ({\n  podcast: {transcript, simplecast_uid: id},\n  instructorName,\n}: any) => {\n  const [isOpen, setOpen] = React.useState(false)\n  const {theme} = useTheme()\n\n  if (isEmpty(id)) {\n    return null\n  } else {\n    return (\n      <div className=\"w-full pt-2 pb-3\">\n        <h3 className=\"font-semibold text-xl my-2\">\n          {`Listen to ${instructorName} tell you about this course:`}{' '}\n          {transcript && (\n            <span>\n              <button onClick={() => setOpen(!isOpen)}>\n                {isOpen ? 'Hide Transcript' : 'Show Transcript'}\n              </button>\n            </span>\n          )}\n        </h3>\n        <iframe\n          height=\"52px\"\n          width=\"100%\"\n          frameBorder=\"no\"\n          scrolling=\"no\"\n          title=\"Podcast Player\"\n          seamless\n          src={`https://player.simplecast.com/${id}?dark=${\n            theme === 'dark'\n          }&color=${theme === 'dark' && '111827'}`}\n        />\n        {isOpen && transcript && (\n          <Markdown className=\"bb b--black-10 pb3 lh-copy\">\n            {transcript}\n          </Markdown>\n        )}\n      </div>\n    )\n  }\n}\n\nconst Prereqs = ({prerequisites}: any) => {\n  return (\n    <ul className=\"grid grid-cols-1 md:gap-x-5\">\n      {prerequisites?.map((prerequisite: any) =>\n        prerequisite.path ? (\n          <li\n            key={prerequisite.id}\n            className=\"text-gray-900 dark:text-gray-100 leading-6\"\n          >\n            <Link href={prerequisite.path}>\n              <a>{prerequisite.title}</a>\n            </Link>\n          </li>\n        ) : (\n          <li\n            key={prerequisite.id}\n            className=\"text-gray-900 dark:text-gray-100 leading-6\"\n          >\n            {prerequisite.title}\n          </li>\n        ),\n      )}\n    </ul>\n  )\n}\n\nconst transformSanityEssentialQuestions = (essentialQuestions: any) => {\n  return essentialQuestions.map((question: any) => question.question)\n}\n\nconst transformSanityTopics = (topics: any) => {\n  return topics.items\n}\n\nexport default CollectionPageLayout\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/layouts/tag-list.tsx","r":[0,1608],"t":"import {FunctionComponent} from 'react'\nimport {isEmpty} from 'lodash'\nimport Link from 'next/link'\nimport {track} from '../../utils/analytics'\nimport Image from 'next/image'\nimport * as React from 'react'\n\nconst TagList: FunctionComponent<{\n  tags: any\n  courseSlug: string\n  className?: string\n}> = ({\n  tags,\n  courseSlug,\n  className = 'flex justify-center md:justify-start flex-wrap items-center',\n}) => {\n  return (<>\n    {!isEmpty(tags) && (\n      <ul className={className}>\n        {tags.map((tag: any, index: number) => (\n          <li key={index} className=\"inline-flex items-center mr-4 mt-0\">\n            <Link\n              href={`/q/${tag.name}`}\n              onClick={() => {\n                track(`clicked view topic`, {\n                  course: courseSlug,\n                  topic: tag.name,\n                })\n              }}\n              className=\"inline-flex items-center hover:underline\">\n\n              <Image\n                src={tag.image_url}\n                alt={tag.name}\n                width={18}\n                height={18}\n                className=\"flex-shrink-0\"\n                quality={100}\n              />\n              <span className=\"ml-1\">{tag.label}</span>\n\n            </Link>\n            {tag.version && (\n              <div className=\"ml-2 opacity-70\">\n                <code>{tag.version}</code>\n              </div>\n            )}\n          </li>\n        ))}\n      </ul>\n    )}\n  </>);\n}\n\nexport default TagList\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/mdx/code-block.tsx","r":[0,4140],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport {Children, ReactNode, ReactElement} from 'react'\nimport {paramsFromMetastring} from 'utils/code'\nimport useClipboard from 'react-use-clipboard'\nimport SimpleBar from 'simplebar-react'\n\ntype CodeBlockProps = {\n  language: string\n  metastring: string\n}\n\nconst CodeBlock: FunctionComponent<CodeBlockProps> = ({\n  language,\n  metastring,\n  children,\n}) => {\n  const {numbered, linesHighlighted, labeled, filePath} = paramsFromMetastring(\n    metastring,\n  )\n\n  // extract code from nodes ?\n  let code = ''\n\n  // create arrays of arrays wit only spans inside\n  const linesArr: ReactNode[][] = [[]]\n\n  Children.forEach(children, (child) => {\n    const index = linesArr.length - 1\n\n    if (typeof child === 'string') {\n      if (language === '') {\n        linesArr.push([child])\n      } else {\n        linesArr.push([])\n      }\n      // add to code\n      code += child\n    } else {\n      if (linesArr[index]) {\n        linesArr[index].push(child)\n      }\n\n      // add content to code\n      if (child && typeof child === 'object') {\n        code += (child as ReactElement).props.children\n      }\n    }\n  })\n\n  // transform lines into divs > [span]\n  const linesNodes = []\n  for (let i = 0; i < linesArr.length; i++) {\n    const lineIndex = i + 1\n    const childs = numbered\n      ? [\n          <Number key={`line-number-${lineIndex}`}>{lineIndex}</Number>,\n          linesArr[i],\n        ]\n      : linesArr[i]\n\n    linesNodes.push(\n      <Line\n        key={`line-${lineIndex}`}\n        highlight={linesHighlighted.indexOf(lineIndex) > -1}\n      >\n        {childs}\n      </Line>,\n    )\n  }\n\n  return (\n    <div className=\"relative bg-gray-800 sm:mx-0 -mx-5 sm:rounded-md rounded-none mb-5 overflow-hidden\">\n      {labeled && (\n        <>\n          <div className=\"sm:pb-3 pb-0 px-5 pt-5 text-white text-xs font-bold select-none pointer-events-none\">\n            {language.replace('language-', '')}\n            <span className=\"ml-2 font-light\">{filePath}</span>\n          </div>\n          <CopyToClipboard code={code} />\n        </>\n      )}\n      <div>\n        <pre\n          className=\"sm:mx-0 -mx-5 sm:px-0 px-5 py-0\"\n          css={{\n            fontSize: '85% !important',\n            lineHeight: '1.75 !important',\n            borderRadius: '0 !important',\n            margin: '0 !important',\n            padding: '0 !important',\n            '@media only screen and (max-width: 640px)': {\n              padding: '0 !important',\n            },\n          }}\n        >\n          <code>\n            <SimpleBar autoHide={false} style={{padding: 20}}>\n              {linesNodes}\n            </SimpleBar>\n          </code>\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeBlock\n\nconst Line: FunctionComponent<{highlight?: boolean}> = ({\n  highlight,\n  children,\n}) => <div className={highlight ? 'bg-gray-700' : ''}>{children}</div>\n\nconst Number: FunctionComponent = ({children}) => (\n  <span className=\"line-number opacity-50 text-xs w-7 inline-block select-none pointer-events-none\">\n    {children}\n  </span>\n)\n\nconst CopyToClipboard: FunctionComponent<{code: string}> = ({code}) => {\n  const [isCopied, setCopied] = useClipboard(code, {successDuration: 1000})\n  return (\n    (<button\n      onClick={setCopied}\n      aria-label=\"Copy code to clipboard\"\n      className=\"p-2 absolute top-4 right-3 text-gray-400 hover:text-white transition-all duration-100 ease-in-out\"\n    >\n      {isCopied ? (\n        //   prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g fill=\"none\"><path d=\"M5 13l4 4L19 7\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>)\n      ) : (\n        // prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"2\" fill=\"none\" stroke=\"currentColor\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></g></svg>)\n      )}\n    </button>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/mdx/code-block.tsx","r":[0,4140],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport {Children, ReactNode, ReactElement} from 'react'\nimport {paramsFromMetastring} from 'utils/code'\nimport useClipboard from 'react-use-clipboard'\nimport SimpleBar from 'simplebar-react'\n\ntype CodeBlockProps = {\n  language: string\n  metastring: string\n}\n\nconst CodeBlock: FunctionComponent<CodeBlockProps> = ({\n  language,\n  metastring,\n  children,\n}) => {\n  const {numbered, linesHighlighted, labeled, filePath} = paramsFromMetastring(\n    metastring,\n  )\n\n  // extract code from nodes ?\n  let code = ''\n\n  // create arrays of arrays wit only spans inside\n  const linesArr: ReactNode[][] = [[]]\n\n  Children.forEach(children, (child) => {\n    const index = linesArr.length - 1\n\n    if (typeof child === 'string') {\n      if (language === '') {\n        linesArr.push([child])\n      } else {\n        linesArr.push([])\n      }\n      // add to code\n      code += child\n    } else {\n      if (linesArr[index]) {\n        linesArr[index].push(child)\n      }\n\n      // add content to code\n      if (child && typeof child === 'object') {\n        code += (child as ReactElement).props.children\n      }\n    }\n  })\n\n  // transform lines into divs > [span]\n  const linesNodes = []\n  for (let i = 0; i < linesArr.length; i++) {\n    const lineIndex = i + 1\n    const childs = numbered\n      ? [\n          <Number key={`line-number-${lineIndex}`}>{lineIndex}</Number>,\n          linesArr[i],\n        ]\n      : linesArr[i]\n\n    linesNodes.push(\n      <Line\n        key={`line-${lineIndex}`}\n        highlight={linesHighlighted.indexOf(lineIndex) > -1}\n      >\n        {childs}\n      </Line>,\n    )\n  }\n\n  return (\n    <div className=\"relative bg-gray-800 sm:mx-0 -mx-5 sm:rounded-md rounded-none mb-5 overflow-hidden\">\n      {labeled && (\n        <>\n          <div className=\"sm:pb-3 pb-0 px-5 pt-5 text-white text-xs font-bold select-none pointer-events-none\">\n            {language.replace('language-', '')}\n            <span className=\"ml-2 font-light\">{filePath}</span>\n          </div>\n          <CopyToClipboard code={code} />\n        </>\n      )}\n      <div>\n        <pre\n          className=\"sm:mx-0 -mx-5 sm:px-0 px-5 py-0\"\n          css={{\n            fontSize: '85% !important',\n            lineHeight: '1.75 !important',\n            borderRadius: '0 !important',\n            margin: '0 !important',\n            padding: '0 !important',\n            '@media only screen and (max-width: 640px)': {\n              padding: '0 !important',\n            },\n          }}\n        >\n          <code>\n            <SimpleBar autoHide={false} style={{padding: 20}}>\n              {linesNodes}\n            </SimpleBar>\n          </code>\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeBlock\n\nconst Line: FunctionComponent<{highlight?: boolean}> = ({\n  highlight,\n  children,\n}) => <div className={highlight ? 'bg-gray-700' : ''}>{children}</div>\n\nconst Number: FunctionComponent = ({children}) => (\n  <span className=\"line-number opacity-50 text-xs w-7 inline-block select-none pointer-events-none\">\n    {children}\n  </span>\n)\n\nconst CopyToClipboard: FunctionComponent<{code: string}> = ({code}) => {\n  const [isCopied, setCopied] = useClipboard(code, {successDuration: 1000})\n  return (\n    (<button\n      onClick={setCopied}\n      aria-label=\"Copy code to clipboard\"\n      className=\"p-2 absolute top-4 right-3 text-gray-400 hover:text-white transition-all duration-100 ease-in-out\"\n    >\n      {isCopied ? (\n        //   prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g fill=\"none\"><path d=\"M5 13l4 4L19 7\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>)\n      ) : (\n        // prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"2\" fill=\"none\" stroke=\"currentColor\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></g></svg>)\n      )}\n    </button>)\n  );\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/mdx/code-block.tsx","r":[0,4140],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport {Children, ReactNode, ReactElement} from 'react'\nimport {paramsFromMetastring} from 'utils/code'\nimport useClipboard from 'react-use-clipboard'\nimport SimpleBar from 'simplebar-react'\n\ntype CodeBlockProps = {\n  language: string\n  metastring: string\n}\n\nconst CodeBlock: FunctionComponent<CodeBlockProps> = ({\n  language,\n  metastring,\n  children,\n}) => {\n  const {numbered, linesHighlighted, labeled, filePath} = paramsFromMetastring(\n    metastring,\n  )\n\n  // extract code from nodes ?\n  let code = ''\n\n  // create arrays of arrays wit only spans inside\n  const linesArr: ReactNode[][] = [[]]\n\n  Children.forEach(children, (child) => {\n    const index = linesArr.length - 1\n\n    if (typeof child === 'string') {\n      if (language === '') {\n        linesArr.push([child])\n      } else {\n        linesArr.push([])\n      }\n      // add to code\n      code += child\n    } else {\n      if (linesArr[index]) {\n        linesArr[index].push(child)\n      }\n\n      // add content to code\n      if (child && typeof child === 'object') {\n        code += (child as ReactElement).props.children\n      }\n    }\n  })\n\n  // transform lines into divs > [span]\n  const linesNodes = []\n  for (let i = 0; i < linesArr.length; i++) {\n    const lineIndex = i + 1\n    const childs = numbered\n      ? [\n          <Number key={`line-number-${lineIndex}`}>{lineIndex}</Number>,\n          linesArr[i],\n        ]\n      : linesArr[i]\n\n    linesNodes.push(\n      <Line\n        key={`line-${lineIndex}`}\n        highlight={linesHighlighted.indexOf(lineIndex) > -1}\n      >\n        {childs}\n      </Line>,\n    )\n  }\n\n  return (\n    <div className=\"relative bg-gray-800 sm:mx-0 -mx-5 sm:rounded-md rounded-none mb-5 overflow-hidden\">\n      {labeled && (\n        <>\n          <div className=\"sm:pb-3 pb-0 px-5 pt-5 text-white text-xs font-bold select-none pointer-events-none\">\n            {language.replace('language-', '')}\n            <span className=\"ml-2 font-light\">{filePath}</span>\n          </div>\n          <CopyToClipboard code={code} />\n        </>\n      )}\n      <div>\n        <pre\n          className=\"sm:mx-0 -mx-5 sm:px-0 px-5 py-0\"\n          css={{\n            fontSize: '85% !important',\n            lineHeight: '1.75 !important',\n            borderRadius: '0 !important',\n            margin: '0 !important',\n            padding: '0 !important',\n            '@media only screen and (max-width: 640px)': {\n              padding: '0 !important',\n            },\n          }}\n        >\n          <code>\n            <SimpleBar autoHide={false} style={{padding: 20}}>\n              {linesNodes}\n            </SimpleBar>\n          </code>\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeBlock\n\nconst Line: FunctionComponent<{highlight?: boolean}> = ({\n  highlight,\n  children,\n}) => <div className={highlight ? 'bg-gray-700' : ''}>{children}</div>\n\nconst Number: FunctionComponent = ({children}) => (\n  <span className=\"line-number opacity-50 text-xs w-7 inline-block select-none pointer-events-none\">\n    {children}\n  </span>\n)\n\nconst CopyToClipboard: FunctionComponent<{code: string}> = ({code}) => {\n  const [isCopied, setCopied] = useClipboard(code, {successDuration: 1000})\n  return (\n    (<button\n      onClick={setCopied}\n      aria-label=\"Copy code to clipboard\"\n      className=\"p-2 absolute top-4 right-3 text-gray-400 hover:text-white transition-all duration-100 ease-in-out\"\n    >\n      {isCopied ? (\n        //   prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g fill=\"none\"><path d=\"M5 13l4 4L19 7\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>)\n      ) : (\n        // prettier-ignore\n        (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><g strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"2\" fill=\"none\" stroke=\"currentColor\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></g></svg>)\n      )}\n    </button>)\n  );\n}\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/mdx/course.tsx","r":[0,948],"t":"import * as React from 'react'\nimport useSWR from 'swr'\nimport {loadCourse} from 'lib/courses'\nimport Link from 'next/link'\nimport {FunctionComponent} from 'react'\nimport {track} from '../../utils/analytics'\n\ntype CourseWidgetProps = {\n  slug: string\n}\n\nconst CourseWidget: FunctionComponent<CourseWidgetProps> = ({slug}) => {\n  const {data} = useSWR(slug, loadCourse)\n  return (\n    (<div>\n      {data && (\n        <>\n          <Link\n            href={data.path}\n            onClick={() => {\n              track(`clicked course widget`, {\n                slug,\n              })\n            }}>\n\n            <img\n              alt=\"illustration\"\n              className=\"w-64\"\n              src={data.square_cover_480_url}\n            />\n            {data.title}\n\n          </Link>{' '}\n          by {data.instructor.full_name}\n        </>\n      )}\n    </div>)\n  );\n}\n\nexport default CourseWidget\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/player/cue-bar.tsx","r":[0,7230],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport classNames from 'classnames'\nimport {isEmpty} from 'lodash'\nimport Tippy from '@tippyjs/react'\nimport {scroller} from 'react-scroll'\nimport {useEggheadPlayerPrefs} from 'components/EggheadPlayer/use-egghead-player'\nimport ReactMarkdown from 'react-markdown'\nimport {track} from 'utils/analytics'\nimport {useNotesCues} from './index'\nimport CodeBlock from 'components/code-block'\n\nconst CueBar: React.FC<any> = ({\n  className,\n  disableCompletely,\n  player,\n  actions,\n}) => {\n  const {duration} = player\n\n  const {cues} = useNotesCues()\n\n  return disableCompletely || isEmpty(cues) ? null : (\n    <div className={classNames('cueplayer-react-cue-bar', className)}>\n      {cues.map((noteCue: any) => {\n        return (\n          <NoteCue\n            key={noteCue.text}\n            cue={noteCue}\n            duration={duration}\n            player={player}\n            actions={actions}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CueBar\n\nconst useCue = (cue: VTTCue, actions: any) => {\n  const setActive = React.useCallback(\n    function setActive(active) {\n      if (active) {\n        actions.activateMetadataTrackCue(cue)\n      } else {\n        actions.deactivateMetadataTrackCue(cue)\n      }\n    },\n    [actions, cue],\n  )\n\n  React.useEffect(() => {\n    const enterCue = () => {\n      console.debug('enter cue')\n      setActive(true)\n    }\n\n    const exitCue = () => {\n      console.debug('exit cue')\n      setActive(false)\n    }\n\n    cue.addEventListener('enter', enterCue)\n    cue.addEventListener('exit', exitCue)\n\n    return () => {\n      cue.removeEventListener('enter', enterCue)\n      cue.removeEventListener('exit', exitCue)\n    }\n  }, [cue, setActive])\n\n  return setActive\n}\n\nconst MutePopupButton: React.FC<any> = () => {\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n  const {muteNotes} = getPlayerPrefs()\n  return (\n    <button\n      className=\"text-gray-400 rounded flex-nowrap flex items-center text-xs\"\n      onClick={() => {\n        track('muted note popup')\n        setPlayerPrefs({muteNotes: !muteNotes})\n      }}\n    >\n      {muteNotes ? (\n        <>\n          <span className=\"pr-1\">unmute notes</span>\n          <IconVolumeOff />\n        </>\n      ) : (\n        <>\n          <span className=\"pr-1\">mute notes</span>\n          <IconVolumeOn />\n        </>\n      )}\n    </button>\n  )\n}\n\nconst NoteCue: React.FC<any> = ({\n  cue,\n  duration,\n  className,\n  actions,\n  player,\n}) => {\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n  const [visible, setVisible] = React.useState(false)\n  const [clickedOpen, setClickedOpen] = React.useState(false)\n  const {muteNotes, activeSidebarTab} = getPlayerPrefs()\n\n  const scrollToActiveNote = () => {\n    scroller.scrollTo('active-note', {\n      duration: 0,\n      delay: 0,\n      offset: -16,\n      containerId: 'notes-tab-scroll-container',\n    })\n  }\n\n  useCue(cue, actions)\n\n  const clickOpen = () => {\n    setVisible(true)\n    setClickedOpen(true)\n    // if we seek to the correct time, the note is displayed\n    actions.seek(cue.startTime)\n    actions.pause()\n    track('opened cue', {cue: cue.text})\n    // !muteNotes && setPlayerPrefs({activeSidebarTab: 1})\n    if (activeSidebarTab === 1) {\n      scrollToActiveNote()\n    }\n  }\n\n  const clickClose = () => {\n    setClickedOpen(false)\n    setVisible(false)\n  }\n\n  const cueActive = player.activeMetadataTrackCues.includes(cue)\n  const seeking = player.seeking\n  const playerReadyEnough = player.readyState > 0\n\n  React.useEffect(() => {\n    const isVisible = !muteNotes && cueActive && !seeking && playerReadyEnough\n    if (!clickedOpen) {\n      setVisible(isVisible)\n    }\n  }, [\n    setPlayerPrefs,\n    clickedOpen,\n    cueActive,\n    seeking,\n    muteNotes,\n    playerReadyEnough,\n  ])\n\n  // added seeking to the list here but getting some janky perf issues\n\n  const startPosition = `${(cue.startTime / duration) * 100}%`\n\n  let note: {text: string; type?: string}\n\n  try {\n    note = JSON.parse(cue.text)\n  } catch (e) {\n    note = {text: cue.text}\n  }\n\n  React.useEffect(() => {\n    if (visible && activeSidebarTab === 1) {\n      scrollToActiveNote()\n    }\n  }, [visible, setPlayerPrefs])\n\n  return (\n    <Tippy\n      placement=\"top\"\n      theme=\"light\"\n      maxWidth={300}\n      appendTo=\"parent\"\n      offset={[0, 30]}\n      interactive={true}\n      content={\n        <div className=\"py-1\">\n          <div className=\"flex justify-end space-x-2\">\n            <MutePopupButton />\n            <button\n              className=\"text-gray-400 rounded flex-nowrap flex items-center text-xs\"\n              onClick={clickClose}\n            >\n              <IconX />\n            </button>\n          </div>\n          <div className=\"line-clamp-6 prose-sm prose leading-normal\">\n            <ReactMarkdown\n              renderers={{\n                code: (props) => {\n                  return <CodeBlock {...props} />\n                },\n              }}\n            >\n              {note.text}\n            </ReactMarkdown>\n          </div>\n        </div>\n      }\n      visible={visible}\n      onClickOutside={clickClose}\n    >\n      <div\n        onClick={clickOpen}\n        className={classNames(\n          `${\n            note.type === 'learner'\n              ? 'cueplayer-react-cue-note-learner'\n              : 'cueplayer-react-cue-note'\n          }`,\n          {\n            'cueplayer-react-cue-note-active': visible,\n            'cueplayer-react-cue-note-inactive': !visible,\n          },\n          className,\n        )}\n        style={{left: startPosition}}\n      />\n    </Tippy>\n  )\n}\n\nconst IconVolumeOff: React.FC<any> = ({className}) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      className={`w-4 h-4 ${className ?? ''}`}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"\n        clipRule=\"evenodd\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2\"\n      />\n    </svg>\n  )\n}\n\nconst IconVolumeOn: React.FC<any> = ({className}) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      className={`w-4 h-4 ${className ?? ''}`}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"\n      />\n    </svg>\n  )\n}\n\nconst IconX: React.FC<any> = ({className}) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`w-4 h-4 ${className ?? ''}`}\n  >\n    <g fill=\"none\">\n      <path\n        d=\"M6 18L18 6M6 6l12 12\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n  </svg>\n)\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/player/index.tsx","r":[0,7191],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {isEmpty, isArray} from 'lodash'\nimport {\n  Player,\n  BigPlayButton,\n  ClosedCaptionButton,\n  ControlBar,\n  CurrentTimeDisplay,\n  DurationDisplay,\n  ForwardControl,\n  FullscreenToggle,\n  PlaybackRateMenuButton,\n  PlayToggle,\n  ProgressControl,\n  ReplayControl,\n  TimeDivider,\n  usePlayer,\n  VolumeMenuButton,\n} from 'cueplayer-react'\nimport HLSSource from './hls-source'\nimport CueBar from './cue-bar'\nimport ControlBarDivider from './control-bar-divider'\nimport DownloadControl from './download-control'\nimport AutoplayControl from './autoplay-control'\nimport {\n  defaultSubtitlePreference,\n  useEggheadPlayerPrefs,\n} from 'components/EggheadPlayer/use-egghead-player'\nimport {VideoResource} from 'types'\nimport React, { MutableRefObject, SyntheticEvent } from 'react';\nimport AddNoteControl from './add-note-control'\n\nexport type VideoResourcePlayerProps = {\n  videoResource: VideoResource\n  containerRef?: MutableRefObject<any>\n  actualPlayerRef?: MutableRefObject<any>\n  onCanPlay?: (event: any) => void\n  onLoadStart?: (event: any) => void\n  onPause?: () => void\n  onPlay?: () => void\n  onTimeUpdate?: (event: any) => void\n  onFullscreenChange?: (isFullscreen: boolean) => void\n  onEnded?: () => void\n  onVolumeChange?: (event: any) => void\n  onAddNote?: () => void\n  newNotes?: any[]\n  hidden?: boolean\n  className?: string\n  volume?: number\n}\n\nconst VideoResourcePlayer: React.FC<VideoResourcePlayerProps> = ({\n  videoResource,\n  containerRef,\n  actualPlayerRef,\n  hidden = false,\n  className = '',\n  children,\n  onFullscreenChange,\n  onLoadStart,\n  newNotes,\n  onAddNote,\n  ...props\n}) => {\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n\n  const {subtitle, playbackRate, volumeRate} = getPlayerPrefs()\n\n  const noteTrack = React.useRef<HTMLTrackElement>(null)\n\n  React.useEffect(() => {\n    const track = noteTrack.current?.track\n\n    if (track && isArray(newNotes)) {\n      newNotes.forEach((note) => {\n        const cue = new VTTCue(\n          note.start_time,\n          note.end_time,\n          JSON.stringify(note),\n        )\n        track.addCue(cue)\n      })\n    }\n  }, [newNotes, noteTrack])\n\n  return (\n    <div\n      className={`relative z-10 h-full ${className} \n          ${hidden ? 'hidden' : 'block'} \n          ${hasNotes(videoResource) ? 'pb-[5rem]' : 'pb-14'}`}\n    >\n      <Player\n        crossOrigin=\"anonymous\"\n        className=\"font-sans\"\n        volume={0.2}\n        poster={videoResource.thumb_url}\n        onLoadStart={(event: any) => {\n          const videoElement: HTMLVideoElement =\n            event.target as HTMLVideoElement\n          videoElement.volume = volumeRate / 100\n          videoElement.playbackRate = playbackRate\n          if (onLoadStart) {\n            onLoadStart(event)\n          }\n        }}\n        onVolumeChange={(event: SyntheticEvent) => {\n          const player: HTMLVideoElement = event.target as HTMLVideoElement\n          setPlayerPrefs({volumeRate: player.volume * 100})\n        }}\n        {...props}\n      >\n        <BigPlayButton position=\"center\" />\n        {videoResource.hls_url && (\n          <HLSSource\n            key={videoResource.hls_url}\n            isVideoChild\n            src={videoResource.hls_url}\n          />\n        )}\n        {videoResource.subtitles_url && (\n          <track\n            key={videoResource.subtitles_url}\n            src={videoResource.subtitles_url}\n            kind=\"subtitles\"\n            srcLang=\"en\"\n            label=\"English\"\n            default={subtitle?.language === 'en'}\n          />\n        )}\n        {hasNotes(videoResource) && (\n          <track\n            key={videoResource.slug}\n            ref={noteTrack}\n            id=\"notes\"\n            src={`/api/github-load-notes?url=${videoResource.staff_notes_url}&resource=${videoResource.slug}`}\n            kind=\"metadata\"\n            label=\"notes\"\n          />\n        )}\n        {hasNotes(videoResource) && (\n          <CueBar key={videoResource.slug} order={6.0} />\n        )}\n        <ProgressControl key=\"progress-control\" order={7.0} />\n        <ControlBar\n          disableDefaultControls\n          autoHide={false}\n          className={`flex ${\n            hasNotes(videoResource) ? 'translate-y-[5rem]' : 'translate-y-14'\n          }`}\n          order={8.0}\n        >\n          <PlayToggle key=\"play-toggle\" order={1} />\n          <ReplayControl key=\"replay-control\" order={2} />\n          <ForwardControl key=\"forward-control\" order={3} />\n          <VolumeMenuButton key=\"volume-menu-button\" order={4} />\n          <CurrentTimeDisplay key=\"current-time-display\" order={5} />\n          <TimeDivider key=\"time-divider\" order={6} />\n          <DurationDisplay key=\"duration-display\" order={7} />\n          <ControlBarDivider key=\"divider\" order={8} className=\"flex-grow\" />\n          <AutoplayControl\n            enabled={true}\n            onDark={true}\n            key=\"autoplay-control\"\n            order={9}\n          />\n          <PlaybackRateMenuButton\n            rates={[2, 1.75, 1.5, 1.25, 1, 0.85, 0.75]}\n            key=\"playback-rate\"\n            order={10}\n            selected={playbackRate}\n            onChange={(playbackRate: number) => {\n              setPlayerPrefs({playbackRate})\n            }}\n          />\n          <AddNoteControl\n            key=\"add-note-control\"\n            order={11}\n            lesson={videoResource}\n            onAddNote={onAddNote}\n          />\n          <DownloadControl\n            key=\"download-control\"\n            order={12}\n            lesson={videoResource}\n          />\n          {videoResource.subtitles_url && (\n            <ClosedCaptionButton\n              key={videoResource.subtitles_url}\n              order={13}\n              selected={subtitle}\n              onChange={(track?: TextTrack) => {\n                const updatedSubtitlePref = track\n                  ? {\n                      id: track.id,\n                      kind: track.kind,\n                      label: track.label,\n                      language: track.language,\n                    }\n                  : defaultSubtitlePreference\n\n                setPlayerPrefs({\n                  subtitle: updatedSubtitlePref,\n                })\n              }}\n            >\n              1123\n            </ClosedCaptionButton>\n          )}\n          <FullscreenToggle\n            key=\"fullscreen-toggle\"\n            fullscreenElement={containerRef?.current}\n            order={14}\n            onFullscreenChange={onFullscreenChange}\n          />\n        </ControlBar>\n      </Player>\n      {children}\n    </div>\n  )\n}\n\nexport const hasNotes = (resource: VideoResource) => {\n  return (\n    process.env.NEXT_PUBLIC_NOTES_ENABLED === 'true' &&\n    !isEmpty(resource.staff_notes_url)\n  )\n}\n\nexport const useNotesCues = () => {\n  const {player} = usePlayer()\n  const {activeMetadataTracks = []} = player\n\n  const noteTracks = activeMetadataTracks.filter((track: TextTrack) => {\n    return track.label === 'notes'\n  })\n\n  const cues: VTTCue[] = noteTracks.reduce(\n    (acc: VTTCue[], track: TextTrack) => {\n      return [...acc, ...Array.from(track.cues || [])]\n    },\n    [],\n  )\n\n  return {\n    cues,\n  }\n}\n\nexport default VideoResourcePlayer\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/player/player-container.tsx","r":[0,1033],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {usePlayer} from 'cueplayer-react'\nimport classNames from 'classnames'\n\nconst PlayerContainer: React.ForwardRefExoticComponent<any> = React.forwardRef<\n  HTMLDivElement,\n  any\n>((props, ref) => {\n  const {player} = usePlayer()\n  const {className, children, ...rest} = props\n  const {paused, hasStarted, waiting, seeking, isFullscreen, userActivity} =\n    player\n\n  return (\n    <div\n      {...rest}\n      ref={ref}\n      className={classNames(\n        {\n          'cueplayer-react-has-started': hasStarted,\n          'cueplayer-react-paused': paused,\n          'cueplayer-react-playing': !paused,\n          'cueplayer-react-waiting': waiting,\n          'cueplayer-react-seeking': seeking,\n          'cueplayer-react-fullscreen': isFullscreen,\n          'cueplayer-react-user-inactive': !userActivity,\n          'cueplayer-react-user-active': userActivity,\n        },\n        'cueplayer-react',\n        className,\n      )}\n    >\n      {children}\n    </div>\n  )\n})\n\nexport default PlayerContainer\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/player/player-sidebar.tsx","r":[0,9205],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useEggheadPlayerPrefs} from '../EggheadPlayer/use-egghead-player'\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from '@reach/tabs'\nimport {isEmpty, isFunction} from 'lodash'\nimport CollectionLessonsList from 'components/pages/lessons/collection-lessons-list'\nimport {hasNotes, useNotesCues} from './index'\nimport {VideoResource} from 'types'\nimport {usePlayer} from 'cueplayer-react'\nimport SimpleBar from 'simplebar-react'\nimport {Element} from 'react-scroll'\nimport classNames from 'classnames'\nimport ReactMarkdown from 'react-markdown'\nimport {convertTime} from 'utils/time-utils'\nimport {track} from 'utils/analytics'\nimport Link from 'components/link'\nimport Image from 'next/image'\nimport CodeBlock from 'components/code-block'\nimport {useViewer} from '../../context/viewer-context'\n\nconst notesCreationAvailable =\n  process.env.NEXT_PUBLIC_NOTES_CREATION_AVAILABLE === 'true'\n\nconst PlayerSidebar: React.FC<{\n  videoResource: VideoResource\n  lessonView?: any\n  onAddNote?: any\n}> = ({videoResource, lessonView, onAddNote}) => {\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n  const {activeSidebarTab} = getPlayerPrefs()\n  return (\n    <div className=\"relative h-full\">\n      {/* TODO: remove weird logic that assumes 2 tabs */}\n      <Tabs\n        index={(hasNotes(videoResource) && activeSidebarTab) || 0}\n        onChange={(tabIndex) => setPlayerPrefs({activeSidebarTab: tabIndex})}\n        className=\"shadow-sm lg:absolute left-0 top-0 w-full h-full flex flex-col bg-gray-100 dark:bg-gray-1000 text-gray-900 dark:text-white\"\n      >\n        <TabList className=\"relative z-[1] flex-shrink-0\">\n          {!isEmpty(videoResource.collection) && (\n            <Tab onClick={(e) => console.log('e')}>Lessons</Tab>\n          )}\n          {hasNotes(videoResource) && (\n            <Tab onClick={(e) => console.log('e')}>Notes</Tab>\n          )}\n        </TabList>\n        <TabPanels className=\"flex-grow relative\">\n          <TabPanel className=\"lg:absolute inset-0\">\n            <LessonListTab\n              videoResource={videoResource}\n              lessonView={lessonView}\n              onActiveTab={activeSidebarTab === 0}\n            />\n          </TabPanel>\n          <TabPanel className=\"lg:absolute inset-0\">\n            <NotesTab onAddNote={onAddNote} />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </div>\n  )\n}\n\nconst LessonListTab: React.FC<{\n  videoResource: VideoResource\n  lessonView?: any\n  onActiveTab: boolean\n}> = ({videoResource, lessonView, onActiveTab}) => {\n  const hidden: boolean = isEmpty(videoResource.collection)\n\n  return hidden ? null : (\n    <div className=\"bg-gray-100 dark:bg-gray-1000 w-full h-full\">\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex-shrink-0 p-4 sm:border-b border-gray-100 dark:border-gray-800\">\n          <CourseHeader\n            course={videoResource.collection}\n            currentLessonSlug={videoResource.slug}\n          />\n        </div>\n        <div className=\"flex-grow overflow-hidden\">\n          <CollectionLessonsList\n            course={videoResource.collection}\n            currentLessonSlug={videoResource.slug}\n            progress={lessonView?.collection_progress}\n            onActiveTab={onActiveTab}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst NotesTab: React.FC<any> = ({onAddNote}) => {\n  const {player, manager} = usePlayer()\n  const {viewer} = useViewer()\n  const {cues} = useNotesCues()\n  const actions = manager?.getActions()\n  const hidden: boolean = isEmpty(cues)\n  const scrollableNodeRef: any = React.createRef()\n\n  const canCreateNote = viewer?.can_comment && notesCreationAvailable\n\n  return hidden ? null : (\n    <div className=\"bg-gray-100 dark:bg-gray-1000 w-full h-96 lg:h-full\">\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex-grow overflow-hidden\">\n          <SimpleBar\n            forceVisible=\"y\"\n            autoHide={false}\n            scrollableNodeProps={{\n              ref: scrollableNodeRef,\n              id: 'notes-tab-scroll-container',\n            }}\n            className=\"h-full overscroll-contain p-4\"\n          >\n            <div className=\"space-y-3\">\n              {cues.map((cue: VTTCue) => {\n                let note: {text: string; type?: string}\n                try {\n                  note = JSON.parse(cue.text)\n                } catch (e) {\n                  note = {text: cue.text}\n                }\n                const active = player.activeMetadataTrackCues.includes(cue)\n                return (\n                  <div key={cue.text}>\n                    {active && <Element name=\"active-note\" />}\n                    <div\n                      className={classNames(\n                        'text-sm p-4 bg-white dark:bg-gray-900 rounded-md shadow-sm border-2 border-transparent',\n                        {\n                          'border-indigo-500': active,\n                          '': !active,\n                        },\n                      )}\n                    >\n                      {note.text && (\n                        <ReactMarkdown\n                          className=\"leading-normal prose-sm prose dark:prose-dark\"\n                          renderers={{\n                            code: (props) => {\n                              return <CodeBlock {...props} />\n                            },\n                          }}\n                        >\n                          {note.text}\n                        </ReactMarkdown>\n                      )}\n                      {cue.startTime && (\n                        <div\n                          onClick={() => {\n                            actions?.seek(cue.startTime)\n                            track('clicked cue in sidebar', {cue: note.text})\n                          }}\n                          className=\"w-full cursor-pointer underline flex items-baseline justify-end pt-3 text-gray-900 dark:text-white\"\n                        >\n                          <time className=\"text-xs opacity-60 font-medium\">\n                            {convertTime(cue.startTime)}\n                          </time>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </SimpleBar>\n        </div>\n        {canCreateNote && (\n          <div className=\"flex-shrink-0 p-4\">\n            <button\n              type=\"button\"\n              onClick={(e) => {\n                e.preventDefault()\n                if (isFunction(onAddNote)) {\n                  onAddNote()\n                  actions.pause()\n                  track(`clicked add note`)\n                }\n              }}\n              aria-expanded={true}\n              aria-controls=\"add-note-overlay\"\n              className=\"uppercase bg-gray-200 hover:bg-gray-300 text-gray-500 hover:text-gray-600 duration-100 p-3 flex justify-center items-center rounded-md w-full text-xs font-semibold\"\n            >\n              <IconNote />\n              <span className=\"ml-2\">Add a note</span>\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst CourseHeader: React.FunctionComponent<{\n  course: {\n    title: string\n    square_cover_480_url: string\n    slug: string\n    path: string\n  }\n  currentLessonSlug: string\n}> = ({course, currentLessonSlug}) => {\n  return course ? (\n    <div>\n      <div className=\"flex items-center\">\n        <Link href={course.path}>\n          <a className=\"flex-shrink-0 relative block w-12 h-12 lg:w-16 lg:h-16 xl:w-20 xl:h-20\">\n            <Image\n              src={course.square_cover_480_url}\n              alt={`illustration for ${course.title}`}\n              layout=\"fill\"\n            />\n          </a>\n        </Link>\n        <div className=\"ml-2 lg:ml-4\">\n          <h4 className=\"text-gray-700 dark:text-gray-100 font-semibold mb-px text-xs uppercase\">\n            Course\n          </h4>\n          <Link href={course.path}>\n            <a\n              onClick={() => {\n                track(`clicked open course`, {\n                  lesson: currentLessonSlug,\n                })\n              }}\n              className=\"hover:underline\"\n            >\n              <h3 className=\"font-bold leading-tighter 2xl:text-lg\">\n                {course.title}\n              </h3>\n            </a>\n          </Link>\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nexport default PlayerSidebar\n\nconst IconNote: React.FC<any> = ({className}) => (\n  <svg\n    viewBox=\"0 0 23 22\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`w-4 h-4 ${className ?? ''}`}\n  >\n    <path\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n      d=\"M23 14.667V2.933C23 1.313 21.713 0 20.125 0H2.875C1.287 0 0 1.313 0 2.933v11.734c0 1.62 1.287 2.933 2.875 2.933h4.313L11.5 22l4.313-4.4h4.312c1.588 0 2.875-1.313 2.875-2.933zm-18.688-8.8c0-.81.644-1.467 1.438-1.467h11.5c.794 0 1.438.657 1.438 1.467s-.644 1.466-1.438 1.466H5.75c-.794 0-1.438-.656-1.438-1.466zm1.438 4.4c-.794 0-1.438.656-1.438 1.466 0 .81.644 1.467 1.438 1.467h4.313c.793 0 1.437-.657 1.437-1.467s-.644-1.466-1.438-1.466H5.75z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n)\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pricing/parity-coupon-message.tsx","r":[0,2653],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {Coupon} from 'machines/commerce-machine'\n\ntype ParityCouponMessage = {\n  coupon: Coupon\n  countryName: string\n  onApply: () => void\n  onDismiss: () => void\n  isPPP?: boolean\n}\n\nconst ParityCouponMessage = ({\n  coupon,\n  countryName,\n  onApply,\n  onDismiss,\n  isPPP,\n}: ParityCouponMessage) => {\n  const percentOff = coupon && coupon.coupon_discount * 100\n  const [showFlag, setShowFlag] = React.useState<boolean>(false)\n  return (\n    <div className=\"max-w-screen-lg mx-auto p-7 shadow-lg rounded-lg border border-cool-gray-50 text-left\">\n      <h2 className=\"text-lg font-semibold mb-4 sm:text-left text-center\">\n        We noticed that you're from{' '}\n        <img\n          loading=\"lazy\"\n          width={showFlag ? 18 : 0}\n          onLoad={() => setShowFlag(true)}\n          alt={coupon.coupon_region_restricted_to}\n          className={`inline-block ${showFlag ? 'mr-1' : ''}`}\n          src={`https://hardcore-golick-433858.netlify.app/image?code=${coupon.coupon_region_restricted_to}`}\n        />\n        {countryName}. 👋 To help facilitate global learning, we are offering\n        purchasing power parity pricing.\n      </h2>\n      <p className=\"text-base\">\n        Please note that you will only be able to view content from within{' '}\n        {countryName}, and{' '}\n        <strong>no downloads/bonuses will be provided</strong>.\n      </p>\n      <p className=\"text-base inline-block mt-5\">\n        If that is something that you need:\n      </p>\n      <div className=\"mt-4\">\n        <label\n          className={`inline-flex items-center px-4 py-3 rounded-md  transition-all ease-in-out duration-150 cursor-pointer border ${\n            isPPP ? 'border-blue-500' : ' border-gray-300'\n          }`}\n        >\n          <input\n            className=\"form-checkbox\"\n            name=\"isPPPActivated\"\n            type=\"checkbox\"\n            checked={isPPP}\n            onChange={isPPP ? onDismiss : onApply}\n          />\n          <span className=\"ml-2 font-semibold\">\n            {isPPP\n              ? `Activated ${percentOff}% off with regional pricing`\n              : `Activate ${percentOff}% off with regional pricing`}\n          </span>\n        </label>\n        {isPPP && (\n          <div className=\"mt-4\">\n            🛑 You currently have a Purchasing Power Parity coupon applied. With\n            this discount your purchase will be restricted to your country\n            region/country. You will have the opportunity to upgrade to a full\n            license at a later time if you choose to do so.\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ParityCouponMessage\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/index.tsx","r":[0,11070],"t":"import React, {FunctionComponent} from 'react'\nimport Head from 'next/head'\nimport Hits from './hits'\nimport Stats from './stats'\nimport SearchBox from './search-box'\nimport RefinementList from './refinement-list'\nimport Pagination from './pagination'\nimport {\n  Configure,\n  InstantSearch,\n  ClearRefinements,\n  ScrollTo,\n  SortBy,\n} from 'react-instantsearch-dom'\n\nimport {get, isEqual, isEmpty, first} from 'lodash'\nimport {useToggle, useClickAway} from 'react-use'\n\nimport config from 'lib/config'\n\nimport InstructorsIndex from 'components/search/instructors/index'\nimport NoSearchResults from 'components/search/components/no-search-results'\n\nimport SearchCuratedEssential from './curated/curated-essential'\nimport SearchInstructorEssential from './instructors/instructor-essential'\nimport CuratedTopicsIndex from './curated'\nimport {searchQueryToArray} from '../../utils/search/topic-extractor'\nimport useBreakpoint from '../../utils/breakpoints'\n\nimport Spinner from 'components/spinner'\n\nconst ALGOLIA_INDEX_NAME =\n  process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME || 'content_production'\n\ntype SearchProps = {\n  searchClient?: any\n  searchState?: any\n  instructor?: any\n  topic?: any\n  loading?: boolean\n}\n\nconst Search: FunctionComponent<SearchProps> = ({\n  children = [],\n  searchClient,\n  searchState,\n  instructor,\n  topic,\n  loading,\n  ...rest\n}) => {\n  const [isFilterShown, setShowFilter] = useToggle(false)\n\n  const {sm} = useBreakpoint()\n\n  const noInstructorsSelected = (searchState: any) => {\n    return get(searchState, 'refinementList.instructor_name', []).length === 0\n  }\n\n  const noTopicsSelected = (searchState: any) => {\n    return (\n      isEmpty(topic) &&\n      get(searchState, 'refinementList._tags', []).length === 0\n    )\n  }\n\n  const isRefinementOn =\n    !isEmpty(get(searchState, 'refinementList.instructor_name')) ||\n    !isEmpty(get(searchState, 'refinementList._tags')) ||\n    !isEmpty(get(searchState, 'refinementList.access_state')) ||\n    !isEmpty(get(searchState, 'refinementList.type'))\n\n  const numberOfRefinements =\n    get(searchState, 'refinementList.instructor_name', []).length +\n    get(searchState, 'refinementList._tags', []).length +\n    get(searchState, 'refinementList.access_state', []).length +\n    get(searchState, 'refinementList.type', []).length\n\n  const refinementRef = React.useRef(null)\n  useClickAway(refinementRef, () => setShowFilter(false))\n\n  const searchBoxPlaceholder = !isEmpty(instructor)\n    ? `Search resources by ${instructor.full_name}`\n    : undefined\n\n  const shouldDisplayLandingPageForTopics = (topic: string) => {\n    const terms = searchQueryToArray(searchState)\n\n    return (\n      (isEmpty(searchState.query) ||\n        (terms.includes(topic) && terms.length === 1)) &&\n      isEmpty(searchState.page) &&\n      noInstructorsSelected(searchState)\n    )\n  }\n\n  const shouldDisplayLandingPageForInstructor = (slug: string) => {\n    return (\n      isEmpty(searchState.query) &&\n      isEmpty(searchState.page) &&\n      noTopicsSelected(searchState)\n    )\n  }\n\n  const InstructorCuratedPage =\n    instructor &&\n    (InstructorsIndex[instructor.slug] || SearchInstructorEssential)\n  const CuratedTopicPage =\n    topic && (CuratedTopicsIndex[topic.name] || SearchCuratedEssential)\n\n  return (\n    (<div className=\"max-w-screen-xl mx-auto\">\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/instantsearch.css@7.3.1/themes/algolia-min.css\"\n        />\n      </Head>\n      <InstantSearch\n        indexName={ALGOLIA_INDEX_NAME}\n        searchClient={searchClient}\n        searchState={searchState}\n        {...rest}\n      >\n        <Configure hitsPerPage={config.searchResultCount} />\n        <div className=\"space-y-8 bg-gray-50 dark:bg-gray-900\">\n          <div ref={refinementRef}>\n            <header className=\"flex\">\n              <SearchBox\n                placeholder={searchBoxPlaceholder}\n                className=\"w-full \"\n              />\n              {sm && (\n                <button\n                  onClick={setShowFilter}\n                  className={`ml-2 flex items-center sm:px-5 px-3 py-2 rounded-md border-2 ${\n                    isRefinementOn ? 'border-blue-400' : 'border-transparent'\n                  } focus:border-blue-600 focus:outline-none`}\n                >\n                  <span className=\"sm:block hidden\">Filter</span>\n                  {numberOfRefinements > 0 ? (\n                    <div className=\"-mr-1 w-6 h-6 transform scale-75 flex items-center justify-center bg-blue-600 rounded-full text-white text-xs font-bold\">\n                      {numberOfRefinements}\n                    </div>\n                  ) : (\n                    <>\n                      {isFilterShown ? (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" width=\"14\" height=\"14\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 0 1 1.414 0L10 8.586l4.293-4.293a1 1 0 1 1 1.414 1.414L11.414 10l4.293 4.293a1 1 0 0 1-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 0 1-1.414-1.414L8.586 10 4.293 5.707a1 1 0 0 1 0-1.414z\" fill=\"currentColor\"/></g></svg>)\n                      ) : (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" transform=\"translate(1 1)\"><line x1=\"3.5\" x2=\"3.5\" y1=\"5\"/><line x1=\".5\" x2=\"3.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"5.5\" x2=\"11.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"8.5\" x2=\"8.5\" y1=\"10\" y2=\"5\"/><line x1=\"11.5\" x2=\"8.5\" y1=\"7.5\" y2=\"7.5\"/><line x1=\"6.5\" x2=\".5\" y1=\"7.5\" y2=\"7.5\"/></g></svg>)\n                      )}\n                    </>\n                  )}\n                </button>\n              )}\n            </header>\n            {sm && (\n              <div\n                className={`overflow-hidden rounded-md bg-white dark:bg-gray-800 border border-transparent shadow-lg ${\n                  isFilterShown\n                    ? 'h-auto border-gray-200 dark:border-gray-700 my-2'\n                    : 'h-0 border-none my-0'\n                }`}\n              >\n                <div\n                  className={`${\n                    isFilterShown ? 'top-full ' : 'top-0'\n                  } sm:p-8 p-5 grid sm:grid-cols-3 grid-cols-1 sm:gap-8 gap-5 relative`}\n                >\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Topics</h3>\n                    <RefinementList limit={6} attribute=\"_tags\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                    <RefinementList limit={6} attribute=\"instructor_name\" />\n                  </div>\n                  <div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                  {isRefinementOn && (\n                    <button\n                      className=\"absolute top-0 right-0 mr-3 mt-3 text-blue-600 dark:text-blue-300\"\n                      onClick={setShowFilter}\n                    >\n                      <ClearRefinements />\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          {!isEmpty(instructor) && (\n            <div className=\"mb-10 pb-8\">\n              {shouldDisplayLandingPageForInstructor(instructor.slug) && (\n                <InstructorCuratedPage instructor={instructor} />\n              )}\n            </div>\n          )}\n\n          {loading && (\n            <div className=\"flex justify-center\">\n              <Spinner size={12} />\n            </div>\n          )}\n\n          {!isEmpty(topic) && (\n            <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n              {CuratedTopicPage &&\n                shouldDisplayLandingPageForTopics(topic.name) && (\n                  <CuratedTopicPage topic={topic} />\n                )}\n            </div>\n          )}\n\n          <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n            <ScrollTo scrollOn=\"page\" />\n\n            <div className=\"flex flex-col-reverse md:flex-row justify-between items-center pb-4 md:pb-2 mb-4 md:mb-6 border-b border-gray-200 dark:border-gray-700\">\n              <Stats searchQuery={searchState.query} />\n              <div className=\"flex space-x-2 items-center flex-nowrap flex-shrink-0 md:ml-6\">\n                <div className=\"font-bold whitespace-nowrap flex-shrink-0\">\n                  Sort by:\n                </div>\n                <SortBy\n                  defaultRefinement=\"popular\"\n                  items={[\n                    {\n                      value: 'popular',\n                      label: 'Most Popular',\n                    },\n                    {value: 'reviews', label: 'Highest Rated'},\n                    {value: 'created', label: 'Recently Added'},\n                    {value: 'completed', label: 'Most Watched'},\n                  ]}\n                />\n              </div>\n            </div>\n            <div className=\"flex mb-10 pb-10\">\n              <div className=\"flex-shrink-0\">\n                {!sm && (\n                  <div className=\"pl-0 pt-0 p-10 flex flex-col space-y-6\">\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Topics</h3>\n                      <RefinementList limit={6} attribute=\"_tags\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                      <RefinementList limit={6} attribute=\"instructor_name\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div\n                key=\"search-results\"\n                className=\"col-span-4 sm:col-span-3 w-full\"\n              >\n                <NoSearchResults searchQuery={searchState.query} />\n                <Hits />\n              </div>\n            </div>\n          </div>\n          <div className=\"max-w-screen-xl mx-auto w-full flex items-center justify-center mt-8 mb-4 overflow-x-auto\">\n            <Pagination />\n          </div>\n          {children}\n        </div>\n      </InstantSearch>\n    </div>)\n  );\n}\n\nexport default Search\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/index.tsx","r":[0,11070],"t":"import React, {FunctionComponent} from 'react'\nimport Head from 'next/head'\nimport Hits from './hits'\nimport Stats from './stats'\nimport SearchBox from './search-box'\nimport RefinementList from './refinement-list'\nimport Pagination from './pagination'\nimport {\n  Configure,\n  InstantSearch,\n  ClearRefinements,\n  ScrollTo,\n  SortBy,\n} from 'react-instantsearch-dom'\n\nimport {get, isEqual, isEmpty, first} from 'lodash'\nimport {useToggle, useClickAway} from 'react-use'\n\nimport config from 'lib/config'\n\nimport InstructorsIndex from 'components/search/instructors/index'\nimport NoSearchResults from 'components/search/components/no-search-results'\n\nimport SearchCuratedEssential from './curated/curated-essential'\nimport SearchInstructorEssential from './instructors/instructor-essential'\nimport CuratedTopicsIndex from './curated'\nimport {searchQueryToArray} from '../../utils/search/topic-extractor'\nimport useBreakpoint from '../../utils/breakpoints'\n\nimport Spinner from 'components/spinner'\n\nconst ALGOLIA_INDEX_NAME =\n  process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME || 'content_production'\n\ntype SearchProps = {\n  searchClient?: any\n  searchState?: any\n  instructor?: any\n  topic?: any\n  loading?: boolean\n}\n\nconst Search: FunctionComponent<SearchProps> = ({\n  children = [],\n  searchClient,\n  searchState,\n  instructor,\n  topic,\n  loading,\n  ...rest\n}) => {\n  const [isFilterShown, setShowFilter] = useToggle(false)\n\n  const {sm} = useBreakpoint()\n\n  const noInstructorsSelected = (searchState: any) => {\n    return get(searchState, 'refinementList.instructor_name', []).length === 0\n  }\n\n  const noTopicsSelected = (searchState: any) => {\n    return (\n      isEmpty(topic) &&\n      get(searchState, 'refinementList._tags', []).length === 0\n    )\n  }\n\n  const isRefinementOn =\n    !isEmpty(get(searchState, 'refinementList.instructor_name')) ||\n    !isEmpty(get(searchState, 'refinementList._tags')) ||\n    !isEmpty(get(searchState, 'refinementList.access_state')) ||\n    !isEmpty(get(searchState, 'refinementList.type'))\n\n  const numberOfRefinements =\n    get(searchState, 'refinementList.instructor_name', []).length +\n    get(searchState, 'refinementList._tags', []).length +\n    get(searchState, 'refinementList.access_state', []).length +\n    get(searchState, 'refinementList.type', []).length\n\n  const refinementRef = React.useRef(null)\n  useClickAway(refinementRef, () => setShowFilter(false))\n\n  const searchBoxPlaceholder = !isEmpty(instructor)\n    ? `Search resources by ${instructor.full_name}`\n    : undefined\n\n  const shouldDisplayLandingPageForTopics = (topic: string) => {\n    const terms = searchQueryToArray(searchState)\n\n    return (\n      (isEmpty(searchState.query) ||\n        (terms.includes(topic) && terms.length === 1)) &&\n      isEmpty(searchState.page) &&\n      noInstructorsSelected(searchState)\n    )\n  }\n\n  const shouldDisplayLandingPageForInstructor = (slug: string) => {\n    return (\n      isEmpty(searchState.query) &&\n      isEmpty(searchState.page) &&\n      noTopicsSelected(searchState)\n    )\n  }\n\n  const InstructorCuratedPage =\n    instructor &&\n    (InstructorsIndex[instructor.slug] || SearchInstructorEssential)\n  const CuratedTopicPage =\n    topic && (CuratedTopicsIndex[topic.name] || SearchCuratedEssential)\n\n  return (\n    (<div className=\"max-w-screen-xl mx-auto\">\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/instantsearch.css@7.3.1/themes/algolia-min.css\"\n        />\n      </Head>\n      <InstantSearch\n        indexName={ALGOLIA_INDEX_NAME}\n        searchClient={searchClient}\n        searchState={searchState}\n        {...rest}\n      >\n        <Configure hitsPerPage={config.searchResultCount} />\n        <div className=\"space-y-8 bg-gray-50 dark:bg-gray-900\">\n          <div ref={refinementRef}>\n            <header className=\"flex\">\n              <SearchBox\n                placeholder={searchBoxPlaceholder}\n                className=\"w-full \"\n              />\n              {sm && (\n                <button\n                  onClick={setShowFilter}\n                  className={`ml-2 flex items-center sm:px-5 px-3 py-2 rounded-md border-2 ${\n                    isRefinementOn ? 'border-blue-400' : 'border-transparent'\n                  } focus:border-blue-600 focus:outline-none`}\n                >\n                  <span className=\"sm:block hidden\">Filter</span>\n                  {numberOfRefinements > 0 ? (\n                    <div className=\"-mr-1 w-6 h-6 transform scale-75 flex items-center justify-center bg-blue-600 rounded-full text-white text-xs font-bold\">\n                      {numberOfRefinements}\n                    </div>\n                  ) : (\n                    <>\n                      {isFilterShown ? (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" width=\"14\" height=\"14\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 0 1 1.414 0L10 8.586l4.293-4.293a1 1 0 1 1 1.414 1.414L11.414 10l4.293 4.293a1 1 0 0 1-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 0 1-1.414-1.414L8.586 10 4.293 5.707a1 1 0 0 1 0-1.414z\" fill=\"currentColor\"/></g></svg>)\n                      ) : (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" transform=\"translate(1 1)\"><line x1=\"3.5\" x2=\"3.5\" y1=\"5\"/><line x1=\".5\" x2=\"3.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"5.5\" x2=\"11.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"8.5\" x2=\"8.5\" y1=\"10\" y2=\"5\"/><line x1=\"11.5\" x2=\"8.5\" y1=\"7.5\" y2=\"7.5\"/><line x1=\"6.5\" x2=\".5\" y1=\"7.5\" y2=\"7.5\"/></g></svg>)\n                      )}\n                    </>\n                  )}\n                </button>\n              )}\n            </header>\n            {sm && (\n              <div\n                className={`overflow-hidden rounded-md bg-white dark:bg-gray-800 border border-transparent shadow-lg ${\n                  isFilterShown\n                    ? 'h-auto border-gray-200 dark:border-gray-700 my-2'\n                    : 'h-0 border-none my-0'\n                }`}\n              >\n                <div\n                  className={`${\n                    isFilterShown ? 'top-full ' : 'top-0'\n                  } sm:p-8 p-5 grid sm:grid-cols-3 grid-cols-1 sm:gap-8 gap-5 relative`}\n                >\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Topics</h3>\n                    <RefinementList limit={6} attribute=\"_tags\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                    <RefinementList limit={6} attribute=\"instructor_name\" />\n                  </div>\n                  <div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                  {isRefinementOn && (\n                    <button\n                      className=\"absolute top-0 right-0 mr-3 mt-3 text-blue-600 dark:text-blue-300\"\n                      onClick={setShowFilter}\n                    >\n                      <ClearRefinements />\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          {!isEmpty(instructor) && (\n            <div className=\"mb-10 pb-8\">\n              {shouldDisplayLandingPageForInstructor(instructor.slug) && (\n                <InstructorCuratedPage instructor={instructor} />\n              )}\n            </div>\n          )}\n\n          {loading && (\n            <div className=\"flex justify-center\">\n              <Spinner size={12} />\n            </div>\n          )}\n\n          {!isEmpty(topic) && (\n            <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n              {CuratedTopicPage &&\n                shouldDisplayLandingPageForTopics(topic.name) && (\n                  <CuratedTopicPage topic={topic} />\n                )}\n            </div>\n          )}\n\n          <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n            <ScrollTo scrollOn=\"page\" />\n\n            <div className=\"flex flex-col-reverse md:flex-row justify-between items-center pb-4 md:pb-2 mb-4 md:mb-6 border-b border-gray-200 dark:border-gray-700\">\n              <Stats searchQuery={searchState.query} />\n              <div className=\"flex space-x-2 items-center flex-nowrap flex-shrink-0 md:ml-6\">\n                <div className=\"font-bold whitespace-nowrap flex-shrink-0\">\n                  Sort by:\n                </div>\n                <SortBy\n                  defaultRefinement=\"popular\"\n                  items={[\n                    {\n                      value: 'popular',\n                      label: 'Most Popular',\n                    },\n                    {value: 'reviews', label: 'Highest Rated'},\n                    {value: 'created', label: 'Recently Added'},\n                    {value: 'completed', label: 'Most Watched'},\n                  ]}\n                />\n              </div>\n            </div>\n            <div className=\"flex mb-10 pb-10\">\n              <div className=\"flex-shrink-0\">\n                {!sm && (\n                  <div className=\"pl-0 pt-0 p-10 flex flex-col space-y-6\">\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Topics</h3>\n                      <RefinementList limit={6} attribute=\"_tags\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                      <RefinementList limit={6} attribute=\"instructor_name\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div\n                key=\"search-results\"\n                className=\"col-span-4 sm:col-span-3 w-full\"\n              >\n                <NoSearchResults searchQuery={searchState.query} />\n                <Hits />\n              </div>\n            </div>\n          </div>\n          <div className=\"max-w-screen-xl mx-auto w-full flex items-center justify-center mt-8 mb-4 overflow-x-auto\">\n            <Pagination />\n          </div>\n          {children}\n        </div>\n      </InstantSearch>\n    </div>)\n  );\n}\n\nexport default Search\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/index.tsx","r":[0,11070],"t":"import React, {FunctionComponent} from 'react'\nimport Head from 'next/head'\nimport Hits from './hits'\nimport Stats from './stats'\nimport SearchBox from './search-box'\nimport RefinementList from './refinement-list'\nimport Pagination from './pagination'\nimport {\n  Configure,\n  InstantSearch,\n  ClearRefinements,\n  ScrollTo,\n  SortBy,\n} from 'react-instantsearch-dom'\n\nimport {get, isEqual, isEmpty, first} from 'lodash'\nimport {useToggle, useClickAway} from 'react-use'\n\nimport config from 'lib/config'\n\nimport InstructorsIndex from 'components/search/instructors/index'\nimport NoSearchResults from 'components/search/components/no-search-results'\n\nimport SearchCuratedEssential from './curated/curated-essential'\nimport SearchInstructorEssential from './instructors/instructor-essential'\nimport CuratedTopicsIndex from './curated'\nimport {searchQueryToArray} from '../../utils/search/topic-extractor'\nimport useBreakpoint from '../../utils/breakpoints'\n\nimport Spinner from 'components/spinner'\n\nconst ALGOLIA_INDEX_NAME =\n  process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME || 'content_production'\n\ntype SearchProps = {\n  searchClient?: any\n  searchState?: any\n  instructor?: any\n  topic?: any\n  loading?: boolean\n}\n\nconst Search: FunctionComponent<SearchProps> = ({\n  children = [],\n  searchClient,\n  searchState,\n  instructor,\n  topic,\n  loading,\n  ...rest\n}) => {\n  const [isFilterShown, setShowFilter] = useToggle(false)\n\n  const {sm} = useBreakpoint()\n\n  const noInstructorsSelected = (searchState: any) => {\n    return get(searchState, 'refinementList.instructor_name', []).length === 0\n  }\n\n  const noTopicsSelected = (searchState: any) => {\n    return (\n      isEmpty(topic) &&\n      get(searchState, 'refinementList._tags', []).length === 0\n    )\n  }\n\n  const isRefinementOn =\n    !isEmpty(get(searchState, 'refinementList.instructor_name')) ||\n    !isEmpty(get(searchState, 'refinementList._tags')) ||\n    !isEmpty(get(searchState, 'refinementList.access_state')) ||\n    !isEmpty(get(searchState, 'refinementList.type'))\n\n  const numberOfRefinements =\n    get(searchState, 'refinementList.instructor_name', []).length +\n    get(searchState, 'refinementList._tags', []).length +\n    get(searchState, 'refinementList.access_state', []).length +\n    get(searchState, 'refinementList.type', []).length\n\n  const refinementRef = React.useRef(null)\n  useClickAway(refinementRef, () => setShowFilter(false))\n\n  const searchBoxPlaceholder = !isEmpty(instructor)\n    ? `Search resources by ${instructor.full_name}`\n    : undefined\n\n  const shouldDisplayLandingPageForTopics = (topic: string) => {\n    const terms = searchQueryToArray(searchState)\n\n    return (\n      (isEmpty(searchState.query) ||\n        (terms.includes(topic) && terms.length === 1)) &&\n      isEmpty(searchState.page) &&\n      noInstructorsSelected(searchState)\n    )\n  }\n\n  const shouldDisplayLandingPageForInstructor = (slug: string) => {\n    return (\n      isEmpty(searchState.query) &&\n      isEmpty(searchState.page) &&\n      noTopicsSelected(searchState)\n    )\n  }\n\n  const InstructorCuratedPage =\n    instructor &&\n    (InstructorsIndex[instructor.slug] || SearchInstructorEssential)\n  const CuratedTopicPage =\n    topic && (CuratedTopicsIndex[topic.name] || SearchCuratedEssential)\n\n  return (\n    (<div className=\"max-w-screen-xl mx-auto\">\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/instantsearch.css@7.3.1/themes/algolia-min.css\"\n        />\n      </Head>\n      <InstantSearch\n        indexName={ALGOLIA_INDEX_NAME}\n        searchClient={searchClient}\n        searchState={searchState}\n        {...rest}\n      >\n        <Configure hitsPerPage={config.searchResultCount} />\n        <div className=\"space-y-8 bg-gray-50 dark:bg-gray-900\">\n          <div ref={refinementRef}>\n            <header className=\"flex\">\n              <SearchBox\n                placeholder={searchBoxPlaceholder}\n                className=\"w-full \"\n              />\n              {sm && (\n                <button\n                  onClick={setShowFilter}\n                  className={`ml-2 flex items-center sm:px-5 px-3 py-2 rounded-md border-2 ${\n                    isRefinementOn ? 'border-blue-400' : 'border-transparent'\n                  } focus:border-blue-600 focus:outline-none`}\n                >\n                  <span className=\"sm:block hidden\">Filter</span>\n                  {numberOfRefinements > 0 ? (\n                    <div className=\"-mr-1 w-6 h-6 transform scale-75 flex items-center justify-center bg-blue-600 rounded-full text-white text-xs font-bold\">\n                      {numberOfRefinements}\n                    </div>\n                  ) : (\n                    <>\n                      {isFilterShown ? (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" width=\"14\" height=\"14\" viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 0 1 1.414 0L10 8.586l4.293-4.293a1 1 0 1 1 1.414 1.414L11.414 10l4.293 4.293a1 1 0 0 1-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 0 1-1.414-1.414L8.586 10 4.293 5.707a1 1 0 0 1 0-1.414z\" fill=\"currentColor\"/></g></svg>)\n                      ) : (\n                        // prettier-ignore\n                        (<svg className=\"sm:ml-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.5\" transform=\"translate(1 1)\"><line x1=\"3.5\" x2=\"3.5\" y1=\"5\"/><line x1=\".5\" x2=\"3.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"5.5\" x2=\"11.5\" y1=\"2.5\" y2=\"2.5\"/><line x1=\"8.5\" x2=\"8.5\" y1=\"10\" y2=\"5\"/><line x1=\"11.5\" x2=\"8.5\" y1=\"7.5\" y2=\"7.5\"/><line x1=\"6.5\" x2=\".5\" y1=\"7.5\" y2=\"7.5\"/></g></svg>)\n                      )}\n                    </>\n                  )}\n                </button>\n              )}\n            </header>\n            {sm && (\n              <div\n                className={`overflow-hidden rounded-md bg-white dark:bg-gray-800 border border-transparent shadow-lg ${\n                  isFilterShown\n                    ? 'h-auto border-gray-200 dark:border-gray-700 my-2'\n                    : 'h-0 border-none my-0'\n                }`}\n              >\n                <div\n                  className={`${\n                    isFilterShown ? 'top-full ' : 'top-0'\n                  } sm:p-8 p-5 grid sm:grid-cols-3 grid-cols-1 sm:gap-8 gap-5 relative`}\n                >\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Topics</h3>\n                    <RefinementList limit={6} attribute=\"_tags\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                    <RefinementList limit={6} attribute=\"instructor_name\" />\n                  </div>\n                  <div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                  {isRefinementOn && (\n                    <button\n                      className=\"absolute top-0 right-0 mr-3 mt-3 text-blue-600 dark:text-blue-300\"\n                      onClick={setShowFilter}\n                    >\n                      <ClearRefinements />\n                    </button>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          {!isEmpty(instructor) && (\n            <div className=\"mb-10 pb-8\">\n              {shouldDisplayLandingPageForInstructor(instructor.slug) && (\n                <InstructorCuratedPage instructor={instructor} />\n              )}\n            </div>\n          )}\n\n          {loading && (\n            <div className=\"flex justify-center\">\n              <Spinner size={12} />\n            </div>\n          )}\n\n          {!isEmpty(topic) && (\n            <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n              {CuratedTopicPage &&\n                shouldDisplayLandingPageForTopics(topic.name) && (\n                  <CuratedTopicPage topic={topic} />\n                )}\n            </div>\n          )}\n\n          <div className=\"dark:bg-gray-900 bg-gray-50  md:-mt-5\">\n            <ScrollTo scrollOn=\"page\" />\n\n            <div className=\"flex flex-col-reverse md:flex-row justify-between items-center pb-4 md:pb-2 mb-4 md:mb-6 border-b border-gray-200 dark:border-gray-700\">\n              <Stats searchQuery={searchState.query} />\n              <div className=\"flex space-x-2 items-center flex-nowrap flex-shrink-0 md:ml-6\">\n                <div className=\"font-bold whitespace-nowrap flex-shrink-0\">\n                  Sort by:\n                </div>\n                <SortBy\n                  defaultRefinement=\"popular\"\n                  items={[\n                    {\n                      value: 'popular',\n                      label: 'Most Popular',\n                    },\n                    {value: 'reviews', label: 'Highest Rated'},\n                    {value: 'created', label: 'Recently Added'},\n                    {value: 'completed', label: 'Most Watched'},\n                  ]}\n                />\n              </div>\n            </div>\n            <div className=\"flex mb-10 pb-10\">\n              <div className=\"flex-shrink-0\">\n                {!sm && (\n                  <div className=\"pl-0 pt-0 p-10 flex flex-col space-y-6\">\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Topics</h3>\n                      <RefinementList limit={6} attribute=\"_tags\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Instructors</h3>\n                      <RefinementList limit={6} attribute=\"instructor_name\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Content Type</h3>\n                      <RefinementList attribute=\"type\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-1\">Free or Pro</h3>\n                      <RefinementList attribute=\"access_state\" />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div\n                key=\"search-results\"\n                className=\"col-span-4 sm:col-span-3 w-full\"\n              >\n                <NoSearchResults searchQuery={searchState.query} />\n                <Hits />\n              </div>\n            </div>\n          </div>\n          <div className=\"max-w-screen-xl mx-auto w-full flex items-center justify-center mt-8 mb-4 overflow-x-auto\">\n            <Pagination />\n          </div>\n          {children}\n        </div>\n      </InstantSearch>\n    </div>)\n  );\n}\n\nexport default Search\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/refinement-list.tsx","r":[0,9152],"t":"import React, {FunctionComponent} from 'react'\nimport {Highlight, connectRefinementList} from 'react-instantsearch-dom'\nimport {track} from '../../utils/analytics'\n\ntype RefinementListProps = {\n  items?: any[]\n  item?: any\n  isFromSearch: boolean\n  refine?: any\n  searchForItems?: any\n  createURL: any\n  attribute?: string\n  isShown?: boolean\n  tabIndex?: number\n}\n\nconst TagItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/tags/${item.label}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for topic', {\n            topic: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">{data && <img src={data.image_32_url} />}</div> */}\n          {/* ${isFromSearch && 'font-bold'} */}\n          <div className={`pl-2`}>{item.label}</div>\n          {item.isRefined && ( // prettier-ignore\n            (<svg\n              className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g fill=\"none\">\n                <path\n                  fillRule=\"evenodd\"\n                  clipRule=\"evenodd\"\n                  d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                  fill=\"currentColor\"\n                />\n              </g>\n            </svg>)\n          )}\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst InstructorItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/instructors/${nameToSlug(item.label)}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for instructor', {\n            instructor: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">\n              <img className=\"rounded-full\" src={data.avatar_32_url} />\n            </div> */}\n          <div className={`w-full flex items-center justify-between`}>\n            <span>{item.label}</span>\n            {item.isRefined && ( // prettier-ignore\n              (<svg\n                className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g fill=\"none\">\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                    fill=\"currentColor\"\n                  />\n                </g>\n              </svg>)\n            )}\n          </div>\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst Item: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for type', {\n            type: item.value,\n          })\n        }}\n      >\n        {isFromSearch ? <Highlight attribute=\"label\" hit={item} /> : item.label}{' '}\n        {item.isRefined && ( // prettier-ignore\n          (<svg\n            className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                fill=\"currentColor\"\n              />\n            </g>\n          </svg>)\n        )}\n      </a>\n    </li>)\n  );\n}\n\nconst RefinementList: FunctionComponent<RefinementListProps> = ({\n  items,\n  isFromSearch,\n  refine,\n  searchForItems,\n  createURL,\n  attribute,\n  isShown,\n}) => {\n  function label(attribute: any) {\n    switch (attribute) {\n      case '_tags':\n        return 'topics'\n      case 'instructor_name':\n        return 'instructors'\n      case 'access_state':\n        return 'free v pro'\n      case 'type':\n        return 'type'\n      default:\n        break\n    }\n  }\n  const tabIndex = isShown ? 0 : -1\n\n  const propsNotSearched = ['type', 'access_state']\n\n  return (\n    <div>\n      <div className=\"relative\">\n        {!propsNotSearched.includes(attribute || '') && (\n          <>\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              {/* prettier-ignore */}\n              <svg className=\"text-gray-500\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"M21 21l-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>\n            </div>\n            <input\n              tabIndex={tabIndex}\n              type=\"search\"\n              className=\"form-input text-black dark:text-white bg-gray-100 dark:bg-gray-800 border border-transparent dark:border-gray-700 rounded-md px-3 pl-8 py-2 w-full\"\n              placeholder={`Search ${label(attribute)}`}\n              onChange={(event) => searchForItems(event.currentTarget.value)}\n            />\n          </>\n        )}\n      </div>\n      <ul className={`${attribute !== 'type' && 'mt-2'}`}>\n        {items &&\n          items.map((item) => {\n            switch (attribute) {\n              case `_tags`:\n                return (\n                  <TagItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `instructor_name`:\n                return (\n                  <InstructorItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `type`:\n                if (item.label === 'playlist') item.label = 'course'\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `access_state`:\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              default:\n                return null\n            }\n          })}\n      </ul>\n    </div>\n  )\n}\n\nconst CustomRefinementList = connectRefinementList(RefinementList)\n\nexport default CustomRefinementList\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/refinement-list.tsx","r":[0,9152],"t":"import React, {FunctionComponent} from 'react'\nimport {Highlight, connectRefinementList} from 'react-instantsearch-dom'\nimport {track} from '../../utils/analytics'\n\ntype RefinementListProps = {\n  items?: any[]\n  item?: any\n  isFromSearch: boolean\n  refine?: any\n  searchForItems?: any\n  createURL: any\n  attribute?: string\n  isShown?: boolean\n  tabIndex?: number\n}\n\nconst TagItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/tags/${item.label}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for topic', {\n            topic: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">{data && <img src={data.image_32_url} />}</div> */}\n          {/* ${isFromSearch && 'font-bold'} */}\n          <div className={`pl-2`}>{item.label}</div>\n          {item.isRefined && ( // prettier-ignore\n            (<svg\n              className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g fill=\"none\">\n                <path\n                  fillRule=\"evenodd\"\n                  clipRule=\"evenodd\"\n                  d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                  fill=\"currentColor\"\n                />\n              </g>\n            </svg>)\n          )}\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst InstructorItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/instructors/${nameToSlug(item.label)}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for instructor', {\n            instructor: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">\n              <img className=\"rounded-full\" src={data.avatar_32_url} />\n            </div> */}\n          <div className={`w-full flex items-center justify-between`}>\n            <span>{item.label}</span>\n            {item.isRefined && ( // prettier-ignore\n              (<svg\n                className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g fill=\"none\">\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                    fill=\"currentColor\"\n                  />\n                </g>\n              </svg>)\n            )}\n          </div>\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst Item: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for type', {\n            type: item.value,\n          })\n        }}\n      >\n        {isFromSearch ? <Highlight attribute=\"label\" hit={item} /> : item.label}{' '}\n        {item.isRefined && ( // prettier-ignore\n          (<svg\n            className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                fill=\"currentColor\"\n              />\n            </g>\n          </svg>)\n        )}\n      </a>\n    </li>)\n  );\n}\n\nconst RefinementList: FunctionComponent<RefinementListProps> = ({\n  items,\n  isFromSearch,\n  refine,\n  searchForItems,\n  createURL,\n  attribute,\n  isShown,\n}) => {\n  function label(attribute: any) {\n    switch (attribute) {\n      case '_tags':\n        return 'topics'\n      case 'instructor_name':\n        return 'instructors'\n      case 'access_state':\n        return 'free v pro'\n      case 'type':\n        return 'type'\n      default:\n        break\n    }\n  }\n  const tabIndex = isShown ? 0 : -1\n\n  const propsNotSearched = ['type', 'access_state']\n\n  return (\n    <div>\n      <div className=\"relative\">\n        {!propsNotSearched.includes(attribute || '') && (\n          <>\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              {/* prettier-ignore */}\n              <svg className=\"text-gray-500\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"M21 21l-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>\n            </div>\n            <input\n              tabIndex={tabIndex}\n              type=\"search\"\n              className=\"form-input text-black dark:text-white bg-gray-100 dark:bg-gray-800 border border-transparent dark:border-gray-700 rounded-md px-3 pl-8 py-2 w-full\"\n              placeholder={`Search ${label(attribute)}`}\n              onChange={(event) => searchForItems(event.currentTarget.value)}\n            />\n          </>\n        )}\n      </div>\n      <ul className={`${attribute !== 'type' && 'mt-2'}`}>\n        {items &&\n          items.map((item) => {\n            switch (attribute) {\n              case `_tags`:\n                return (\n                  <TagItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `instructor_name`:\n                return (\n                  <InstructorItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `type`:\n                if (item.label === 'playlist') item.label = 'course'\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `access_state`:\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              default:\n                return null\n            }\n          })}\n      </ul>\n    </div>\n  )\n}\n\nconst CustomRefinementList = connectRefinementList(RefinementList)\n\nexport default CustomRefinementList\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/refinement-list.tsx","r":[0,9152],"t":"import React, {FunctionComponent} from 'react'\nimport {Highlight, connectRefinementList} from 'react-instantsearch-dom'\nimport {track} from '../../utils/analytics'\n\ntype RefinementListProps = {\n  items?: any[]\n  item?: any\n  isFromSearch: boolean\n  refine?: any\n  searchForItems?: any\n  createURL: any\n  attribute?: string\n  isShown?: boolean\n  tabIndex?: number\n}\n\nconst TagItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/tags/${item.label}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for topic', {\n            topic: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">{data && <img src={data.image_32_url} />}</div> */}\n          {/* ${isFromSearch && 'font-bold'} */}\n          <div className={`pl-2`}>{item.label}</div>\n          {item.isRefined && ( // prettier-ignore\n            (<svg\n              className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <g fill=\"none\">\n                <path\n                  fillRule=\"evenodd\"\n                  clipRule=\"evenodd\"\n                  d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                  fill=\"currentColor\"\n                />\n              </g>\n            </svg>)\n          )}\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst InstructorItem: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  // const {data} = useSwr(\n  //   `https://egghead.io/api/v1/instructors/${nameToSlug(item.label)}`,\n  //   async (url) => {\n  //     const result = await fetch(url).then((response) => response.json())\n  //     return result\n  //   },\n  // )\n\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for instructor', {\n            instructor: item.value,\n          })\n        }}\n      >\n        <div className=\"flex items-center\">\n          {/* <div className=\"w-6\">\n              <img className=\"rounded-full\" src={data.avatar_32_url} />\n            </div> */}\n          <div className={`w-full flex items-center justify-between`}>\n            <span>{item.label}</span>\n            {item.isRefined && ( // prettier-ignore\n              (<svg\n                className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g fill=\"none\">\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                    fill=\"currentColor\"\n                  />\n                </g>\n              </svg>)\n            )}\n          </div>\n        </div>\n      </a>\n    </li>)\n  );\n}\n\nconst Item: FunctionComponent<RefinementListProps> = ({\n  item,\n  isFromSearch,\n  refine,\n  createURL,\n  tabIndex,\n}) => {\n  return (\n    (<li key={item.label}>\n      <a\n        tabIndex={tabIndex}\n        className={`block hover:bg-gray-100 sm:dark:hover:bg-gray-800 dark:hover:bg-gray-900 px-2 py-2 rounded-md transition ease-in-out duration-150 ${\n          item.isRefined\n            ? 'text-blue-600 dark:text-blue-300 font-semibold'\n            : 'font-normal'\n        }`}\n        href={createURL(item.value)}\n        onClick={(event) => {\n          event.preventDefault()\n          refine(item.value)\n          track('search refined for type', {\n            type: item.value,\n          })\n        }}\n      >\n        {isFromSearch ? <Highlight attribute=\"label\" hit={item} /> : item.label}{' '}\n        {item.isRefined && ( // prettier-ignore\n          (<svg\n            className=\"ml-2 inline text-blue-600 dark:text-blue-300\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g fill=\"none\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M16.707 5.293a1 1 0 0 1 0 1.414l-8 8a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 1.414-1.414L8 12.586l7.293-7.293a1 1 0 0 1 1.414 0z\"\n                fill=\"currentColor\"\n              />\n            </g>\n          </svg>)\n        )}\n      </a>\n    </li>)\n  );\n}\n\nconst RefinementList: FunctionComponent<RefinementListProps> = ({\n  items,\n  isFromSearch,\n  refine,\n  searchForItems,\n  createURL,\n  attribute,\n  isShown,\n}) => {\n  function label(attribute: any) {\n    switch (attribute) {\n      case '_tags':\n        return 'topics'\n      case 'instructor_name':\n        return 'instructors'\n      case 'access_state':\n        return 'free v pro'\n      case 'type':\n        return 'type'\n      default:\n        break\n    }\n  }\n  const tabIndex = isShown ? 0 : -1\n\n  const propsNotSearched = ['type', 'access_state']\n\n  return (\n    <div>\n      <div className=\"relative\">\n        {!propsNotSearched.includes(attribute || '') && (\n          <>\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              {/* prettier-ignore */}\n              <svg className=\"text-gray-500\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"M21 21l-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></g></svg>\n            </div>\n            <input\n              tabIndex={tabIndex}\n              type=\"search\"\n              className=\"form-input text-black dark:text-white bg-gray-100 dark:bg-gray-800 border border-transparent dark:border-gray-700 rounded-md px-3 pl-8 py-2 w-full\"\n              placeholder={`Search ${label(attribute)}`}\n              onChange={(event) => searchForItems(event.currentTarget.value)}\n            />\n          </>\n        )}\n      </div>\n      <ul className={`${attribute !== 'type' && 'mt-2'}`}>\n        {items &&\n          items.map((item) => {\n            switch (attribute) {\n              case `_tags`:\n                return (\n                  <TagItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `instructor_name`:\n                return (\n                  <InstructorItem\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `type`:\n                if (item.label === 'playlist') item.label = 'course'\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              case `access_state`:\n                return (\n                  <Item\n                    tabIndex={tabIndex}\n                    key={item.label}\n                    item={item}\n                    isFromSearch={isFromSearch}\n                    refine={refine}\n                    createURL={createURL}\n                  />\n                )\n              default:\n                return null\n            }\n          })}\n      </ul>\n    </div>\n  )\n}\n\nconst CustomRefinementList = connectRefinementList(RefinementList)\n\nexport default CustomRefinementList\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/stats.tsx","r":[0,791],"t":"import React from 'react'\nimport {connectStats} from 'react-instantsearch-dom'\n\ntype CustomStatsProps = {\n  nbHits: number\n  searchQuery: string\n}\n\nconst CustomStats: React.FunctionComponent<CustomStatsProps> = ({\n  nbHits,\n  searchQuery,\n}) => {\n  return !searchQuery || /^\\s*$/.test(searchQuery) ? (\n    <div />\n  ) : (\n    <div className=\"flex items-center flex-nowrap overflow-hidden max-w-full flex-grow mt-5 md:mt-0 text-gray-700 dark:text-gray-400\">\n      <div className=\"font-bold whitespace-nowrap\">\n        {nbHits.toLocaleString()} results\n      </div>\n      <div className=\"ml-1 whitespace-nowrap flex overflow-hidden\">\n        found for \"<div className=\"truncate\">{searchQuery}</div>\"\n      </div>\n    </div>\n  );\n}\n\nconst Stats = connectStats(CustomStats)\n\nexport default Stats\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/stats.tsx","r":[0,791],"t":"import React from 'react'\nimport {connectStats} from 'react-instantsearch-dom'\n\ntype CustomStatsProps = {\n  nbHits: number\n  searchQuery: string\n}\n\nconst CustomStats: React.FunctionComponent<CustomStatsProps> = ({\n  nbHits,\n  searchQuery,\n}) => {\n  return !searchQuery || /^\\s*$/.test(searchQuery) ? (\n    <div />\n  ) : (\n    <div className=\"flex items-center flex-nowrap overflow-hidden max-w-full flex-grow mt-5 md:mt-0 text-gray-700 dark:text-gray-400\">\n      <div className=\"font-bold whitespace-nowrap\">\n        {nbHits.toLocaleString()} results\n      </div>\n      <div className=\"ml-1 whitespace-nowrap flex overflow-hidden\">\n        found for \"<div className=\"truncate\">{searchQuery}</div>\"\n      </div>\n    </div>\n  );\n}\n\nconst Stats = connectStats(CustomStats)\n\nexport default Stats\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/stats.tsx","r":[0,791],"t":"import React from 'react'\nimport {connectStats} from 'react-instantsearch-dom'\n\ntype CustomStatsProps = {\n  nbHits: number\n  searchQuery: string\n}\n\nconst CustomStats: React.FunctionComponent<CustomStatsProps> = ({\n  nbHits,\n  searchQuery,\n}) => {\n  return !searchQuery || /^\\s*$/.test(searchQuery) ? (\n    <div />\n  ) : (\n    <div className=\"flex items-center flex-nowrap overflow-hidden max-w-full flex-grow mt-5 md:mt-0 text-gray-700 dark:text-gray-400\">\n      <div className=\"font-bold whitespace-nowrap\">\n        {nbHits.toLocaleString()} results\n      </div>\n      <div className=\"ml-1 whitespace-nowrap flex overflow-hidden\">\n        found for \"<div className=\"truncate\">{searchQuery}</div>\"\n      </div>\n    </div>\n  );\n}\n\nconst Stats = connectStats(CustomStats)\n\nexport default Stats\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/survey/header-button-survey.tsx","r":[0,3138],"t":"import * as React from 'react'\nimport useCio from 'hooks/use-cio'\nimport Link from 'next/link'\nimport {Card} from 'components/card'\nimport Markdown from 'react-markdown'\nimport {SurveyQuestion, surveyReducer, SurveyState} from './survey-reducer'\nimport {HeaderButtonShapedLink} from 'components/app/header/header-button-shaped-link'\n\nconst QuestionHeading: React.FunctionComponent<{question: SurveyQuestion}> = ({\n  question,\n}) => {\n  return (\n    <>\n      <h2 className=\"text-xl mb-3 font-bold dark:text-gray-100 text-gray-700\">\n        <Markdown>{question.heading}</Markdown>\n      </h2>\n      <h3 className=\"text-lg mb-4\">\n        <Markdown>{question.subheading}</Markdown>\n      </h3>\n    </>\n  )\n}\n\ntype HeaderButtonProps = {\n  initialState: SurveyState\n  subscriberRequired?: boolean\n  className?: string\n  alternative?: any\n  variant?: string\n}\n\nconst HeaderButtonCTA: React.FC<HeaderButtonProps> = ({\n  subscriberRequired = false,\n  initialState,\n  className,\n  alternative,\n  variant = 'header',\n}) => {\n  const [state, dispatch] = React.useReducer(surveyReducer, initialState)\n  const {subscriber, loadingSubscriber} = useCio()\n\n  React.useEffect(() => {\n    dispatch({type: `load`, subscriber, loadingSubscriber})\n  }, [subscriber, loadingSubscriber])\n\n  const onAnswer = (answer?: string) => {\n    dispatch({type: 'answered', answer})\n  }\n\n  if (\n    state.question &&\n    !subscriberRequired &&\n    !subscriber &&\n    !loadingSubscriber &&\n    state.question.url\n  ) {\n    return (\n      <HeaderButtonShapedLink\n        label={state.question.heading}\n        url={state.question.url}\n      />\n    )\n  }\n\n  className = className || `border p-6 mb-16`\n\n  return !state.question || state.closed ? (\n    alternative || null\n  ) : variant === 'header' && state.question.url ? (\n    <HeaderButtonShapedLink\n      label={state.question.heading}\n      url={state.question.url}\n      onClick={() => {\n        onAnswer('maybe')\n      }}\n    />\n  ) : (\n    <Card>\n      <div className={className}>\n        {state.question.type === 'cta-link' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.url && (\n              <Link\n                href={state.question.url}\n                onClick={() => {\n                  onAnswer('maybe')\n                }}\n                className=\"inline-flex justify-center items-center px-5 py-3 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\">\n\n                {state.question.button_label}\n\n              </Link>\n            )}\n          </div>\n        )}\n\n        <div className=\"w-100 flex items-center justify-end mt-2\">\n          <button\n            className=\"rounded text-xs px-2 py-1 flex justify-center items-center dark:text-gray-900 dark:bg-gray-600 bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out \"\n            onClick={() => {\n              dispatch({type: 'dismiss'})\n            }}\n          >\n            close\n          </button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default HeaderButtonCTA\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/survey/header-button-survey.tsx","r":[0,3138],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport useCio from 'hooks/use-cio'\nimport Link from 'next/link'\nimport {Card} from 'components/card'\nimport Markdown from 'react-markdown'\nimport {SurveyQuestion, surveyReducer, SurveyState} from './survey-reducer'\nimport {HeaderButtonShapedLink} from 'components/app/header/header-button-shaped-link'\n\nconst QuestionHeading: React.FunctionComponent<{question: SurveyQuestion}> = ({\n  question,\n}) => {\n  return (\n    <>\n      <h2 className=\"text-xl mb-3 font-bold dark:text-gray-100 text-gray-700\">\n        <Markdown>{question.heading}</Markdown>\n      </h2>\n      <h3 className=\"text-lg mb-4\">\n        <Markdown>{question.subheading}</Markdown>\n      </h3>\n    </>\n  )\n}\n\ntype HeaderButtonProps = {\n  initialState: SurveyState\n  subscriberRequired?: boolean\n  className?: string\n  alternative?: any\n  variant?: string\n}\n\nconst HeaderButtonCTA: React.FC<HeaderButtonProps> = ({\n  subscriberRequired = false,\n  initialState,\n  className,\n  alternative,\n  variant = 'header',\n}) => {\n  const [state, dispatch] = React.useReducer(surveyReducer, initialState)\n  const {subscriber, loadingSubscriber} = useCio()\n\n  React.useEffect(() => {\n    dispatch({type: `load`, subscriber, loadingSubscriber})\n  }, [subscriber, loadingSubscriber])\n\n  const onAnswer = (answer?: string) => {\n    dispatch({type: 'answered', answer})\n  }\n\n  if (\n    state.question &&\n    !subscriberRequired &&\n    !subscriber &&\n    !loadingSubscriber &&\n    state.question.url\n  ) {\n    return (\n      <HeaderButtonShapedLink\n        label={state.question.heading}\n        url={state.question.url}\n      />\n    )\n  }\n\n  className = className || `border p-6 mb-16`\n\n  return !state.question || state.closed ? (\n    alternative || null\n  ) : variant === 'header' && state.question.url ? (\n    <HeaderButtonShapedLink\n      label={state.question.heading}\n      url={state.question.url}\n      onClick={() => {\n        onAnswer('maybe')\n      }}\n    />\n  ) : (\n    <Card>\n      <div className={className}>\n        {state.question.type === 'cta-link' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.url && (\n              <Link href={state.question.url}>\n                <a\n                  onClick={() => {\n                    onAnswer('maybe')\n                  }}\n                  className=\"inline-flex justify-center items-center px-5 py-3 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\"\n                >\n                  {state.question.button_label}\n                </a>\n              </Link>\n            )}\n          </div>\n        )}\n\n        <div className=\"w-100 flex items-center justify-end mt-2\">\n          <button\n            className=\"rounded text-xs px-2 py-1 flex justify-center items-center dark:text-gray-900 dark:bg-gray-600 bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out \"\n            onClick={() => {\n              dispatch({type: 'dismiss'})\n            }}\n          >\n            close\n          </button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default HeaderButtonCTA\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/survey/survey.tsx","r":[0,4874],"t":"import * as React from 'react'\nimport MultipleChoiceQuestion from './questions/multiple-choice-question'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport MultiLine from './questions/multi-line'\nimport Markdown from 'react-markdown'\nimport useCio from 'hooks/use-cio'\nimport {surveyReducer, SurveyQuestion, SurveyState} from './survey-reducer'\nimport {Card} from 'components/card'\n\nconst QuestionHeading: React.FunctionComponent<{question: SurveyQuestion}> = ({\n  question,\n}) => {\n  return (\n    <>\n      <h2 className=\"text-xl mb-3 font-bold dark:text-gray-100 text-gray-700\">\n        <Markdown>{question.heading}</Markdown>\n      </h2>\n      <h3 className=\"text-lg mb-4\">\n        <Markdown>{question.subheading}</Markdown>\n      </h3>\n    </>\n  )\n}\n\nconst Survey: React.FunctionComponent<{\n  className?: any\n  alternative?: JSX.Element\n  initialSurveyState: SurveyState\n}> = ({className, alternative, initialSurveyState}) => {\n  const [state, dispatch] = React.useReducer(surveyReducer, initialSurveyState)\n  const {subscriber, loadingSubscriber} = useCio()\n\n  React.useEffect(() => {\n    dispatch({type: `load`, subscriber, loadingSubscriber})\n  }, [subscriber, loadingSubscriber])\n\n  const onAnswer = (answer?: string) => {\n    if (!state.question || state.question.final) {\n      dispatch({type: 'closed'})\n    } else {\n      dispatch({type: 'answered', answer})\n    }\n  }\n\n  className = className || `border p-6 mb-16`\n\n  return !state.question || state.closed ? (\n    alternative || null\n  ) : (\n    <Card>\n      <div className={className}>\n        {state.question.type === 'multiple-choice' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <MultipleChoiceQuestion\n              onAnswer={onAnswer}\n              question={state.question}\n            />\n          </div>\n        )}\n        {state.question.type === 'multi-line' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <MultiLine question={state.question} onAnswer={onAnswer} />\n          </div>\n        )}\n        {state.question.type === 'cta-done' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              {state.question.button_label}\n            </button>\n          </div>\n        )}\n        {state.question.type === 'cta-email' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.image && (\n              <Image\n                className=\"rounded-full\"\n                width={128}\n                height={128}\n                src={state.question.image}\n              />\n            )}\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              {state.question.button_label}\n            </button>\n          </div>\n        )}\n        {state.question.type === 'cta-link' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.url && (\n              <Link\n                href={state.question.url}\n                onClick={() => onAnswer()}\n                target=\"_blank\"\n                className=\"inline-flex justify-center items-center px-5 py-3 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\">\n\n                {state.question.button_label}\n\n              </Link>\n            )}\n          </div>\n        )}\n        {state.question.type === 'opt-out' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              close\n            </button>\n          </div>\n        )}\n        <div className=\"w-100 flex items-center justify-end mt-2\">\n          <button\n            className=\"rounded text-xs px-2 py-1 flex justify-center items-center dark:text-gray-900 dark:bg-gray-600 bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out \"\n            onClick={() => {\n              dispatch({type: 'dismiss'})\n            }}\n          >\n            close\n          </button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default Survey\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/survey/survey.tsx","r":[0,4874],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport MultipleChoiceQuestion from './questions/multiple-choice-question'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport MultiLine from './questions/multi-line'\nimport Markdown from 'react-markdown'\nimport useCio from 'hooks/use-cio'\nimport {surveyReducer, SurveyQuestion, SurveyState} from './survey-reducer'\nimport {Card} from 'components/card'\n\nconst QuestionHeading: React.FunctionComponent<{question: SurveyQuestion}> = ({\n  question,\n}) => {\n  return (\n    <>\n      <h2 className=\"text-xl mb-3 font-bold dark:text-gray-100 text-gray-700\">\n        <Markdown>{question.heading}</Markdown>\n      </h2>\n      <h3 className=\"text-lg mb-4\">\n        <Markdown>{question.subheading}</Markdown>\n      </h3>\n    </>\n  )\n}\n\nconst Survey: React.FunctionComponent<{\n  className?: any\n  alternative?: JSX.Element\n  initialSurveyState: SurveyState\n}> = ({className, alternative, initialSurveyState}) => {\n  const [state, dispatch] = React.useReducer(surveyReducer, initialSurveyState)\n  const {subscriber, loadingSubscriber} = useCio()\n\n  React.useEffect(() => {\n    dispatch({type: `load`, subscriber, loadingSubscriber})\n  }, [subscriber, loadingSubscriber])\n\n  const onAnswer = (answer?: string) => {\n    if (!state.question || state.question.final) {\n      dispatch({type: 'closed'})\n    } else {\n      dispatch({type: 'answered', answer})\n    }\n  }\n\n  className = className || `border p-6 mb-16`\n\n  return !state.question || state.closed ? (\n    alternative || null\n  ) : (\n    <Card>\n      <div className={className}>\n        {state.question.type === 'multiple-choice' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <MultipleChoiceQuestion\n              onAnswer={onAnswer}\n              question={state.question}\n            />\n          </div>\n        )}\n        {state.question.type === 'multi-line' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <MultiLine question={state.question} onAnswer={onAnswer} />\n          </div>\n        )}\n        {state.question.type === 'cta-done' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              {state.question.button_label}\n            </button>\n          </div>\n        )}\n        {state.question.type === 'cta-email' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.image && (\n              <Image\n                className=\"rounded-full\"\n                width={128}\n                height={128}\n                src={state.question.image}\n              />\n            )}\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              {state.question.button_label}\n            </button>\n          </div>\n        )}\n        {state.question.type === 'cta-link' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            {state.question.url && (\n              <Link href={state.question.url}>\n                <a\n                  onClick={() => onAnswer()}\n                  target=\"_blank\"\n                  className=\"inline-flex justify-center items-center px-5 py-3 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\"\n                >\n                  {state.question.button_label}\n                </a>\n              </Link>\n            )}\n          </div>\n        )}\n        {state.question.type === 'opt-out' && (\n          <div>\n            <QuestionHeading question={state.question} />\n            <button\n              className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\"\n              onClick={() => onAnswer()}\n            >\n              close\n            </button>\n          </div>\n        )}\n        <div className=\"w-100 flex items-center justify-end mt-2\">\n          <button\n            className=\"rounded text-xs px-2 py-1 flex justify-center items-center dark:text-gray-900 dark:bg-gray-600 bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out \"\n            onClick={() => {\n              dispatch({type: 'dismiss'})\n            }}\n          >\n            close\n          </button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default Survey\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/team/account-ownership-transfer.tsx","r":[0,4643],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport toast from 'react-hot-toast'\nimport {AUTH_DOMAIN, getAuthorizationHeader} from '../../utils/auth'\nimport axios from 'axios'\nimport {track} from 'utils/analytics'\nimport {useViewer} from 'context/viewer-context'\nimport {useMachine} from '@xstate/react'\nimport strongConfirmationDialogMachine from 'machines/strong-confirmation-dialog-machine'\nimport TransferOwnershipConfirmDialog from 'components/team/transfer-ownership-confirm-dialog'\n\nconst sendOwnershipTransferInvite = async (\n  inviteeEmail: string,\n  accountId: number | undefined,\n) => {\n  const account_id = accountId || ''\n\n  return axios.post(\n    `${AUTH_DOMAIN}/api/v1/account_ownership_transfer_invitations`,\n    {account_id, invitee_email: inviteeEmail},\n    {\n      headers: {...getAuthorizationHeader()},\n    },\n  )\n}\n\nconst AccountOwnershipTransfer = ({accountId}: {accountId: number}) => {\n  const {viewer} = useViewer()\n  const [inviteeEmail, setInviteeEmail] = React.useState<string>('')\n\n  const invitationDetails = {\n    accountId,\n    inviteeEmail,\n    ownerId: viewer?.id as string | undefined,\n  }\n\n  const [current, send] = useMachine(strongConfirmationDialogMachine, {\n    actions: {\n      onSuccess: (context) => {\n        setInviteeEmail('')\n\n        track(\n          'sent account ownership transfer invite',\n          context.invitationDetails,\n        )\n\n        toast.success(\n          'Your account ownership transfer invitation has been sent.',\n          {\n            icon: '✅',\n          },\n        )\n      },\n      onFail: (context) => {\n        track('encountered error transfering account ownership', {\n          ...context.invitationDetails,\n          error: context.errorMessage,\n        })\n      },\n    },\n  })\n\n  const loading = current.matches({open: 'executingAction'})\n\n  return (\n    <>\n      <TransferOwnershipConfirmDialog\n        current={current}\n        inviteeEmail={current.context.doubleConfirmText || ''}\n        inviteeEmailConfirmation={current.context.inputConfirmText}\n        onClose={() => {\n          send('CANCEL')\n        }}\n        onConfirm={() => {\n          send('CONFIRM')\n        }}\n        handleInputChange={(value) => {\n          send({type: 'CHANGE', inputConfirmText: value})\n        }}\n      />\n      <h2 className=\"font-semibold text-xl mt-16\">\n        Account Ownership Transfer\n      </h2>\n      <p>\n        You are current the owner of this egghead team account. You can transfer\n        that ownership to another egghead user. Submit their egghead user email\n        address with this form and we will email them an invite. Once they\n        accept the invite, ownership of this team account will be tranferred\n        from you to them.\n      </p>\n      <div className=\"flex flex-col space-y-2 mt-6\">\n        <input\n          className=\"bg-gray-50 dark:bg-gray-800 focus:outline-none focus:shadow-outline border border-gray-300 dark:border-gray-700 rounded-md py-2 px-4 block w-full sm:w-1/2 md:w-1/3 appearance-none leading-normal\"\n          type=\"email\"\n          value={inviteeEmail}\n          onChange={(e) => setInviteeEmail(e.target.value)}\n          placeholder=\"Invitee Email\"\n        />\n        <div className=\"flex flex-row space-x-2\">\n          <button\n            className={`text-white bg-green-600 border-0 py-2 px-4 focus:outline-none rounded-md\n                    ${\n                      loading || inviteeEmail === ''\n                        ? 'cursor-not-allowed opacity-50'\n                        : 'hover:bg-green-700'\n                    }`}\n            type=\"button\"\n            disabled={loading || inviteeEmail === ''}\n            onClick={async () => {\n              send({\n                type: 'OPEN_DIALOG',\n                invitationDetails,\n                action: async () => {\n                  await sendOwnershipTransferInvite(inviteeEmail, accountId)\n                },\n                doubleConfirmText: inviteeEmail,\n              })\n            }}\n          >\n            Send Invite\n          </button>\n          <button\n            className={`border border-gray-300 dark:border-0 dark:bg-gray-700 py-2 px-4 focus:outline-none rounded-md\n                    ${\n                      loading || inviteeEmail === ''\n                        ? 'cursor-not-allowed opacity-50'\n                        : 'hover:bg-gray-200 dark:hover:bg-gray-800'\n                    }`}\n            disabled={loading || inviteeEmail === ''}\n            type=\"button\"\n            onClick={() => setInviteeEmail('')}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default AccountOwnershipTransfer\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/team/billing-section.tsx","r":[0,7581],"t":"import * as React from 'react'\nimport get from 'lodash/get'\nimport {format} from 'date-fns'\nimport Link from 'next/link'\nimport {track} from '../../utils/analytics'\nimport isEmpty from 'lodash/isEmpty'\nimport {recur} from 'hooks/use-subscription-data'\n\nconst formatAmountWithCurrency = (\n  amountInCents: number,\n  currency: string,\n): string => {\n  if (!amountInCents || !currency) return ''\n\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 0,\n  }).format(amountInCents / 100)\n}\n\nconst isValidDate = (date: any) => {\n  return date instanceof Date && !isNaN(date.getTime())\n}\n\nconst BillingSection = ({\n  subscriptionData,\n  loading,\n}: {\n  subscriptionData: any\n  loading: boolean\n}) => {\n  if (subscriptionData === undefined) return null\n\n  const currency = get(\n    subscriptionData,\n    'latestInvoice.currency',\n    subscriptionData?.price?.unit_amount,\n  )\n\n  const recurrence = recur(subscriptionData?.price)\n\n  let subscriptionName, subscriptionDescription\n\n  switch (recurrence) {\n    case 'year': {\n      subscriptionName = 'Annual egghead Team Subscription'\n      subscriptionDescription = 'Yearly Pro Membership'\n      break\n    }\n    case 'quarter': {\n      subscriptionName = 'Quarterly egghead Team Subscription'\n      subscriptionDescription = 'Quarterly Pro Membership'\n      break\n    }\n    case 'month': {\n      subscriptionName = 'Monthly egghead Team Subscription'\n      subscriptionDescription = 'Monthly Pro Membership'\n      break\n    }\n    default: {\n      subscriptionName = ''\n      subscriptionDescription = ''\n    }\n  }\n\n  const currentPeriodStart = new Date(\n    get(subscriptionData, 'subscription.current_period_start') * 1000,\n  )\n  const currentPeriodEnd = new Date(\n    get(subscriptionData, 'subscription.current_period_end') * 1000,\n  )\n\n  const displayCurrentPeriod = [currentPeriodStart, currentPeriodEnd]\n    .map(isValidDate)\n    .every((isValid) => isValid)\n\n  const activeSubscription =\n    get(subscriptionData, 'subscription.status') === 'active' &&\n    !get(subscriptionData, 'subscription.canceled_at')\n\n  // If it is too early in the billing period or if the subscription was just\n  // created, there may not be an upcoming invoice generated yet. In that case,\n  // we see the subscription is active and display 'Pending' for now.\n  const nextPaymentAttempt = get(\n    subscriptionData,\n    'upcomingInvoice.next_payment_attempt',\n  )\n  let nextBillDateDisplay: string\n  if (!activeSubscription) {\n    nextBillDateDisplay = 'Canceled'\n  } else if (activeSubscription && isEmpty(subscriptionData.upcomingInvoice)) {\n    nextBillDateDisplay = 'Pending'\n  } else if (activeSubscription && nextPaymentAttempt) {\n    nextBillDateDisplay = format(\n      new Date(\n        get(subscriptionData, 'upcomingInvoice.next_payment_attempt') * 1000,\n      ),\n      'yyyy/MM/dd',\n    )\n  } else {\n    nextBillDateDisplay = '-'\n  }\n\n  const quantity = get(subscriptionData, 'subscription.quantity', 1)\n\n  let subscriptionUnitPrice\n\n  if (get(subscriptionData, 'subscription.plan.billing_scheme') === 'tiered') {\n    // if the user/account is on tiered pricing...\n    const tiers = get(subscriptionData, 'subscription.plan.tiers', [])\n    const matchingTier = tiers.find((tier: {up_to: number}) => {\n      if (quantity <= tier.up_to || tier.up_to === null) return true\n\n      return false\n    })\n    subscriptionUnitPrice = formatAmountWithCurrency(\n      matchingTier?.unit_amount,\n      currency,\n    )\n  } else {\n    // otherwise, they are on legacy pricing...\n    const unitAmount = get(subscriptionData, 'subscription.plan.amount')\n    subscriptionUnitPrice = formatAmountWithCurrency(unitAmount, currency)\n  }\n\n  const totalAmountInCents = get(\n    subscriptionData,\n    'upcomingInvoice.amount_due',\n    get(subscriptionData, 'latestInvoice.amount_due'),\n  )\n  const subscriptionTotalPrice = formatAmountWithCurrency(\n    totalAmountInCents,\n    currency,\n  )\n  return (<>\n    <h2 className=\"font-semibold text-xl mt-16\">Team Billing</h2>\n    <div className=\"flex flex-row justify-between mt-4\">\n      <h3 className=\"font-semibold text-lg\">Your Team Membership</h3>\n      <span>\n        Need Help?{' '}\n        <a\n          className=\"font-semibold text-blue-500 hover:text-blue-600\"\n          href=\"mailto:support@egghead.io\"\n        >\n          support@egghead.io\n        </a>\n      </span>\n    </div>\n    {!loading && (\n      <div className=\"flex flex-col space-y-2 border border-gray-300 mt-4 p-2\">\n        <div className=\"flex flex-col space-y-3\">\n          <div className=\"flex flex-col space-y-4 justify-start md:space-y-0 md:flex-row md:justify-between mt-2\">\n            <div className=\"text-lg\">{subscriptionName}</div>\n            <div className=\"\">\n              {subscriptionData?.portalUrl && (\n                <Link\n                  href={subscriptionData.portalUrl}\n                  onClick={() => {\n                    track(`clicked manage team membership`)\n                  }}\n                  className=\"mt-4 text-center transition-all duration-150 ease-in-out bg-blue-600 hover:bg-blue-700 active:bg-blue-800 hover:scale-105 hover:shadow-xl text-white font-semibold py-3 px-5 rounded-md\">\n                  \n                    Manage Your Team Membership\n                  \n                </Link>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-col space-y-0.5\">\n            {displayCurrentPeriod && (\n              <>\n                <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n                  Current Billing Period\n                </span>\n                <span className=\"\">\n                  {format(currentPeriodStart, 'yyyy/MM/dd')} -{' '}\n                  {format(currentPeriodEnd, 'yyyy/MM/dd')}\n                </span>\n              </>\n            )}\n          </div>\n          <div className=\"flex flex-col space-y-0.5\">\n            <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n              Next Billing Date\n            </span>\n            <span className=\"\">{nextBillDateDisplay}</span>\n          </div>\n          <div className=\"flex flex-row space-x-8\">\n            <div className=\"flex flex-col space-y-0.5\">\n              <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n                Description\n              </span>\n              <span className=\"\">{subscriptionDescription}</span>\n            </div>\n\n            <div className=\"flex flex-col space-y-0.5\">\n              <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n                Seats\n              </span>\n              <span className=\"\">{quantity}</span>\n            </div>\n\n            <div className=\"flex flex-col space-y-0.5\">\n              <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n                Unit Price\n              </span>\n              <span className=\"\">{subscriptionUnitPrice}</span>\n            </div>\n\n            <div className=\"flex flex-col space-y-0.5\">\n              <span className=\"font-semibold text-sm text-gray-500 dark:text-gray-400\">\n                Total Amount\n              </span>\n              <span className=\"\">{subscriptionTotalPrice}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n  </>);\n}\n\nexport default BillingSection\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/team/team-name.tsx","r":[0,3427],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {TeamData} from '../../pages/team/index'\nimport {AUTH_DOMAIN, getAuthorizationHeader} from '../../utils/auth'\nimport toast from 'react-hot-toast'\nimport axios from 'axios'\n\nconst updateTeamName = async (\n  name: string,\n  accountId: number | undefined,\n  {\n    onSuccess = () => {},\n    onFailure = () => {},\n  }: {onSuccess: Function; onFailure: Function},\n) => {\n  const errorResponse = () => {\n    onFailure()\n    toast.error(\n      'There was an issue updating your team name. Please contact support@egghead.io if the issue persists.',\n      {\n        duration: 6000,\n        icon: '❌',\n      },\n    )\n  }\n\n  if (typeof accountId === 'undefined') {\n    errorResponse()\n    return\n  }\n\n  try {\n    await axios.patch(\n      `${AUTH_DOMAIN}/api/v1/accounts/${accountId}`,\n      {name},\n      {\n        headers: {...getAuthorizationHeader()},\n      },\n    )\n\n    onSuccess()\n\n    toast.success('Your team name has been updated.', {\n      icon: '✅',\n    })\n  } catch (e) {\n    errorResponse()\n  }\n}\n\nconst getCurrentTeamName = ({name}: {name: string}): string => {\n  if (name === 'acc' || name === 'saml_acc') {\n    return ''\n  }\n\n  return name\n}\n\ntype TeamNameProps = {\n  teamData: TeamData | undefined\n}\n\nconst TeamName = ({teamData}: TeamNameProps) => {\n  const accountId: number | undefined = teamData?.accountId\n  const [currentTeamName, setCurrentTeamName] = React.useState<string>(\n    getCurrentTeamName(teamData || {name: ''}),\n  )\n  const [teamName, setTeamName] = React.useState<string>(currentTeamName)\n  const teamNameNeedsSaving = currentTeamName !== teamName\n\n  return (\n    <>\n      <h2 className=\"font-semibold text-xl mt-16\">Team Name</h2>\n      <div className=\"flex flex-col space-y-2 mt-6\">\n        <input\n          className=\"bg-gray-50 dark:bg-gray-800 focus:outline-none focus:shadow-outline border border-gray-300 dark:border-gray-700 rounded-md py-2 px-4 block w-full sm:w-1/2 md:w-1/3 appearance-none leading-normal\"\n          type=\"text\"\n          value={teamName}\n          onChange={(e) => setTeamName(e.target.value)}\n          placeholder=\"Name\"\n        />\n        <div className=\"flex flex-row space-x-2\">\n          <button\n            className={`text-white bg-green-600 border-0 py-2 px-4 focus:outline-none rounded-md\n                    ${\n                      teamNameNeedsSaving\n                        ? 'hover:bg-green-700'\n                        : 'cursor-not-allowed opacity-50'\n                    }`}\n            type=\"button\"\n            onClick={() => {\n              updateTeamName(teamName, accountId, {\n                onSuccess: () => {\n                  setCurrentTeamName(teamName)\n                },\n                onFailure: () => {\n                  setTeamName(currentTeamName)\n                },\n              })\n            }}\n          >\n            Save\n          </button>\n          <button\n            className={`border border-gray-300 dark:border-0 dark:bg-gray-700 py-2 px-4 focus:outline-none rounded-md\n                    ${\n                      teamNameNeedsSaving\n                        ? 'hover:bg-gray-200 dark:hover:bg-gray-800'\n                        : 'cursor-not-allowed opacity-50'\n                    }`}\n            type=\"button\"\n            onClick={() => setTeamName(currentTeamName)}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default TeamName\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/users/subscription-details.tsx","r":[0,6230],"t":"import React from 'react'\nimport Link from 'next/link'\nimport {track} from '../../utils/analytics'\nimport {useViewer} from 'context/viewer-context'\nimport get from 'lodash/get'\nimport useSubscriptionDetails, {recur} from 'hooks/use-subscription-data'\n\ntype SubscriptionDetailsProps = {\n  stripeCustomerId: string\n  slug: string\n}\n\nconst SubscriptionDetails: React.FunctionComponent<SubscriptionDetailsProps> =\n  ({stripeCustomerId, slug}) => {\n    const {viewer} = useViewer()\n    const {subscriptionData, loading} = useSubscriptionDetails({\n      stripeCustomerId,\n    })\n\n    const subscriptionName = subscriptionData && subscriptionData.product?.name\n    const subscriptionUnitAmount = get(\n      subscriptionData,\n      'latestInvoice.amount_due',\n      subscriptionData?.price?.unit_amount,\n    )\n    const currency = get(\n      subscriptionData,\n      'latestInvoice.currency',\n      subscriptionData?.price?.unit_amount,\n    )\n    const subscriptionPrice =\n      subscriptionUnitAmount &&\n      currency &&\n      new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        minimumFractionDigits: 0,\n      }).format(subscriptionUnitAmount / 100)\n\n    return (<>\n      {/* Payment details */}\n      {!loading && subscriptionData && (\n        <div className=\"sm:px-6 lg:px-0 lg:col-span-9\">\n          <section className=\"mb-32\">\n            <div className=\"p-4 w-full\">\n              <div className=\"border border-accents-1\tw-full p rounded-md m-auto my-8 max-w-max-content\">\n                {subscriptionName ? (\n                  <div className=\"px-5 py-4\">\n                    <h3 className=\"text-2xl mb-1 font-medium\">\n                      ⭐️ You're an <strong>egghead Member!</strong>\n                    </h3>\n                    <p className=\"text-accents-5\">\n                      You can update your plan and payment information below\n                      via Stripe.\n                    </p>\n                    <div className=\"mt-8 mb-4 font-semibold\">\n                      {!subscriptionData?.portalUrl ? (\n                        <div className=\"h-12 mb-6\">loading</div>\n                      ) : subscriptionPrice ? (\n                        <div className=\"flex flex-col space-x-2 items-center\">\n                          <div>\n                            You are currently paying{' '}\n                            {`${subscriptionPrice}/${recur(\n                              subscriptionData.price,\n                            )}`}{' '}\n                            for your membership\n                          </div>\n                          {subscriptionData?.subscription\n                            ?.cancel_at_period_end && (\n                            <div className=\"rounded text-xs px-2 py-1 flex justify-center items-center bg-gray-100\">\n                              cancelled\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <Link\n                          href=\"/pricing\"\n                          onClick={() => {\n                            track(`clicked pricing`, {\n                              location: 'accounts',\n                            })\n                          }}>\n                          \n                            Join today!\n                          \n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"px-5 py-4\">\n                    <h3 className=\"text-2xl mb-1 font-medium\">\n                      No paid subscription found.\n                    </h3>\n                    {(viewer.is_pro || viewer.is_instructor) && (\n                      <p>\n                        You still have access to a Pro Membership. If you feel\n                        this is in error please email{' '}\n                        <a\n                          className=\"text-blue-600 hover:text-blue-700 underline\"\n                          href=\"mailto:support@egghead.io\"\n                        >\n                          support@egghead.io\n                        </a>\n                      </p>\n                    )}\n                    <p className=\"py-3\">\n                      You can still update your payment information below via\n                      Stripe.\n                    </p>\n                  </div>\n                )}\n                {subscriptionData && (\n                  <div className=\"border-t border-accents-1 bg-primary-2 p-4 text-accents-3 rounded-b-md\">\n                    <div className=\"flex flex-col items-start justify-between  sm:items-center\">\n                      {subscriptionData?.subscription\n                        ?.cancel_at_period_end && (\n                        <p className=\"pb-4 sm:pb-0\">\n                          Your account is currently cancelled. You'll have\n                          access until the end of your current billing period.\n                          You can also renew at any time.\n                        </p>\n                      )}\n                      {subscriptionData?.portalUrl && (\n                        <Link\n                          href={subscriptionData.portalUrl}\n                          onClick={() => {\n                            track(`clicked manage membership`)\n                          }}\n                          className=\"w-full mt-4 text-center transition-all duration-150 ease-in-out bg-blue-600 hover:bg-blue-700 active:bg-blue-800 hover:scale-105 hover:shadow-xl text-white font-semibold py-3 px-5 rounded-md\">\n                          \n                            Manage Your Membership\n                          \n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </section>\n        </div>\n      )}\n    </>);\n  }\n\nexport default SubscriptionDetails\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/answer/online-presence.tsx","r":[0,7587],"t":"import * as React from 'react'\nimport {get, isEmpty, keys} from 'lodash'\nimport {useRouter} from 'next/router'\nimport Layout from 'layouts'\nimport Link from 'next/link'\nimport EssayQuestion from 'components/forms/quiz/essay-question'\nimport MultipleChoiceQuestion from 'components/forms/quiz/multiple-choice-question'\nimport {Question, Questions} from 'types'\n\ntype AnswerProps = {\n  questions: Questions\n}\n\nconst OnlinePresenceAnswer: React.FC<AnswerProps> = ({questions}) => {\n  const router = useRouter()\n  const [currentQuestion, setCurrentQuestion] = React.useState<Question>()\n\n  React.useEffect(() => {\n    const param: any = get(router.query, 'question')\n    if (!isEmpty(param)) {\n      const question = get(questions, param)\n      setCurrentQuestion(question)\n    }\n  }, [router])\n\n  const QuestionToShow = () => {\n    if (!currentQuestion) {\n      return null\n    }\n    switch (currentQuestion.type as string) {\n      case 'multiple-choice':\n        return (\n          <MultipleChoiceQuestion\n            question={currentQuestion}\n            questions={questions}\n          />\n        )\n      default:\n        return (\n          <EssayQuestion question={currentQuestion} questions={questions} />\n        )\n    }\n  }\n\n  return (\n    <>\n      <DevTools questions={questions} />\n      <Layout noIndex meta={{title: 'Accessibility Quiz'}}>\n        <header className=\"bg-black -mx-5 flex items-center justify-center relative xl:pt-20 sm:pt-16 pt-14\">\n          <h1 className=\"sr-only\">\n            TestingAccessibility.com Quiz by Marcy Sutton\n          </h1>\n        </header>\n        <main className=\"max-w-screen-sm w-full mx-auto flex items-center justify-center xl:pt-36 md:pt-32 pt-24 sm:pb-16 pb-8\">\n          {QuestionToShow()}\n        </main>\n      </Layout>\n    </>\n  )\n}\n\nexport const questions: Questions = {\n  welcome: {\n    question: `## From the list in the email, what is a new workflow step or approach you could take to evaluate websites or applications for accessibility?`,\n    type: `essay`,\n    tagId: 2304869, // ec - ta - 001 Welcome Completed\n  },\n  semantics: {\n    question: `## Which of these attributes are valid?`,\n    type: 'multiple-choice',\n    tagId: 2304880, // ec - ta - 002 Semantics Completed\n    correct: ['aria-atomic', 'aria-valuetext'],\n    answer:\n      'While they may appear possibly legitimate, `aria-alert` and `role=\"tableheader\"` are not valid attributes in the standard set provided by ARIA. The two other attributes are indeed valid: `aria-atomic` is part of ARIA Live Regions and `aria-valuetext` can be applied as a human-readable value for custom slider components. It\\'s important to reference the [ARIA specification](https://www.w3.org/TR/wai-aria-1.1/) when using any role, state, or property to understand its usage and requirements, including ruling out use of any invalid attributes!',\n    choices: [\n      {\n        answer: 'aria-alert',\n        label: 'aria-alert',\n      },\n      {\n        answer: 'aria-atomic',\n        label: 'aria-atomic',\n      },\n      {\n        answer: 'aria-valuetext',\n        label: 'aria-valuetext',\n      },\n      {\n        answer: 'role-tableheader',\n        label: `role='tableheader'`,\n      },\n    ],\n  },\n  interaction: {\n    question: `## Does keyboard focus need to be visible for focus management targets?`,\n    type: 'multiple-choice',\n    tagId: 2304882, // TODO\n    correct: 'true',\n    answer: `Yes, it does! A visible focus indicator is helpful for anyone relying on the keyboard or voice control to navigate to a part of a page and see their focus point on screen.\\n\\nWithout this affordance, sighted keyboard users and users of voice dictation technology may not have the same understanding when interacting with a page as someone who can see and use a mouse.\\n\\nTo learn more about visible focus relating to client-side routing and the best characteristics for focus management targets, read an article I wrote on [accessibility in client-side routing](https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/)`,\n    choices: [\n      {\n        answer: 'true',\n        label: 'Yes, it does need to be visible',\n      },\n      {\n        answer: 'false',\n        label: 'No, it does not',\n      },\n    ],\n  },\n  tools: {\n    question: `## If an interactive widget won't open or function properly with a Windows screen reader running, what should you do?`,\n    type: 'multiple-choice',\n    tagId: 2304884, // ec - ta - 004 Tools Completed\n    correct: ['check-code', 'h-key', 'focus-modes'],\n    choices: [\n      {\n        answer: 'turn-off-reader',\n        label: 'Turn off the screen reader',\n      },\n      {\n        answer: 'h-key',\n        label: 'Try hitting the H key to see if you cycle through headings',\n      },\n      {\n        answer: 'focus-modes',\n        label:\n          'Use key commands to toggle between browse and focus modes manually',\n      },\n      {\n        answer: 'check-code',\n        label:\n          'Check ARIA roles, states, and properties on the widget to see if coded properly',\n      },\n    ],\n  },\n  design: {\n    question: `True or False: An icon button can be made accessible with an \\`aria-label\\`.`,\n    type: 'multiple-choice',\n    tagId: 2304886, // ec - ta - 005 Design Completed\n    correct: 'false',\n    answer: `It can't - at least not with that alone. If the icon is hard to see or understand, an aria-label would only help users running assistive technology-assuming it had adequate semantics. More visual contrast and possibly a text label may be necessary from a design standpoint as well.`,\n    choices: [\n      {\n        answer: 'true',\n        label: 'Yes, it can',\n      },\n      {\n        answer: 'false',\n        label: \"No, it can't\",\n      },\n    ],\n  },\n  people: {\n    question: `How would you persuade your manager to include accessibility in current and upcoming sprints/iterations? If there is a lot of design and/or technical debt to achieve accessibility, what would you prioritize as the most high-impact items to tackle first?`,\n    tagId: 2304888, // ec - ejs - 006 People Completed\n    type: 'essay',\n  },\n}\n\nconst DevTools: React.FC<{questions: Questions}> = ({questions}) => {\n  const [hidden, setHidden] = React.useState(false)\n  const router = useRouter()\n  if (process.env.NODE_ENV !== 'development' || hidden) {\n    return null\n  }\n\n  return (\n    (<nav\n      className=\"z-10 flex border border-gray-100 flex-col fixed top-5 right-5 rounded-md bg-white shadow-xl p-4 sm:visible invisible\"\n      aria-label=\"Quiz sections\"\n    >\n      <div className=\"w-full flex leading-tighter justify-end absolute right-2 top-2\">\n        <button\n          onClick={() => setHidden(true)}\n          className=\"text-xs text-black font-bold\"\n        >\n          <span className=\"not-sr-only\" aria-hidden=\"true\">\n            ✕\n          </span>\n          <span className=\"sr-only\">close navigation</span>\n        </button>\n      </div>\n      <span className=\"text-sm font-medium pb-2 text-indigo-600\">\n        Questions:\n      </span>\n      <ol className=\"list-decimal list-inside\" role=\"list\">\n        {keys(questions).map((q) => (\n          <li className=\"pb-1\" key={q} role=\"listitem\">\n            <Link\n              href={`/answer?question=${q}`}\n              className={\n                get(router.query, 'question') === q\n                  ? 'underline'\n                  : 'hover:underline'\n              }>\n\n              {q}\n\n            </Link>\n          </li>\n        ))}\n      </ol>\n    </nav>)\n  );\n}\nexport default OnlinePresenceAnswer\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/answer/online-presence.tsx","r":[0,7587],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {get, isEmpty, keys} from 'lodash'\nimport {useRouter} from 'next/router'\nimport Layout from 'layouts'\nimport Link from 'next/link'\nimport EssayQuestion from 'components/forms/quiz/essay-question'\nimport MultipleChoiceQuestion from 'components/forms/quiz/multiple-choice-question'\nimport {Question, Questions} from 'types'\n\ntype AnswerProps = {\n  questions: Questions\n}\n\nconst OnlinePresenceAnswer: React.FC<AnswerProps> = ({questions}) => {\n  const router = useRouter()\n  const [currentQuestion, setCurrentQuestion] = React.useState<Question>()\n\n  React.useEffect(() => {\n    const param: any = get(router.query, 'question')\n    if (!isEmpty(param)) {\n      const question = get(questions, param)\n      setCurrentQuestion(question)\n    }\n  }, [router])\n\n  const QuestionToShow = () => {\n    if (!currentQuestion) {\n      return null\n    }\n    switch (currentQuestion.type as string) {\n      case 'multiple-choice':\n        return (\n          <MultipleChoiceQuestion\n            question={currentQuestion}\n            questions={questions}\n          />\n        )\n      default:\n        return (\n          <EssayQuestion question={currentQuestion} questions={questions} />\n        )\n    }\n  }\n\n  return (\n    <>\n      <DevTools questions={questions} />\n      <Layout noIndex meta={{title: 'Accessibility Quiz'}}>\n        <header className=\"bg-black -mx-5 flex items-center justify-center relative xl:pt-20 sm:pt-16 pt-14\">\n          <h1 className=\"sr-only\">\n            TestingAccessibility.com Quiz by Marcy Sutton\n          </h1>\n        </header>\n        <main className=\"max-w-screen-sm w-full mx-auto flex items-center justify-center xl:pt-36 md:pt-32 pt-24 sm:pb-16 pb-8\">\n          {QuestionToShow()}\n        </main>\n      </Layout>\n    </>\n  )\n}\n\nexport const questions: Questions = {\n  welcome: {\n    question: `## From the list in the email, what is a new workflow step or approach you could take to evaluate websites or applications for accessibility?`,\n    type: `essay`,\n    tagId: 2304869, // ec - ta - 001 Welcome Completed\n  },\n  semantics: {\n    question: `## Which of these attributes are valid?`,\n    type: 'multiple-choice',\n    tagId: 2304880, // ec - ta - 002 Semantics Completed\n    correct: ['aria-atomic', 'aria-valuetext'],\n    answer:\n      'While they may appear possibly legitimate, `aria-alert` and `role=\"tableheader\"` are not valid attributes in the standard set provided by ARIA. The two other attributes are indeed valid: `aria-atomic` is part of ARIA Live Regions and `aria-valuetext` can be applied as a human-readable value for custom slider components. It\\'s important to reference the [ARIA specification](https://www.w3.org/TR/wai-aria-1.1/) when using any role, state, or property to understand its usage and requirements, including ruling out use of any invalid attributes!',\n    choices: [\n      {\n        answer: 'aria-alert',\n        label: 'aria-alert',\n      },\n      {\n        answer: 'aria-atomic',\n        label: 'aria-atomic',\n      },\n      {\n        answer: 'aria-valuetext',\n        label: 'aria-valuetext',\n      },\n      {\n        answer: 'role-tableheader',\n        label: `role='tableheader'`,\n      },\n    ],\n  },\n  interaction: {\n    question: `## Does keyboard focus need to be visible for focus management targets?`,\n    type: 'multiple-choice',\n    tagId: 2304882, // TODO\n    correct: 'true',\n    answer: `Yes, it does! A visible focus indicator is helpful for anyone relying on the keyboard or voice control to navigate to a part of a page and see their focus point on screen.\\n\\nWithout this affordance, sighted keyboard users and users of voice dictation technology may not have the same understanding when interacting with a page as someone who can see and use a mouse.\\n\\nTo learn more about visible focus relating to client-side routing and the best characteristics for focus management targets, read an article I wrote on [accessibility in client-side routing](https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/)`,\n    choices: [\n      {\n        answer: 'true',\n        label: 'Yes, it does need to be visible',\n      },\n      {\n        answer: 'false',\n        label: 'No, it does not',\n      },\n    ],\n  },\n  tools: {\n    question: `## If an interactive widget won't open or function properly with a Windows screen reader running, what should you do?`,\n    type: 'multiple-choice',\n    tagId: 2304884, // ec - ta - 004 Tools Completed\n    correct: ['check-code', 'h-key', 'focus-modes'],\n    choices: [\n      {\n        answer: 'turn-off-reader',\n        label: 'Turn off the screen reader',\n      },\n      {\n        answer: 'h-key',\n        label: 'Try hitting the H key to see if you cycle through headings',\n      },\n      {\n        answer: 'focus-modes',\n        label:\n          'Use key commands to toggle between browse and focus modes manually',\n      },\n      {\n        answer: 'check-code',\n        label:\n          'Check ARIA roles, states, and properties on the widget to see if coded properly',\n      },\n    ],\n  },\n  design: {\n    question: `True or False: An icon button can be made accessible with an \\`aria-label\\`.`,\n    type: 'multiple-choice',\n    tagId: 2304886, // ec - ta - 005 Design Completed\n    correct: 'false',\n    answer: `It can't - at least not with that alone. If the icon is hard to see or understand, an aria-label would only help users running assistive technology-assuming it had adequate semantics. More visual contrast and possibly a text label may be necessary from a design standpoint as well.`,\n    choices: [\n      {\n        answer: 'true',\n        label: 'Yes, it can',\n      },\n      {\n        answer: 'false',\n        label: \"No, it can't\",\n      },\n    ],\n  },\n  people: {\n    question: `How would you persuade your manager to include accessibility in current and upcoming sprints/iterations? If there is a lot of design and/or technical debt to achieve accessibility, what would you prioritize as the most high-impact items to tackle first?`,\n    tagId: 2304888, // ec - ejs - 006 People Completed\n    type: 'essay',\n  },\n}\n\nconst DevTools: React.FC<{questions: Questions}> = ({questions}) => {\n  const [hidden, setHidden] = React.useState(false)\n  const router = useRouter()\n  if (process.env.NODE_ENV !== 'development' || hidden) {\n    return null\n  }\n\n  return (\n    <nav\n      className=\"z-10 flex border border-gray-100 flex-col fixed top-5 right-5 rounded-md bg-white shadow-xl p-4 sm:visible invisible\"\n      aria-label=\"Quiz sections\"\n    >\n      <div className=\"w-full flex leading-tighter justify-end absolute right-2 top-2\">\n        <button\n          onClick={() => setHidden(true)}\n          className=\"text-xs text-black font-bold\"\n        >\n          <span className=\"not-sr-only\" aria-hidden=\"true\">\n            ✕\n          </span>\n          <span className=\"sr-only\">close navigation</span>\n        </button>\n      </div>\n      <span className=\"text-sm font-medium pb-2 text-indigo-600\">\n        Questions:\n      </span>\n      <ol className=\"list-decimal list-inside\" role=\"list\">\n        {keys(questions).map((q) => (\n          <li className=\"pb-1\" key={q} role=\"listitem\">\n            <Link href={`/answer?question=${q}`}>\n              <a\n                className={\n                  get(router.query, 'question') === q\n                    ? 'underline'\n                    : 'hover:underline'\n                }\n              >\n                {q}\n              </a>\n            </Link>\n          </li>\n        ))}\n      </ol>\n    </nav>\n  )\n}\nexport default OnlinePresenceAnswer\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/blog/[slug].tsx","r":[0,4918],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport imageUrlBuilder from '@sanity/image-url'\nimport mdxComponents from 'components/mdx'\nimport {serialize} from 'next-mdx-remote/serialize'\nimport {MDXRemote} from 'next-mdx-remote'\nimport {FunctionComponent} from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {NextSeo} from 'next-seo'\nimport {useRouter} from 'next/router'\nimport {withProse} from 'utils/remark/with-prose'\n\nfunction urlFor(source: any): any {\n  return imageUrlBuilder(sanityClient).image(source)\n}\n\nconst Tag = (props: any) => {\n  const {\n    title = 'Missing title',\n    categories,\n    author = {name: 'Unknown Author'},\n    seo = {},\n    coverImage,\n    source,\n  } = props\n\n  const router = useRouter()\n\n  const url = process.env.NEXT_PUBLIC_DEPLOYMENT_URL + router.asPath\n  const canonicalUrl = seo.canonicalUrl ? seo.canonicalUrl : url\n\n  const defaultOgImage: string | undefined = title\n    ? `https://og-image-react-egghead.now.sh/article/${encodeURIComponent(\n        title,\n      )}?author=${encodeURIComponent(author.name)}&theme=dark`\n    : undefined\n\n  const ogImage = seo.ogImage ? seo.ogImage : defaultOgImage\n\n  return (\n    <>\n      <NextSeo\n        title={title}\n        description={seo.description}\n        openGraph={{\n          title: seo.ogTitle || title,\n          description: seo.ogDescription,\n          url,\n          images: [\n            {\n              url: ogImage,\n              alt: title,\n            },\n          ],\n        }}\n        twitter={{\n          cardType: seo.cardType || 'summary_large_image',\n          site: seo.site || 'eggheadio',\n          handle: seo.handle,\n        }}\n        canonical={canonicalUrl}\n      />\n      <article className=\"mx-auto max-w-screen-md lg:mt-14 md:mt-8 mt-3 mb-16\">\n        <header>\n          <h1 className=\"max-w-screen-md lg:text-6xl md:text-5xl sm:text-4xl text-3xl w-full font-extrabold mb-8 lg:mb-10 leading-tighter\">\n            {title}\n          </h1>\n          {author && <Author author={author} />}\n          {coverImage?.url && (\n            <div className=\"mt-4\">\n              <Image\n                src={coverImage.url}\n                alt={coverImage.alt || title}\n                width={1280}\n                height={720}\n                quality={100}\n                className=\"rounded-lg\"\n              />\n            </div>\n          )}\n          {categories && (\n            <ul>\n              Posted in\n              {categories.map((category: any) => (\n                <li key={category}>{category}</li>\n              ))}\n            </ul>\n          )}\n        </header>\n        <main>\n          <MDXRemote {...source} components={mdxComponents} />\n        </main>\n      </article>\n    </>\n  )\n}\n\nconst Author: FunctionComponent<{\n  author: {\n    name: string\n    image?: any\n    path?: string\n  }\n}> = ({author}) => {\n  const {name, image, path} = author\n  const Profile = () => (\n    <>\n      {image && (\n        <Image\n          src={image.url}\n          width={48}\n          height={48}\n          alt={name}\n          className=\"rounded-full\"\n        />\n      )}\n      <div className=\"leading-tighter\">\n        <span className=\"text-xs uppercase\">author</span>\n        <div className=\"font-semibold\">{name}</div>\n      </div>\n    </>\n  )\n  return name ? (\n    path ? (\n      <Link href={path} className=\"inline-flex items-center space-x-2\">\n\n        <Profile />\n\n      </Link>\n    ) : (\n      <div className=\"inline-flex items-center space-x-2\">\n        <Profile />\n      </div>\n    )\n  ) : null;\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"author\": authors[][0].author->,\n  \"categories\": categories[]->title,\n  seo,\n  coverImage,\n  body\n}`\n\nexport async function getStaticProps(context: any) {\n  const {body, ...post} = await sanityClient.fetch(query, {\n    slug: context.params.slug,\n  })\n\n  const mdxSource = await serialize(body, {\n    mdxOptions: {\n      remarkPlugins: [\n        withProse,\n        require(`remark-slug`),\n        require(`remark-footnotes`),\n        require(`remark-code-titles`),\n      ],\n      rehypePlugins: [\n        [\n          require(`rehype-shiki`),\n          {\n            theme: `./src/styles/material-theme-dark.json`,\n            useBackground: false,\n          },\n        ],\n      ],\n    },\n  })\n  return {\n    props: {...post, source: mdxSource},\n    revalidate: 1,\n  }\n}\n\nconst allPostsQuery = groq`\n  *[_type == \"post\" && publishedAt < now() && !(_id in path(\"drafts.**\"))]{\n    \"slug\": slug.current\n  }\n`\n\nexport async function getStaticPaths() {\n  const allPosts = await sanityClient.fetch(allPostsQuery)\n\n  const paths = allPosts.map((post: {slug: string}) => {\n    return {\n      params: {\n        slug: post.slug,\n      },\n    }\n  })\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default Tag\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/blog/index.tsx","r":[0,4360],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport {parse} from 'date-fns'\nimport friendlyTime from 'friendly-time'\n\nimport {find} from 'lodash'\n\nconst UpdatedAt: React.FunctionComponent<{date: string}> = ({date}) => (\n  <div>{date}</div>\n)\nconst Blog: React.FC = (allArticles: any) => {\n  return (\n    (<div className=\"mx-auto max-w-screen-lg lg:py-16 py-10\">\n      <h1 className=\"md:text-4xl text-2xl text-center font-bold pb-16\">\n        Articles\n      </h1>\n      <div className=\"grid md:grid-cols-2 grid-cols-1 md:gap-16 gap-8\">\n        {allArticles.allArticles.map((article: any) => {\n          const fullSlug = `/blog/${article.slug.current}`\n          return (\n            (<div key={fullSlug} className=\"flex flex-col\">\n              {article.coverImage?.url ? (\n                <div className=\"md:mb-4 mb-2\">\n                  <Link href={fullSlug}>\n\n                    <Image\n                      src={article.coverImage.url}\n                      alt={article.coverImage.alt || article.title}\n                      width={1280}\n                      height={720}\n                      quality={100}\n                      className=\"rounded-lg\"\n                    />\n\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"aspect-w-16 aspect-h-9 md:mb-4 mb-2\">\n                  <Link href={fullSlug}>\n\n                    <div className=\"absolute top-0 left-0 w-full h-full bg-gray-200 dark:bg-gray-800 rounded-lg flex items-center justify-center text-gray-400 dark:text-gray-600\">\n                      <IconPlaceholder />\n                    </div>\n\n                  </Link>\n                </div>\n              )}\n              <Link href={fullSlug}>\n\n                <h2 className=\"md:text-2xl text-xl font-bold leading-tighter\">\n                  {article.title}\n                </h2>\n\n              </Link>\n              {article.author && (\n                <div className=\"mt-4 flex items-start text-sm\">\n                  <div className=\"items-center flex space-x-3\">\n                    <Image\n                      src={article.author.image}\n                      alt={article.author.name}\n                      quality={100}\n                      width={40}\n                      height={40}\n                      className=\"rounded-full\"\n                    />\n                    <div className=\"flex flex-col w-40\">\n                      <div className=\"flex-none leading-tight opacity-90\">\n                        {article.author.name}\n                      </div>\n                      {article.publishedAt && (\n                        <div className=\"place-content-end text-gray-500 leading-tight opacity-90\">\n                          <UpdatedAt\n                            date={friendlyTime(new Date(article.publishedAt))}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  {article.description && (\n                    <div className=\"opacity-70 text-sm leading-snug  pl-2\">\n                      {article.description}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>)\n          );\n        })}\n      </div>\n    </div>)\n  );\n}\n\nexport default Blog\n\nconst IconPlaceholder = () => (\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M4 3a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\"\n        fill=\"currentColor\"\n      />\n    </g>\n  </svg>\n)\n\nconst allArticlesQuery = groq`\n*[_type == \"post\" && publishedAt < now()]|order(publishedAt desc) {\n  title,\n  slug,\n  coverImage,\n  description,\n  publishedAt,\n  \"author\": authors[0].author-> {\n    name, \n   'image': image.url,\n   }\n}\n`\n\nexport async function getStaticProps() {\n  const allArticles = await sanityClient.fetch(allArticlesQuery)\n\n  return {\n    props: {\n      allArticles,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/bookmarks/index.tsx","r":[0,4330],"t":"import * as React from 'react'\nimport {useViewer} from 'context/viewer-context'\nimport axios from 'utils/configured-axios'\nimport {Resource} from 'types'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {reject, isEmpty} from 'lodash'\nimport {track} from 'utils/analytics'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport LoginRequired, {LoginRequiredParams} from 'components/login-required'\nimport {GetServerSideProps} from 'next'\nimport {getTokenFromCookieHeaders} from '../../utils/auth'\nimport {XIcon} from '@heroicons/react/solid'\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  params,\n}) {\n  const {loginRequired} = getTokenFromCookieHeaders(\n    req.headers.cookie as string,\n  )\n\n  return {\n    props: {\n      loginRequired,\n    },\n  }\n}\n\nconst Bookmarks: React.FunctionComponent<LoginRequiredParams> = ({\n  loginRequired,\n}) => {\n  const {viewer} = useViewer()\n  const [bookmarks, setBookmarks] = React.useState([])\n  const [loadingBookmarks, setLoadingBookmarks] = React.useState(true)\n  const watchLaterUrl = viewer?.watch_later_bookmarks_url\n\n  React.useEffect(() => {\n    setLoadingBookmarks(true)\n    if (watchLaterUrl) {\n      axios\n        .get(watchLaterUrl)\n        .then(({data}) => {\n          setBookmarks(data.items)\n        })\n        .finally(() => setLoadingBookmarks(false))\n    }\n  }, [watchLaterUrl])\n\n  return (\n    (<LoginRequired loginRequired={loginRequired}>\n      <div className=\"mt-8 mb-28 max-w-screen-md w-full mx-auto\">\n        <h1 className=\"sm:text-2xl text-xl font-bold mb-6 leading-tight\">\n          Your Bookmarks\n        </h1>\n        {loadingBookmarks || isEmpty(bookmarks) ? (\n          <div className=\"text-gray-600 dark:text-gray-400\">\n            {loadingBookmarks\n              ? 'Loading...'\n              : `You haven't bookmarked any courses yet.`}\n          </div>\n        ) : (\n          <ul className=\"space-y-6\">\n            {bookmarks.map((bookmark: any) => {\n              return (\n                (<li className=\"flex items-center space-x-5\" key={bookmark.slug}>\n                  {bookmark.square_cover_128_url && (\n                    <div className=\"flex items-center flex-shrink-0\">\n                      <Image\n                        width={48}\n                        height={48}\n                        src={bookmark.square_cover_128_url}\n                      />\n                    </div>\n                  )}\n                  <div className=\"flex flex-col\">\n                    <div className=\"flex space-x-2\">\n                      <Link href={bookmark.path} className=\"group inline-flex items-center space-x-2\">\n\n                        <div className=\"group-hover:underline font-medium md:text-lg text-normal leading-tight\">\n                          {bookmark.title}\n                        </div>\n\n                      </Link>\n                      <button\n                        aria-label=\"remove\"\n                        className=\"text-gray-600 hover:text-gray-900 dark:hover:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 p-2 transition-colors rounded-full duration-200 ease-in-out\"\n                        onClick={(e) => {\n                          e.preventDefault()\n                          axios.post(bookmark.toggle_favorite_url)\n                          const lessBookmarks = reject(bookmarks, {\n                            slug: bookmark.slug,\n                          }) as []\n                          track('removed bookmark', {\n                            resource: bookmark.slug,\n                          })\n                          setBookmarks(lessBookmarks)\n                        }}\n                      >\n                        <XIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n                      </button>\n                    </div>\n\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {bookmark.duration &&\n                        `${convertTimeWithTitles(bookmark.duration)} • `}\n                      {bookmark.instructor.full_name}\n                    </div>\n                  </div>\n                </li>)\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    </LoginRequired>)\n  );\n}\n\nexport default Bookmarks\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/bookmarks/index.tsx","r":[0,4330],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useViewer} from 'context/viewer-context'\nimport axios from 'utils/configured-axios'\nimport {Resource} from 'types'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {reject, isEmpty} from 'lodash'\nimport {track} from 'utils/analytics'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport LoginRequired, {LoginRequiredParams} from 'components/login-required'\nimport {GetServerSideProps} from 'next'\nimport {getTokenFromCookieHeaders} from '../../utils/auth'\nimport {XIcon} from '@heroicons/react/solid'\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  params,\n}) {\n  const {loginRequired} = getTokenFromCookieHeaders(\n    req.headers.cookie as string,\n  )\n\n  return {\n    props: {\n      loginRequired,\n    },\n  }\n}\n\nconst Bookmarks: React.FunctionComponent<LoginRequiredParams> = ({\n  loginRequired,\n}) => {\n  const {viewer} = useViewer()\n  const [bookmarks, setBookmarks] = React.useState([])\n  const [loadingBookmarks, setLoadingBookmarks] = React.useState(true)\n  const watchLaterUrl = viewer?.watch_later_bookmarks_url\n\n  React.useEffect(() => {\n    setLoadingBookmarks(true)\n    if (watchLaterUrl) {\n      axios\n        .get(watchLaterUrl)\n        .then(({data}) => {\n          setBookmarks(data.items)\n        })\n        .finally(() => setLoadingBookmarks(false))\n    }\n  }, [watchLaterUrl])\n\n  return (\n    <LoginRequired loginRequired={loginRequired}>\n      <div className=\"mt-8 mb-28 max-w-screen-md w-full mx-auto\">\n        <h1 className=\"sm:text-2xl text-xl font-bold mb-6 leading-tight\">\n          Your Bookmarks\n        </h1>\n        {loadingBookmarks || isEmpty(bookmarks) ? (\n          <div className=\"text-gray-600 dark:text-gray-400\">\n            {loadingBookmarks\n              ? 'Loading...'\n              : `You haven't bookmarked any courses yet.`}\n          </div>\n        ) : (\n          <ul className=\"space-y-6\">\n            {bookmarks.map((bookmark: any) => {\n              return (\n                <li className=\"flex items-center space-x-5\" key={bookmark.slug}>\n                  {bookmark.square_cover_128_url && (\n                    <div className=\"flex items-center flex-shrink-0\">\n                      <Image\n                        width={48}\n                        height={48}\n                        src={bookmark.square_cover_128_url}\n                      />\n                    </div>\n                  )}\n                  <div className=\"flex flex-col\">\n                    <div className=\"flex space-x-2\">\n                      <Link href={bookmark.path}>\n                        <a className=\"group inline-flex items-center space-x-2\">\n                          <div className=\"group-hover:underline font-medium md:text-lg text-normal leading-tight\">\n                            {bookmark.title}\n                          </div>\n                        </a>\n                      </Link>\n                      <button\n                        aria-label=\"remove\"\n                        className=\"text-gray-600 hover:text-gray-900 dark:hover:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 p-2 transition-colors rounded-full duration-200 ease-in-out\"\n                        onClick={(e) => {\n                          e.preventDefault()\n                          axios.post(bookmark.toggle_favorite_url)\n                          const lessBookmarks = reject(bookmarks, {\n                            slug: bookmark.slug,\n                          }) as []\n                          track('removed bookmark', {\n                            resource: bookmark.slug,\n                          })\n                          setBookmarks(lessBookmarks)\n                        }}\n                      >\n                        <XIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n                      </button>\n                    </div>\n\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {bookmark.duration &&\n                        `${convertTimeWithTitles(bookmark.duration)} • `}\n                      {bookmark.instructor.full_name}\n                    </div>\n                  </div>\n                </li>\n              )\n            })}\n          </ul>\n        )}\n      </div>\n    </LoginRequired>\n  )\n}\n\nexport default Bookmarks\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/case-studies/[slug].tsx","r":[0,6489],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {NextSeo} from 'next-seo'\nimport {useRouter} from 'next/router'\nimport {MDXRemote} from 'next-mdx-remote'\nimport mdxComponents from 'components/mdx'\nimport {sanityClient} from 'utils/sanity-client'\nimport {serialize} from 'next-mdx-remote/serialize'\nimport {withProse} from 'utils/remark/with-prose'\n\ntype AuthorResource = {\n  name: string\n  image?: any\n  twitter?: string\n  website?: string\n}\n\ntype CaseStudyResource = {\n  title: string\n  author: AuthorResource\n  seo: any\n  coverImage: any\n  source: any\n}\n\nconst CaseStudy = (props: CaseStudyResource) => {\n  const {\n    title = 'Missing title',\n    author = {name: 'Unknown Author'},\n    seo = {},\n    coverImage,\n    source,\n  } = props\n\n  const router = useRouter()\n\n  const url = process.env.NEXT_PUBLIC_DEPLOYMENT_URL + router.asPath\n  const canonicalUrl = seo.canonicalUrl ? seo.canonicalUrl : url\n\n  return (\n    <>\n      <NextSeo\n        title={title}\n        description={seo.description}\n        openGraph={{\n          title: seo.ogTitle || title,\n          description: seo.ogDescription,\n          url,\n          images: [\n            {\n              url: seo.ogImage,\n              alt: title,\n            },\n          ],\n        }}\n        twitter={{\n          cardType: seo.cardType || 'summary_large_image',\n          site: seo.site || 'eggheadio',\n          handle: seo.handle,\n        }}\n        canonical={canonicalUrl}\n      />\n\n      <div className=\"mx-auto max-w-screen-2xl lg:mt-24 md:mt-8 mt-3 mb-16\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3\">\n          <div className=\"col-span-2\">\n            <h1 className=\"max-w-screen-md lg:text-6xl md:text-5xl sm:text-4xl text-3xl w-full font-extrabold mb-8 lg:mb-10 leading-tighter\">\n              {title}\n            </h1>\n            {coverImage?.url && (\n              <div className=\"mt-4 lg:hidden md:block mb-4\">\n                <Image\n                  src={coverImage.url}\n                  alt={coverImage.alt || title}\n                  width={820}\n                  height={820}\n                  quality={100}\n                  layout=\"responsive\"\n                  className=\"rounded-lg shadow-lg object-cover object-center\"\n                />\n              </div>\n            )}\n\n            {author && <Author author={author} />}\n          </div>\n\n          <div className=\"relative col-start-3\">\n            <svg\n              className=\"hidden lg:block absolute top-0 right-0 -mt-20 -mr-20\"\n              width={404}\n              height={384}\n              fill=\"none\"\n              viewBox=\"0 0 404 384\"\n              aria-hidden=\"true\"\n            >\n              <defs>\n                <pattern\n                  id=\"de316486-4a29-4312-bdfc-fbce2132a2c1\"\n                  x={0}\n                  y={0}\n                  width={20}\n                  height={20}\n                  patternUnits=\"userSpaceOnUse\"\n                >\n                  <rect\n                    x={0}\n                    y={0}\n                    width={4}\n                    height={4}\n                    className=\"text-gray-400\"\n                    fill=\"currentColor\"\n                  />\n                </pattern>\n              </defs>\n              <rect\n                width={404}\n                height={384}\n                fill=\"url(#de316486-4a29-4312-bdfc-fbce2132a2c1)\"\n              />\n            </svg>\n            <div className=\"relative text-base mx-auto max-w-prose lg:max-w-none\">\n              <div className=\"aspect-w-12 aspect-h-7 lg:aspect-none\">\n                {coverImage?.url && (\n                  <div className=\"mt-4\">\n                    <Image\n                      src={coverImage.url}\n                      alt={coverImage.alt || title}\n                      width={820}\n                      height={820}\n                      quality={100}\n                      layout=\"responsive\"\n                      className=\"rounded-lg shadow-lg object-cover object-center\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <article className=\"mx-auto max-w-screen-md lg:mt-14 md:mt-8 mt-3 mb-16\">\n        <main>\n          <MDXRemote {...source} components={mdxComponents} />\n        </main>\n      </article>\n    </>\n  )\n}\n\nconst Author = ({author}: any) => {\n  const {name, image, twitter, website} = author\n\n  const path = twitter || website\n\n  const Profile = () => (\n    <>\n      {image && (\n        <Image\n          src={image.url}\n          width={48}\n          height={48}\n          alt={name}\n          className=\"rounded-full\"\n        />\n      )}\n      <div className=\"leading-tighter\">\n        <span className=\"text-xs uppercase\">author</span>\n        <div className=\"font-semibold\">{name}</div>\n      </div>\n    </>\n  )\n  return name ? (\n    path ? (\n      <Link href={path} className=\"inline-flex items-center space-x-2\">\n\n        <Profile />\n\n      </Link>\n    ) : (\n      <div className=\"inline-flex items-center space-x-2\">\n        <Profile />\n      </div>\n    )\n  ) : null;\n}\n\nconst query = groq`*[_type == \"caseStudy\" && slug.current == $slug][0]{\n  title,\n  \"author\": authors[][0].author->,\n  seo,\n  coverImage,\n  body\n}`\n\nexport async function getStaticProps(context: any) {\n  const {body, ...caseStudy} = await sanityClient.fetch(query, {\n    slug: context.params.slug,\n  })\n\n  const mdxSource = await serialize(body, {\n    mdxOptions: {\n      remarkPlugins: [\n        withProse,\n        require(`remark-slug`),\n        require(`remark-footnotes`),\n        require(`remark-code-titles`),\n      ],\n      rehypePlugins: [\n        [\n          require(`rehype-shiki`),\n          {\n            theme: `./src/styles/material-theme-dark.json`,\n            useBackground: false,\n          },\n        ],\n      ],\n    },\n  })\n  return {\n    props: {...caseStudy, source: mdxSource},\n    revalidate: 1,\n  }\n}\n\nconst allCaseStudiesQuery = groq`\n  *[_type == \"caseStudy\" && publishedAt < now()]{\n    \"slug\": slug.current\n  }\n`\n\nexport async function getStaticPaths() {\n  const allCaseStudies = await sanityClient.fetch(allCaseStudiesQuery)\n\n  const paths = allCaseStudies.map((caseStudy: {slug: string}) => {\n    return {\n      params: {\n        slug: caseStudy.slug,\n      },\n    }\n  })\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default CaseStudy\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/case-studies/index.tsx","r":[0,2653],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport Link from 'next/link'\nimport Image from 'next/image'\n\nconst CaseStudies: React.FC = (allCaseStudies: any) => {\n  return (\n    (<div className=\"mx-auto max-w-screen-xl lg:py-16 py-10\">\n      <h1 className=\"md:text-4xl text-2xl text-center font-bold pb-16\">\n        egghead Case Studies\n      </h1>\n      <div className=\"mt-12 max-w-lg mx-auto grid gap-5 lg:grid-cols-3 lg:max-w-none\">\n        {allCaseStudies.allCaseStudies.map((caseStudy: any) => {\n          const fullSlug = `/case-studies/${caseStudy.slug.current}`\n\n          return (\n            (<div\n              key={fullSlug}\n              className=\"flex flex-col rounded-lg shadow-md overflow-hidden  bg-white dark:bg-gray-800 transition duration-500 ease-in-out hover:-translate-y-1\"\n            >\n              <Link href={fullSlug} className=\"\">\n\n                {caseStudy.coverImage?.url && (\n                  <div className=\"flex-shrink-0\">\n                    <Image\n                      src={caseStudy.coverImage.url}\n                      alt={caseStudy.coverImage.alt || caseStudy.title}\n                      width={100}\n                      height={100}\n                      quality={100}\n                      layout=\"responsive\"\n                      className=\"h-88 w-full object-cover\"\n                    />\n                  </div>\n                )}\n                <div className=\"flex-1 p-6 flex flex-col justify-between\">\n                  <div className=\"flex-1\">\n                    {caseStudy.title && (\n                      <h2 className=\"text-xl font-bold leading-tighter hover:text-blue-600 dark:hover:text-blue-300\">\n                        {caseStudy.title}\n                      </h2>\n                    )}\n\n                    {caseStudy.description && (\n                      <div className=\"opacity-70 text-sm leading-snug pt-4\">\n                        {caseStudy.description}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n              </Link>\n            </div>)\n          );\n        })}\n      </div>\n    </div>)\n  );\n}\n\nexport default CaseStudies\n\nconst allCaseStudiesQuery = groq`\n*[_type == \"caseStudy\" && publishedAt < now()]|order(publishedAt desc) {\n  title,\n  slug,\n  coverImage,\n  description,\n  publishedAt,\n}\n`\n\nexport async function getStaticProps() {\n  const allCaseStudies = await sanityClient.fetch(allCaseStudiesQuery)\n\n  return {\n    props: {\n      allCaseStudies,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/collections/[slug].tsx","r":[0,1871],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Markdown from 'react-markdown'\nimport useSWR from 'swr'\nimport {loadCollection} from 'lib/collections'\nimport {FunctionComponent} from 'react'\nimport {GetServerSideProps} from 'next'\n\nconst fetcher = (url: RequestInfo) => fetch(url).then((r) => r.json())\n\ntype CollectionProps = {\n  collection: any\n}\n\nconst Collection: FunctionComponent<CollectionProps> = ({collection}) => {\n  const initialData = collection\n  const {data} = useSWR(collection.url, fetcher, {initialData})\n  const {title, description, owner, items} = data\n  const {avatar_url} = owner\n\n  return (\n    (<div>\n      <h1 className=\"my-8 text-center sm:text-5xl text-4xl font-bold\">\n        {title}\n      </h1>\n      <div className=\"flex items-center justify-center flex-wrap sm:gap-8 gap-5\">\n        <div className=\"flex items-center\">\n          <div className=\"overflow-hidden rounded-full w-12 h-12\">\n            <img src={avatar_url} alt={`${owner.full_name}`} />\n          </div>\n          <span className=\"ml-2\">{owner.full_name}</span>\n        </div>\n      </div>\n      <div className=\"prose lg:prose-xl max-w-none my-8\">\n        <Markdown>{description}</Markdown>\n        <h3>Resources in this collection:</h3>\n        <ul>\n          {items.map((lesson: any) => {\n            return (\n              (<li key={lesson.slug}>\n                <Link href={lesson.path}>\n                  {lesson.title}\n                </Link>\n              </li>)\n            );\n          })}\n        </ul>\n      </div>\n    </div>)\n  );\n}\n\nexport default Collection\n\nexport const getServerSideProps: GetServerSideProps = async ({res, params}) => {\n  res.setHeader('Cache-Control', 's-maxage=1, stale-while-revalidate')\n  const collection = params && (await loadCollection(params.slug as string))\n\n  return {\n    props: {\n      collection,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/confirm/membership.tsx","r":[0,3519],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport axios from 'axios'\nimport {useViewer} from 'context/viewer-context'\nimport {GetServerSideProps} from 'next'\nimport {useRouter} from 'next/router'\nimport ConfirmMembership from 'components/pages/confirm/membership/index'\nimport {track} from 'utils/analytics'\nimport {AUTH_DOMAIN} from 'utils/auth'\nimport {useMachine} from '@xstate/react'\nimport {authTokenPollingMachine} from 'machines/auth-token-polling-machine'\n\n// TODO: Not sure why this is here. Can it be removed?\nexport const getServerSideProps: GetServerSideProps = async function ({req}) {\n  return {\n    props: {},\n  }\n}\n\nconst TWENTY_FOUR_HOURS_IN_SECONDS = JSON.stringify(24 * 60 * 60)\n\nconst ConfirmMembershipPage: React.FC = () => {\n  const {query} = useRouter()\n  const [session, setSession] = React.useState<any>()\n  const {\n    viewer,\n    refreshUser,\n    handleAccessTokenAuthentication: _handleAccessTokenAuthentication,\n  } = useViewer()\n\n  // We want to know if the user was already authenticated when the component\n  // loads, not after. Hence capturing that boolean in a ref.\n  const alreadyAuthenticated = React.useRef(!!viewer)\n\n  React.useEffect(() => {\n    const {session_id} = query\n    if (session_id) {\n      axios\n        .get(`/api/stripe/checkout/session?session_id=${session_id}`)\n        .then(({data}) => {\n          setSession(data)\n          track('checkout: membership confirmed', {\n            session_id,\n          })\n          if (viewer) refreshUser()\n        })\n    }\n  }, [])\n\n  const {session_id} = query\n  // Narrow the type of the session ID\n  const stripeCheckoutSessionId =\n    session_id instanceof Array ? session_id[0] : session_id\n\n  // This polling machine will attempt to fetch a fresh access token for the\n  // customer associated with the Stripe Checkout Session ID using the declared\n  // service.\n  const [current, _send] = useMachine(authTokenPollingMachine, {\n    context: {stripeCheckoutSessionId},\n    services: {\n      requestAuthToken: async (context) => {\n        const {data} = await axios.post(\n          `${AUTH_DOMAIN}/api/v1/purchase_sessions`,\n          {checkout_session_id: context.stripeCheckoutSessionId},\n        )\n\n        const {auth_token: authToken} = data || {}\n\n        if (authToken) {\n          return Promise.resolve({authToken})\n        } else {\n          return Promise.reject()\n        }\n      },\n    },\n  })\n\n  // Memoize the function so that it doesn't re-trigger the useEffect over and\n  // over.\n  const handleAccessTokenAuthentication = React.useCallback(\n    (authToken, expiration) => {\n      _handleAccessTokenAuthentication(authToken, expiration)\n    },\n    [],\n  )\n\n  // Once we have an authToken, update the viewer-context\n  React.useEffect(() => {\n    if (current.context.authToken) {\n      handleAccessTokenAuthentication(\n        current.context.authToken,\n        TWENTY_FOUR_HOURS_IN_SECONDS,\n      )\n    }\n  }, [current.context.authToken, handleAccessTokenAuthentication])\n\n  if (!session) return null\n\n  return (\n    <>\n      {session.status === 'paid' && (\n        <div className=\"-m-5 dark:bg-gray-900 bg-gray-50 min-h-screen\">\n          <div className=\"max-w-screen-sm mx-auto p-5 w-full flex flex-col items-center justify-start sm:py-16 py-8\">\n            <ConfirmMembership\n              session={session}\n              alreadyAuthenticated={alreadyAuthenticated.current}\n              currentState={current}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default ConfirmMembershipPage\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/courses/index.tsx","r":[0,7077],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {loadAllPlaylistsByPage} from 'lib/playlists'\nimport Markdown from 'react-markdown'\nimport TagList from '../../components/layouts/tag-list'\nimport useClipboard from 'react-use-clipboard'\nimport {IconLink} from 'components/share'\nimport {NextSeo} from 'next-seo'\nimport FiveStars from '../../components/five-stars'\n\nexport async function getStaticProps() {\n  const courses = await loadAllPlaylistsByPage()\n  return {\n    props: {courses}, // will be passed to the page component as props\n  }\n}\n\nconst CourseIndex: React.FC<{courses: any}> = ({courses = []}) => {\n  const isDevelopment: boolean = process.env.NODE_ENV === 'development'\n\n  return (<>\n    <NextSeo\n      title={`Learn from ${courses.length} web development courses on egghead`}\n      twitter={{\n        cardType: 'summary_large_image',\n      }}\n      openGraph={{\n        title: `Learn from ${courses.length} web development courses on egghead`,\n        images: [\n          {\n            url: `https://res.cloudinary.com/dg3gyk0gu/image/upload/v1611999983/next.egghead.io/cards/courses_2x.png`,\n          },\n        ],\n      }}\n    />\n    <div className=\"dark:bg-gray-900 bg-gray-50 sm:-mt-5 -mt-3 -mx-5 px-5\">\n      <header className=\"text-center relative py-24 -mx-5\">\n        <h1 className=\"relative z-10 lg:text-3xl text-2xl leading-tight font-extrabold tracking-tight pb-16 pt-10\">\n          Courses on egghead\n        </h1>\n        <Image\n          src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1611998593/next.egghead.io/pages/home/header-transparent_2x.png\"\n          layout=\"fill\"\n          priority={true}\n          quality={100}\n          objectFit=\"cover\"\n          className=\"absolute left-0 top-0 z-0\"\n          alt=\"\"\n        />\n        <div className=\"h-40 bg-gradient-to-b from-transparent dark:to-gray-900 to-gray-50 absolute bottom-0 left-0 w-full z-10\" />\n      </header>\n      <main>\n        <ul className=\"grid xl:grid-cols-3 sm:grid-cols-2 gap-5 max-w-screen-xl mx-auto -mt-5 relative z-30\">\n          {courses.map((course: any) => {\n            const image = course.image_thumb_url\n            const byline = `${\n              course.instructor?.full_name &&\n              `${course.instructor.full_name}・ Course`\n            }`\n            const metadata: any = {\n              title: course.title,\n              byline,\n              ...(!!image && {image}),\n              path: course.path,\n              slug: course.slug,\n              description: course.description,\n            }\n\n            return (\n              (<li key={course.slug}>\n                <article className=\"relative group dark:bg-gray-800 bg-white rounded-md max-w-max-content flex space-x-5 h-full shadow-sm\">\n                  <div className=\"flex flex-col\">\n                    <header className=\"flex flex-col md:flex-row md:space-x-5 space-y-4 md:space-y-0 items-center p-5 border-b border-gray-50 dark:border-gray-800\">\n                      <figure className=\"flex flex-col flex-shrink-0\">\n                        <Link href={course.path} tabIndex={-1}>\n\n                          <Image\n                            src={course.image_thumb_url}\n                            width={96}\n                            height={96}\n                            alt={course.title}\n                          />\n\n                        </Link>\n                      </figure>\n                      <div className=\"flex flex-col items-center md:items-start\">\n                        <Link href={course.path}>\n\n                          <h1 className=\"sm:text-lg text-lg font-bold leading-tight hover:underline text-center md:text-left\">\n                            {course.title}\n                          </h1>\n\n                        </Link>\n                        <div className=\"pt-2 text-sm flex items-center\">\n                          {course?.instructor?.path && (\n                            <Link\n                              href={course.instructor.path}\n                              className=\"hover:underline pr-3 font-semibold\">\n\n                              {course.instructor.full_name}\n\n                            </Link>\n                          )}\n                          <span className=\"opacity-70 group-hover:opacity-100 transition-opacity ease-in-out duration-300\">\n                            {course.watched_count}× completed\n                          </span>\n                          <span className=\"opacity-70 group-hover:opacity-100 transition-opacity ease-in-out duration-300\">\n                            {course.average_rating_out_of_5 > 0 && (\n                              <FiveStars\n                                rating={course.average_rating_out_of_5}\n                              />\n                            )}\n                          </span>\n                        </div>\n                        <TagList\n                          className=\"flex justify-center md:justify-start flex-wrap items-center text-sm\"\n                          tags={course.tags}\n                          courseSlug={course.slug}\n                        />\n                      </div>\n                    </header>\n                    <div className=\"p-5 dark:bg-gray-900 bg-white h-full border dark:border-gray-800 border-white rounded-b-md\">\n                      {course.summary && (\n                        <h3 className=\"text-sm font-bold mb-4\">\n                          {course.summary}\n                        </h3>\n                      )}\n                      <Markdown\n                        source={course.description}\n                        className=\"prose dark:prose-dark prose-sm opacity-80 group-hover:opacity-100 transition-opacity ease-in-out duration-300\"\n                      />\n                    </div>\n                  </div>\n                  {isDevelopment && (\n                    <CopyMetadataToClipboard metadata={metadata} />\n                  )}\n                </article>\n              </li>)\n            );\n          })}\n        </ul>\n      </main>\n    </div>\n  </>);\n}\n\nconst CopyMetadataToClipboard = (metadata: any) => {\n  const [isCopied, setCopied] = useClipboard(\n    JSON.stringify(metadata, null, 2),\n    {\n      successDuration: 500,\n    },\n  )\n  return (\n    <button\n      className=\"absolute dark:text-white text-gray-800 top-2 right-2 p-2 rounded-md dark:bg-gray-900 bg-gray-50 text-sm opacity-0 group-hover:opacity-80 hover:opacity-100 leading-tight transition-opacity ease-in-out duration-300\"\n      onClick={setCopied}\n    >\n      {isCopied ? '👍' : <IconLink className=\"w-4 h-4\" />}\n    </button>\n  )\n}\n\nexport default CourseIndex\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/discord/index.tsx","r":[0,1468],"t":"import Link from 'next/link'\nimport React, {FunctionComponent} from 'react'\nimport {GetServerSideProps} from 'next'\nimport {getTokenFromCookieHeaders} from 'utils/auth'\nimport LoginRequired, {LoginRequiredParams} from 'components/login-required'\n\nconst Discord: FunctionComponent<LoginRequiredParams> = ({loginRequired}) => {\n  return (\n    (<LoginRequired loginRequired={loginRequired}>\n      {process.env.NEXT_PUBLIC_DISCORD_AUTHORIZE && (\n        <div className=\"w-1/2 flex space-y-6   flex-col\">\n          <p className=\"prose lg:prose-xl\">\n            This will authorize egghead to see your Discord identity and email.\n            If you are currently logged in and a PRO member of egghead you will\n            be invited added to the egghead Discord server as a member. If you\n            aren't a PRO member, you will still be added to the server.\n          </p>\n\n          <Link\n            href={process.env.NEXT_PUBLIC_DISCORD_AUTHORIZE}\n            className=\"transition text-center duration-150 ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold py-3 px-5 rounded\">\n            \n              Sync your Discord to egghead\n            \n          </Link>\n        </div>\n      )}\n    </LoginRequired>)\n  );\n}\n\nexport default Discord\n\nexport const getServerSideProps: GetServerSideProps = async function ({req}) {\n  const {loginRequired} = getTokenFromCookieHeaders(\n    req.headers.cookie as string,\n  )\n\n  return {\n    props: {\n      loginRequired,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/invoices/[stripeTransactionId].tsx","r":[0,1435],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport LoginRequired from 'components/login-required'\nimport {GetServerSideProps} from 'next'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport getTracer from 'utils/honeycomb-tracer'\nimport axios from 'utils/configured-axios'\nimport Invoice from 'components/pages/invoice'\nimport {useRouter} from 'next/router'\nimport {useViewer} from '../../context/viewer-context'\n\nconst tracer = getTracer('invoices-index-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  params,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n  return {\n    props: {\n      transactionId: params?.stripeTransactionId,\n    },\n  }\n}\n\nconst InvoicePage: React.FunctionComponent<any> = ({transactionId}) => {\n  const all = useRouter()\n  console.debug(all)\n  const [transaction, setTransaction] = React.useState()\n  const {viewer} = useViewer()\n\n  console.debug(all)\n  React.useEffect(() => {\n    axios\n      .get(`/api/stripe/transaction`, {\n        params: {\n          transaction_id: transactionId,\n        },\n      })\n      .then(({data}) => setTransaction(data))\n  }, [])\n  return (\n    <LoginRequired>\n      <main className=\"pb-10 lg:py-3 lg:px-8\">\n        {transaction && viewer && (\n          <Invoice transaction={transaction} viewer={viewer}></Invoice>\n        )}\n      </main>\n    </LoginRequired>\n  )\n}\n\nexport default InvoicePage\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/invoices/index.tsx","r":[0,2565],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport LoginRequired from 'components/login-required'\nimport axios from 'utils/configured-axios'\nimport {isEmpty} from 'lodash'\nimport {format, parseISO} from 'date-fns'\n\nconst Invoices: React.FunctionComponent<any> = () => {\n  const [transactions, setTransactions] = React.useState([])\n  const [transactionsLoading, setTransactionsLoading] = React.useState(true)\n\n  React.useEffect(() => {\n    axios\n      .get(`${process.env.NEXT_PUBLIC_AUTH_DOMAIN}/api/v1/transactions`)\n      .then(({data}) => {\n        setTransactionsLoading(false)\n        setTransactions(data)\n      })\n  }, [])\n\n  return (\n    <LoginRequired>\n      <main className=\"pb-10 lg:py-3 lg:px-8\">\n        {transactionsLoading ? (\n          <div></div>\n        ) : (\n          <div className=\"max-w-screen-md mx-auto\">\n            {isEmpty(transactions) ? (\n              <h1 className=\"text-2xl font-bold\">No Transactions</h1>\n            ) : (\n              <div className=\"flex flex-col space-y-8\">\n                <h1 className=\"text-2xl font-bold\">Transactions:</h1>\n                <div>\n                  <ul className=\"space-y-6\">\n                    {transactions.map((transaction: any) => {\n                      return (\n                        <li key={transaction.stripe_transaction_id}>\n                          <div className=\"flex space-x-4\">\n                            <div>\n                              egghead membership: ${transaction.amount / 100}\n                            </div>\n                            <div>\n                              {format(\n                                parseISO(transaction.created_at),\n                                'yyyy/MM/dd',\n                              )}\n                            </div>\n                            <div>\n                              <a\n                                className=\"md:w-auto w-full px-2 py-1 text-center rounded-md bg-blue-600 text-white font-semibold shadow-lg hover:bg-indigo-600 hover:scale-105 transition-all duration-150 ease-in-out\"\n                                href={`/invoices/${transaction.stripe_transaction_id}`}\n                              >\n                                full invoice\n                              </a>\n                            </div>\n                          </div>\n                        </li>\n                      )\n                    })}\n                  </ul>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </main>\n    </LoginRequired>\n  )\n}\n\nexport default Invoices\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/lessons/[slug].tsx","r":[0,29742],"t":"import * as React from 'react'\nimport {GetServerSideProps} from 'next'\nimport {useRouter} from 'next/router'\nimport {filter, first, get, isEmpty, isFunction} from 'lodash'\nimport {useMachine} from '@xstate/react'\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from '@reach/tabs'\nimport {playerMachine} from 'machines/lesson-player-machine'\nimport {useEggheadPlayer} from 'components/EggheadPlayer'\nimport {useEggheadPlayerPrefs} from 'components/EggheadPlayer/use-egghead-player'\nimport Transcript from 'components/pages/lessons/transcript'\nimport {loadBasicLesson, loadLesson} from 'lib/lessons'\nimport {useViewer} from 'context/viewer-context'\nimport {LessonResource, VideoResource} from 'types'\nimport {NextSeo, VideoJsonLd} from 'next-seo'\nimport removeMarkdown from 'remove-markdown'\nimport getTracer from 'utils/honeycomb-tracer'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport RateCourseOverlay from 'components/pages/lessons/overlay/rate-course-overlay'\nimport AddNoteOverlay from 'components/pages/lessons/overlay/add-note-overlay'\nimport axios from 'utils/configured-axios'\nimport {useEnhancedTranscript} from 'hooks/use-enhanced-transcript'\nimport useLastResource from 'hooks/use-last-resource'\nimport RecommendNextStepOverlay from 'components/pages/lessons/overlay/recommend-next-step-overlay'\nimport Markdown from 'react-markdown'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\nimport Eggo from 'components/icons/eggo'\nimport Image from 'next/image'\nimport cookieUtil from 'utils/cookies'\nimport useBreakpoint from 'utils/breakpoints'\nimport Share from 'components/share'\nimport {useNextForCollection} from 'hooks/use-next-up-data'\nimport CodeLink, {\n  IconCode,\n  IconGithub,\n} from 'components/pages/lessons/code-link'\nimport getDependencies from 'data/courseDependencies'\nimport useCio from 'hooks/use-cio'\nimport Comments from 'components/pages/lessons/comments/comments'\nimport Spinner from 'components/spinner'\nimport {PlayerProvider} from 'cueplayer-react'\nimport VideoResourcePlayer from 'components/player'\nimport PlayerContainer from 'components/player/player-container'\nimport PlayerSidebar from 'components/player/player-sidebar'\nimport OverlayWrapper from 'components/pages/lessons/overlay/wrapper'\nimport friendlyTime from 'friendly-time'\nimport {PublishedAt, UpdatedAt} from 'components/layouts/collection-page-layout'\nimport GoProCtaOverlay from 'components/pages/lessons/overlay/go-pro-cta-overlay'\nimport WatchFullCourseCtaOverlay from '../../components/pages/lessons/overlay/watch-full-course-cta-overlay'\nimport WatchNextLessonCtaOverlay from '../../components/pages/lessons/overlay/watch-next-lesson-cta-overlay'\nimport EmailCaptureCtaOverlay from '../../components/pages/lessons/overlay/email-capture-cta-overlay'\n\nconst tracer = getTracer('lesson-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  params,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  try {\n    const initialLesson: LessonResource | undefined =\n      params && (await loadBasicLesson(params.slug as string))\n\n    if (initialLesson && initialLesson?.slug !== params?.slug) {\n      res.setHeader('Location', initialLesson.path)\n      res.statusCode = 302\n      res.end()\n      return {props: {}}\n    } else {\n      res.setHeader('Cache-Control', 's-maxage=1, stale-while-revalidate')\n      return {\n        props: {\n          initialLesson,\n        },\n      }\n    }\n  } catch (e) {\n    console.error(e)\n    res.setHeader('Location', '/')\n    res.statusCode = 307\n    res.end()\n    return {props: {}}\n  }\n}\n\ntype LessonProps = {\n  initialLesson: LessonResource\n}\n\nconst MAX_FREE_VIEWS = 7\n\nconst Lesson: React.FC<LessonProps> = ({initialLesson}) => {\n  const router = useRouter()\n  const {subscriber, cioIdentify} = useCio()\n  const {viewer} = useViewer()\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n\n  const {defaultView, autoplay} = getPlayerPrefs()\n\n  const {md} = useBreakpoint()\n\n  const [isFullscreen, setIsFullscreen] = React.useState(false)\n  const [newNotes, setNewNotes] = React.useState<any>([])\n\n  const playerContainer = React.useRef<any>(null)\n  const actualPlayerRef = React.useRef<any>(null)\n  const lastAutoPlayed = React.useRef()\n\n  const [playerState, send] = useMachine(playerMachine, {\n    context: {\n      lesson: initialLesson,\n      viewer,\n    },\n  })\n\n  const lesson: any = get(playerState, 'context.lesson', initialLesson)\n\n  const {onProgress, onEnded} = useEggheadPlayer(lesson)\n  const [playerVisible, setPlayerVisible] = React.useState<boolean>(false)\n  const [lessonView, setLessonView] = React.useState<any>()\n  const [watchCount, setWatchCount] = React.useState<number>(0)\n\n  const currentPlayerState = playerState.value as string\n\n  const [isIncomingAnonViewer, setIsIncomingAnonViewer] =\n    React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    function run() {\n      const storage = window?.sessionStorage\n      if (!storage) return\n\n      const prevPath = storage.getItem('prevPath')\n\n      if (isEmpty(prevPath) && !subscriber && !viewer) {\n        setIsIncomingAnonViewer(true)\n      } else {\n        setIsIncomingAnonViewer(false)\n      }\n    }\n\n    setTimeout(run, 750)\n  }, [subscriber, viewer])\n\n  const {clearResource, updateResource} = useLastResource({\n    ...lesson,\n    image_url: lesson.icon_url,\n  })\n\n  const {\n    instructor,\n    transcript,\n    transcript_url,\n    title,\n    created_at,\n    updated_at,\n    tags = [],\n    description,\n    collection,\n    free_forever,\n    slug,\n    comments,\n  } = lesson\n\n  const nextLesson = useNextForCollection(collection, lesson.slug)\n  const enhancedTranscript = useEnhancedTranscript(transcript_url)\n  const transcriptAvailable = transcript || enhancedTranscript\n  const courseDependencies: any = getDependencies(collection?.slug)\n  const {dependencies} = courseDependencies\n\n  const collectionTags = tags.map((tag: any) => {\n    const version = get(dependencies, tag.name)\n    return {\n      ...tag,\n      ...(!!version && {version}),\n    }\n  })\n\n  const primary_tag = get(first(get(lesson, 'tags')), 'name', 'javascript')\n\n  const getProgress = (lessonView: any) => {\n    if (lessonView?.collection_progress) {\n      return lessonView.collection_progress\n    }\n  }\n\n  const spinnerVisible = ['loading', 'completed'].includes(currentPlayerState)\n\n  React.useEffect(() => {\n    setPlayerVisible(\n      [\n        'playing',\n        'paused',\n        'loading',\n        'loaded',\n        'viewing',\n        'completed',\n        'addingNote',\n      ].includes(currentPlayerState),\n    )\n  }, [currentPlayerState])\n\n  const checkAutoPlay = async () => {\n    if (nextLesson) {\n      updateResource(nextLesson)\n    }\n\n    console.debug(`checking autoplay: ${autoplay} [${nextLesson.slug}]`)\n\n    if (autoplay && nextLesson) {\n      console.debug('autoplaying next lesson', {nextLesson})\n      track('autoplaying next video', {\n        video: nextLesson.slug,\n      })\n\n      if (isFullscreen) {\n        const loadedLesson = await loadLesson(nextLesson.slug)\n\n        console.debug('full screen authed video loaded', {video: loadedLesson})\n\n        router\n          .push(nextLesson.path, undefined, {\n            shallow: true,\n          })\n          .then(() => {\n            send({\n              type: 'LOADED',\n              lesson: loadedLesson,\n              viewer,\n            })\n          })\n      } else {\n        router.push(nextLesson.path)\n      }\n    } else if (lesson.collection && isIncomingAnonViewer) {\n      send(`COURSE_PITCH`)\n    } else if (nextLesson) {\n      console.debug(`Showing Next Lesson Overlay`)\n      send(`NEXT`)\n    } else {\n      console.debug(`Showing Recommend Overlay`)\n      send(`RECOMMEND`)\n    }\n  }\n\n  const completeVideo = (lessonView: any) => {\n    console.debug('completed video', {lessonView, video: lesson})\n    clearResource()\n    if (lessonView) {\n      const hasNextLesson = nextLesson\n      const progress = getProgress(lessonView)\n\n      if (!hasNextLesson && isFullscreen) {\n        window.document.exitFullscreen()\n        setIsFullscreen(false)\n      }\n\n      if (!hasNextLesson && progress?.rate_url) {\n        console.debug('presenting opportunity to rate course', {\n          lessonView,\n          video: lesson,\n        })\n        send('RATE')\n      } else {\n        checkAutoPlay()\n      }\n    } else {\n      console.debug('no lesson view - incrementing watch count')\n      const newWatchCount = Number(\n        cookieUtil.set(`egghead-watch-count`, watchCount + 1, {\n          expires: 15,\n        }),\n      )\n      setWatchCount(newWatchCount)\n      checkAutoPlay()\n    }\n  }\n\n  React.useEffect(() => {\n    //TODO: We are doing work here that the lesson machine should\n    //be handling but we don't have enough information in the context\n    console.debug(`current state of player:`, currentPlayerState)\n    const lesson = get(playerState, 'context.lesson')\n    const mediaPresent = Boolean(lesson?.hls_url || lesson?.dash_url)\n    switch (currentPlayerState) {\n      case 'loaded':\n        const viewLimitNotReached = watchCount < MAX_FREE_VIEWS\n\n        if (isEmpty(viewer) && free_forever) {\n          if (viewLimitNotReached && mediaPresent) {\n            send('VIEW')\n          } else {\n            send('JOIN')\n          }\n        } else if (mediaPresent) {\n          send('VIEW')\n        } else {\n          send('SUBSCRIBE')\n        }\n        break\n      case 'viewing':\n        console.debug(\n          `changed to viewing isFullscreen: ${isFullscreen} mediaPresent: ${mediaPresent}`,\n        )\n        if (!mediaPresent && !isFullscreen) {\n          console.debug(`sending load event from viewing`)\n          send('LOAD')\n        }\n        break\n      case 'completed':\n        console.debug('handling a change to completed', {\n          lesson,\n          lessonView,\n          isIncomingAnonViewer,\n        })\n        onEnded(lesson)\n          .then((lessonView: any) => {\n            if (lessonView) {\n              setLessonView(lessonView)\n              completeVideo(lessonView)\n            } else if (lesson.collection && isIncomingAnonViewer) {\n              send(`COURSE_PITCH`)\n            } else if (nextLesson) {\n              console.debug(`Showing Next Lesson Overlay`)\n              checkAutoPlay()\n            } else {\n              console.debug(`Showing Recommend Overlay`)\n              send(`RECOMMEND`)\n            }\n          })\n          .catch(() => {\n            if (lessonView) {\n              completeVideo(lessonView)\n            } else if (lesson.collection && isIncomingAnonViewer) {\n              send(`COURSE_PITCH`)\n            } else if (nextLesson) {\n              console.debug(`Showing Next Lesson Overlay`)\n              checkAutoPlay()\n            } else {\n              console.debug(`Showing Recommend Overlay`)\n              send(`RECOMMEND`)\n            }\n          })\n\n        break\n    }\n  }, [currentPlayerState])\n\n  React.useEffect(() => {\n    async function run() {\n      console.debug('loading video with auth')\n      const loadedLesson = await loadLesson(initialLesson.slug)\n      console.debug('authed video loaded', {video: loadedLesson})\n\n      send({\n        type: 'LOADED',\n        lesson: {...initialLesson, ...loadedLesson},\n        viewer,\n      })\n    }\n\n    if (cookieUtil.get(`egghead-watch-count`)) {\n      setWatchCount(Number(cookieUtil.get(`egghead-watch-count`)))\n    } else {\n      setWatchCount(\n        Number(\n          cookieUtil.set(`egghead-watch-count`, 0, {\n            expires: 15,\n          }),\n        ),\n      )\n    }\n\n    send({\n      type: 'LOAD',\n      lesson: initialLesson,\n      viewer,\n    })\n\n    run()\n  }, [initialLesson.slug])\n\n  const numberOfComments = filter(\n    comments,\n    (comment) => comment.state !== 'hidden',\n  ).length\n\n  return (<>\n    <NextSeo\n      description={removeMarkdown(description)}\n      canonical={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${lesson.path}`}\n      title={title}\n      titleTemplate={'%s | egghead.io'}\n      twitter={{\n        handle: instructor?.twitter,\n        site: `@eggheadio`,\n        cardType: 'summary_large_image',\n      }}\n      openGraph={{\n        title,\n        url: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${lesson.path}`,\n        description: removeMarkdown(description),\n        site_name: 'egghead',\n        images: [\n          {\n            url: `https://og-image-react-egghead.now.sh/lesson/${slug}?v=20201027`,\n          },\n        ],\n      }}\n    />\n    <VideoJsonLd\n      name={title}\n      description={removeMarkdown(description)}\n      uploadDate={lesson?.created_at}\n      thumbnailUrls={[lesson?.thumb_url]}\n    />\n    <div className=\"-mx-5 -mt-3 sm:-mt-5 overflow-hidden\">\n      <PlayerProvider>\n        <div\n          className=\"relative grid grid-cols-1 lg:grid-cols-12 font-sans text-base w-full mx-auto lg:min-w-[1024px] gap-6 lg:gap-0\"\n          css={{\n            maxWidth: 'calc((75vh * 1.77777) + 300px)',\n          }}\n        >\n          <div\n            className={`relative before:float-left after:clear-both after:table ${\n              isFullscreen ? 'lg:col-span-12' : 'lg:col-span-9'\n            }`}\n            css={{\n              ':before': {\n                paddingBottom: `calc(56.25% + ${\n                  isEmpty(lesson.staff_notes_url) ? '3.5rem' : '4.5rem'\n                })`,\n              },\n            }}\n          >\n            <PlayerContainer ref={playerContainer}>\n              <VideoResourcePlayer\n                key={lesson.slug}\n                containerRef={playerContainer}\n                actualPlayerRef={actualPlayerRef.current}\n                videoResource={lesson}\n                hidden={!playerVisible}\n                onFullscreenChange={(isFullscreen: boolean) => {\n                  setIsFullscreen(isFullscreen)\n                }}\n                newNotes={newNotes}\n                onCanPlay={(event: any) => {\n                  console.debug(`player ready [autoplay:${autoplay}]`)\n                  const videoElement: HTMLVideoElement =\n                    event.target as HTMLVideoElement\n\n                  actualPlayerRef.current = videoElement\n\n                  const isDifferent =\n                    lastAutoPlayed.current !== lesson?.hls_url\n                  if (\n                    autoplay &&\n                    isDifferent &&\n                    isFunction(videoElement.play)\n                  ) {\n                    console.debug(`autoplaying`)\n                    lastAutoPlayed.current = lesson?.hls_url\n                    videoElement.play()\n                  }\n                }}\n                onPause={() => {\n                  send('PAUSE')\n                }}\n                onPlay={() => send('PLAY')}\n                onTimeUpdate={(event: any) => {\n                  onProgress(\n                    {playedSeconds: event.target.currentTime},\n                    lesson,\n                  ).then((lessonView: any) => {\n                    if (lessonView) {\n                      console.debug('progress recorded', {\n                        progress: lessonView,\n                      })\n                      setLessonView(lessonView)\n                    }\n                  })\n                }}\n                onEnded={() => {\n                  console.debug(`received ended event from player`)\n                  send('COMPLETE')\n                }}\n                onAddNote={() => {\n                  send('ADD_NOTE')\n                }}\n              />\n            </PlayerContainer>\n            {spinnerVisible && (\n              <div className=\"flex justify-center items-center absolute z-10 top-0 right-0 bottom-0 left-0 bg-black bg-opacity-80\">\n                <Spinner />\n              </div>\n            )}\n\n            {playerState.matches('joining') && (\n              <OverlayWrapper>\n                <EmailCaptureCtaOverlay\n                  lesson={get(lesson, 'slug')}\n                  technology={primary_tag}\n                />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('subscribing') && (\n              <OverlayWrapper>\n                <GoProCtaOverlay lesson={lesson} />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('pitchingCourse') && (\n              <OverlayWrapper>\n                <WatchFullCourseCtaOverlay\n                  lesson={lesson}\n                  onClickRewatch={() => {\n                    send('VIEW')\n                    if (actualPlayerRef.current) {\n                      actualPlayerRef.current.play()\n                    }\n                  }}\n                />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('showingNext') && (\n              <OverlayWrapper>\n                <WatchNextLessonCtaOverlay\n                  lesson={lesson}\n                  nextLesson={nextLesson}\n                  onClickRewatch={() => {\n                    send('VIEW')\n                    if (actualPlayerRef.current) {\n                      actualPlayerRef.current.play()\n                    }\n                  }}\n                />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('rating') && (\n              <OverlayWrapper>\n                <RateCourseOverlay\n                  course={lesson.collection}\n                  onRated={(review) => {\n                    axios\n                      .post(lessonView.collection_progress.rate_url, review)\n                      .then(() => {\n                        const comment = get(review, 'comment.comment')\n                        const prompt = get(review, 'comment.context.prompt')\n\n                        if (review) {\n                          track('rated course', {\n                            course: slug,\n                            rating: review.rating,\n                            ...(comment && {comment}),\n                            ...(!!prompt && {prompt}),\n                          })\n                          if (subscriber) {\n                            const currentScore =\n                              Number(subscriber.attributes?.learner_score) ||\n                              0\n                            cioIdentify(subscriber.id, {\n                              learner_score: currentScore + 20,\n                            })\n                          }\n                        }\n                      })\n                      .finally(() => {\n                        setTimeout(() => {\n                          send('RECOMMEND')\n                        }, 1500)\n                      })\n                  }}\n                />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('recommending') && (\n              <OverlayWrapper>\n                <RecommendNextStepOverlay lesson={lesson} />\n              </OverlayWrapper>\n            )}\n            {playerState.matches('addingNote') && (\n              <div className=\"absolute z-20 inset-0 bg-black/50 flex justify-center items-center\">\n                <AddNoteOverlay\n                  resourceId={lesson.slug}\n                  onClose={(newNote: any) => {\n                    if (newNote) setNewNotes([newNote])\n                    send('VIEW')\n                  }}\n                  currentTime={Math.floor(\n                    actualPlayerRef.current?.currentTime ?? 0,\n                  )}\n                />\n              </div>\n            )}\n          </div>\n          <div className=\"lg:col-span-3 side-bar\">\n            <PlayerSidebar\n              videoResource={lesson}\n              onAddNote={() => send('ADD_NOTE')}\n            />\n          </div>\n        </div>\n      </PlayerProvider>\n    </div>\n    <div className=\"grid lg:grid-cols-1 max-w-screen-lg lg:gap-12 gap-8 grid-cols-1 mx-auto divide-y md:divide-transparent divide-gray-50\">\n      <div className=\"md:col-span-8 md:row-start-1 row-start-1 space-y-6 md:space-y-8 lg:space-y-10\">\n        <div className=\"space-y-4 sm:pb-8 pb-2 pt-6\">\n          {title && (\n            <h1 className=\"font-extrabold leading-tight text-xl lg:text-3xl\">\n              {title}\n            </h1>\n          )}\n          <div className=\"pt-4 flex lg:flex-row flex-col w-full justify-between flex-wrap lg:space-x-8 lg:space-y-0 space-y-5 lg:items-center\">\n            <div className=\"md:w-auto w-full flex justify-between items-center space-x-5\">\n              {instructor && (\n                <div className=\"flex items-center flex-shrink-0\">\n                  <Link\n                    href={`/instructors/${get(instructor, 'slug', '#')}`}\n                    onClick={() => {\n                      track(`clicked view instructor`, {\n                        lesson: lesson.slug,\n                        location: 'avatar',\n                      })\n                    }}\n                    className=\"mr-2 flex itemes-center\">\n\n                    {get(instructor, 'avatar_64_url') ? (\n                      <Image\n                        width={48}\n                        height={48}\n                        src={instructor.avatar_64_url}\n                        alt={instructor.full_name}\n                        className=\"rounded-full m-0\"\n                      />\n                    ) : (\n                      <Eggo className=\"w-8 rounded-full\" />\n                    )}\n\n                  </Link>\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-xs\">Instructor</span>\n                    {get(instructor, 'full_name') && (\n                      <Link\n                        href={`/instructors/${get(instructor, 'slug', '#')}`}\n                        onClick={() => {\n                          track(`clicked view instructor`, {\n                            lesson: lesson.slug,\n                            location: 'text link',\n                          })\n                        }}\n                        className=\"font-semibold leading-tighter hover:underline\">\n\n                        {instructor.full_name}\n\n                      </Link>\n                    )}\n                  </div>\n                </div>\n              )}\n              {!md && <Tags tags={collectionTags} lesson={lesson} />}\n            </div>\n\n            {md && <Tags tags={collectionTags} lesson={lesson} />}\n            <div className=\"flex items-center space-x-8\">\n              <div className=\"flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-2\">\n                <Share\n                  className=\"flex flex-col items-end \"\n                  resource={{\n                    path: lesson.path,\n                    title: lesson.title,\n                    type: 'lesson',\n                  }}\n                  instructor={instructor}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"opacity-80 mt-4 text-sm flex flex-col items-center md:items-start\">\n            {created_at && (\n              <PublishedAt date={friendlyTime(new Date(created_at))} />\n            )}\n            {updated_at && (\n              <UpdatedAt date={friendlyTime(new Date(updated_at))} />\n            )}\n          </div>\n          {description && (\n            <Markdown className=\"prose prose-lg dark:prose-dark max-w-none font-medium text-gray-1000 dark:text-white\">\n              {description}\n            </Markdown>\n          )}\n          {(lesson?.code_url || lesson?.repo_url) && (\n            <div className=\"sm:text-base dark:text-gray-100 text-sm sm:pt-2 w-full flex sm:items-center sm:flex-row flex-col sm:space-x-6 sm:space-y-0 space-y-2\">\n              {lesson?.code_url && (\n                <CodeLink\n                  onClick={() => {\n                    track(`clicked open code`, {\n                      lesson: lesson.slug,\n                    })\n                  }}\n                  url={lesson.code_url}\n                  icon={<IconCode />}\n                >\n                  View code for this lesson\n                </CodeLink>\n              )}\n              {lesson?.repo_url && (\n                <CodeLink\n                  onClick={() => {\n                    track(`clicked open github`, {\n                      lesson: lesson.slug,\n                    })\n                  }}\n                  url={lesson.repo_url}\n                  icon={<IconGithub />}\n                >\n                  View code on GitHub\n                </CodeLink>\n              )}\n            </div>\n          )}\n        </div>\n        <div>\n          {md && (\n            <div className=\"py-4\">\n              <Course course={collection} currentLessonSlug={lesson.slug} />\n            </div>\n          )}\n        </div>\n        <Tabs\n          index={defaultView === 'comments' ? 1 : 0}\n          onChange={(index) => {\n            setPlayerPrefs({\n              defaultView: index === 1 ? 'comments' : 'transcript',\n            })\n          }}\n        >\n          <TabList>\n            {transcriptAvailable && <Tab>Transcript</Tab>}\n            <Tab>\n              Comments <span className=\"text-sm\">({numberOfComments})</span>\n            </Tab>\n          </TabList>\n          <TabPanels className=\"bg-gray-50 dark:bg-gray-1000 sm:p-8 p-5 sm:mx-0 -mx-5 rounded-lg rounded-tl-none\">\n            {transcriptAvailable && (\n              <TabPanel>\n                <Transcript\n                  initialTranscript={transcript}\n                  enhancedTranscript={enhancedTranscript}\n                />\n              </TabPanel>\n            )}\n            <TabPanel>\n              <div\n                className=\"space-y-6 sm:space-y-8\"\n                css={{wordBreak: 'break-word'}}\n              >\n                <Comments\n                  lesson={lesson}\n                  commentingAllowed={viewer?.can_comment}\n                />\n              </div>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </div>\n    </div>\n  </>);\n}\n\nconst LessonPage: React.FC<{initialLesson: VideoResource}> = ({\n  initialLesson,\n  ...props\n}) => {\n  return <Lesson initialLesson={initialLesson} {...props} />\n}\n\nexport default LessonPage\n\nconst Course: React.FC<{\n  course: {\n    title: string\n    square_cover_480_url: string\n    slug: string\n    path: string\n  }\n  currentLessonSlug: string\n}> = ({course, currentLessonSlug}) => {\n  return course ? (\n    <div>\n      <div className=\"flex items-center\">\n        <Link\n          href={course.path}\n          className=\"flex-shrink-0 relative block w-12 h-12 lg:w-20 lg:h-20\">\n\n          <Image\n            src={course.square_cover_480_url}\n            alt={`illustration for ${course.title}`}\n            layout=\"fill\"\n          />\n\n        </Link>\n        <div className=\"ml-2 lg:ml-4\">\n          <h4 className=\"text-gray-700 dark:text-gray-100 font-semibold mb-px text-xs uppercase\">\n            Course\n          </h4>\n          <Link\n            href={course.path}\n            onClick={() => {\n              track(`clicked open course`, {\n                lesson: currentLessonSlug,\n              })\n            }}\n            className=\"hover:underline\">\n\n            <h3 className=\"font-bold leading-tighter 2xl:text-lg\">\n              {course.title}\n            </h3>\n\n          </Link>\n        </div>\n      </div>\n    </div>\n  ) : null;\n}\n\nconst Tags: React.FC<{tags: any; lesson: any}> = ({tags, lesson}) => {\n  return (<>\n    {!isEmpty(tags) && (\n      <div className=\"flex space-x-4 items-center\">\n        {/* <div className=\"font-medium\">Tech used:</div> */}\n        <ul className=\"grid grid-flow-col-dense gap-5 items-center text-sm\">\n          {tags.map((tag: any, index: number) => (\n            <li key={index} className=\"inline-flex items-center\">\n              <Link\n                href={`/q/${tag.name}`}\n                onClick={() => {\n                  track(`clicked view topic`, {\n                    lesson: lesson.slug,\n                    topic: tag.name,\n                  })\n                }}\n                className=\"inline-flex items-center  hover:underline\">\n\n                <Image\n                  src={tag.image_url}\n                  alt={tag.name}\n                  width={20}\n                  height={20}\n                  className=\"flex-shrink-0\"\n                />\n                <span className=\"ml-1\">{tag.label}</span>\n                {tag.version && (\n                  <span className=\"ml-2\">\n                    <code>{tag.version}</code>\n                  </span>\n                )}\n\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </>);\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/lessons/[slug].tsx","r":[0,29742],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {GetServerSideProps} from 'next'\nimport {useRouter} from 'next/router'\nimport {filter, first, get, isEmpty, isFunction} from 'lodash'\nimport {useMachine} from '@xstate/react'\nimport {Tab, TabList, TabPanel, TabPanels, Tabs} from '@reach/tabs'\nimport {playerMachine} from 'machines/lesson-player-machine'\nimport {useEggheadPlayer} from 'components/EggheadPlayer'\nimport {useEggheadPlayerPrefs} from 'components/EggheadPlayer/use-egghead-player'\nimport Transcript from 'components/pages/lessons/transcript'\nimport {loadBasicLesson, loadLesson} from 'lib/lessons'\nimport {useViewer} from 'context/viewer-context'\nimport {LessonResource, VideoResource} from 'types'\nimport {NextSeo, VideoJsonLd} from 'next-seo'\nimport removeMarkdown from 'remove-markdown'\nimport getTracer from 'utils/honeycomb-tracer'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport RateCourseOverlay from 'components/pages/lessons/overlay/rate-course-overlay'\nimport AddNoteOverlay from 'components/pages/lessons/overlay/add-note-overlay'\nimport axios from 'utils/configured-axios'\nimport {useEnhancedTranscript} from 'hooks/use-enhanced-transcript'\nimport useLastResource from 'hooks/use-last-resource'\nimport RecommendNextStepOverlay from 'components/pages/lessons/overlay/recommend-next-step-overlay'\nimport Markdown from 'react-markdown'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\nimport Eggo from 'components/icons/eggo'\nimport Image from 'next/image'\nimport cookieUtil from 'utils/cookies'\nimport useBreakpoint from 'utils/breakpoints'\nimport Share from 'components/share'\nimport {useNextForCollection} from 'hooks/use-next-up-data'\nimport CodeLink, {\n  IconCode,\n  IconGithub,\n} from 'components/pages/lessons/code-link'\nimport getDependencies from 'data/courseDependencies'\nimport useCio from 'hooks/use-cio'\nimport Comments from 'components/pages/lessons/comments/comments'\nimport Spinner from 'components/spinner'\nimport {PlayerProvider} from 'cueplayer-react'\nimport VideoResourcePlayer from 'components/player'\nimport PlayerContainer from 'components/player/player-container'\nimport PlayerSidebar from 'components/player/player-sidebar'\nimport OverlayWrapper from 'components/pages/lessons/overlay/wrapper'\nimport friendlyTime from 'friendly-time'\nimport {PublishedAt, UpdatedAt} from 'components/layouts/collection-page-layout'\nimport GoProCtaOverlay from 'components/pages/lessons/overlay/go-pro-cta-overlay'\nimport WatchFullCourseCtaOverlay from '../../components/pages/lessons/overlay/watch-full-course-cta-overlay'\nimport WatchNextLessonCtaOverlay from '../../components/pages/lessons/overlay/watch-next-lesson-cta-overlay'\nimport EmailCaptureCtaOverlay from '../../components/pages/lessons/overlay/email-capture-cta-overlay'\n\nconst tracer = getTracer('lesson-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  params,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  try {\n    const initialLesson: LessonResource | undefined =\n      params && (await loadBasicLesson(params.slug as string))\n\n    if (initialLesson && initialLesson?.slug !== params?.slug) {\n      res.setHeader('Location', initialLesson.path)\n      res.statusCode = 302\n      res.end()\n      return {props: {}}\n    } else {\n      res.setHeader('Cache-Control', 's-maxage=1, stale-while-revalidate')\n      return {\n        props: {\n          initialLesson,\n        },\n      }\n    }\n  } catch (e) {\n    console.error(e)\n    res.setHeader('Location', '/')\n    res.statusCode = 307\n    res.end()\n    return {props: {}}\n  }\n}\n\ntype LessonProps = {\n  initialLesson: LessonResource\n}\n\nconst MAX_FREE_VIEWS = 7\n\nconst Lesson: React.FC<LessonProps> = ({initialLesson}) => {\n  const router = useRouter()\n  const {subscriber, cioIdentify} = useCio()\n  const {viewer} = useViewer()\n  const {setPlayerPrefs, getPlayerPrefs} = useEggheadPlayerPrefs()\n\n  const {defaultView, autoplay} = getPlayerPrefs()\n\n  const {md} = useBreakpoint()\n\n  const [isFullscreen, setIsFullscreen] = React.useState(false)\n  const [newNotes, setNewNotes] = React.useState<any>([])\n\n  const playerContainer = React.useRef<any>(null)\n  const actualPlayerRef = React.useRef<any>(null)\n  const lastAutoPlayed = React.useRef()\n\n  const [playerState, send] = useMachine(playerMachine, {\n    context: {\n      lesson: initialLesson,\n      viewer,\n    },\n  })\n\n  const lesson: any = get(playerState, 'context.lesson', initialLesson)\n\n  const {onProgress, onEnded} = useEggheadPlayer(lesson)\n  const [playerVisible, setPlayerVisible] = React.useState<boolean>(false)\n  const [lessonView, setLessonView] = React.useState<any>()\n  const [watchCount, setWatchCount] = React.useState<number>(0)\n\n  const currentPlayerState = playerState.value as string\n\n  const [isIncomingAnonViewer, setIsIncomingAnonViewer] =\n    React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    function run() {\n      const storage = window?.sessionStorage\n      if (!storage) return\n\n      const prevPath = storage.getItem('prevPath')\n\n      if (isEmpty(prevPath) && !subscriber && !viewer) {\n        setIsIncomingAnonViewer(true)\n      } else {\n        setIsIncomingAnonViewer(false)\n      }\n    }\n\n    setTimeout(run, 750)\n  }, [subscriber, viewer])\n\n  const {clearResource, updateResource} = useLastResource({\n    ...lesson,\n    image_url: lesson.icon_url,\n  })\n\n  const {\n    instructor,\n    transcript,\n    transcript_url,\n    title,\n    created_at,\n    updated_at,\n    tags = [],\n    description,\n    collection,\n    free_forever,\n    slug,\n    comments,\n  } = lesson\n\n  const nextLesson = useNextForCollection(collection, lesson.slug)\n  const enhancedTranscript = useEnhancedTranscript(transcript_url)\n  const transcriptAvailable = transcript || enhancedTranscript\n  const courseDependencies: any = getDependencies(collection?.slug)\n  const {dependencies} = courseDependencies\n\n  const collectionTags = tags.map((tag: any) => {\n    const version = get(dependencies, tag.name)\n    return {\n      ...tag,\n      ...(!!version && {version}),\n    }\n  })\n\n  const primary_tag = get(first(get(lesson, 'tags')), 'name', 'javascript')\n\n  const getProgress = (lessonView: any) => {\n    if (lessonView?.collection_progress) {\n      return lessonView.collection_progress\n    }\n  }\n\n  const spinnerVisible = ['loading', 'completed'].includes(currentPlayerState)\n\n  React.useEffect(() => {\n    setPlayerVisible(\n      [\n        'playing',\n        'paused',\n        'loading',\n        'loaded',\n        'viewing',\n        'completed',\n        'addingNote',\n      ].includes(currentPlayerState),\n    )\n  }, [currentPlayerState])\n\n  const checkAutoPlay = async () => {\n    if (nextLesson) {\n      updateResource(nextLesson)\n    }\n\n    console.debug(`checking autoplay: ${autoplay} [${nextLesson.slug}]`)\n\n    if (autoplay && nextLesson) {\n      console.debug('autoplaying next lesson', {nextLesson})\n      track('autoplaying next video', {\n        video: nextLesson.slug,\n      })\n\n      if (isFullscreen) {\n        const loadedLesson = await loadLesson(nextLesson.slug)\n\n        console.debug('full screen authed video loaded', {video: loadedLesson})\n\n        router\n          .push(nextLesson.path, undefined, {\n            shallow: true,\n          })\n          .then(() => {\n            send({\n              type: 'LOADED',\n              lesson: loadedLesson,\n              viewer,\n            })\n          })\n      } else {\n        router.push(nextLesson.path)\n      }\n    } else if (lesson.collection && isIncomingAnonViewer) {\n      send(`COURSE_PITCH`)\n    } else if (nextLesson) {\n      console.debug(`Showing Next Lesson Overlay`)\n      send(`NEXT`)\n    } else {\n      console.debug(`Showing Recommend Overlay`)\n      send(`RECOMMEND`)\n    }\n  }\n\n  const completeVideo = (lessonView: any) => {\n    console.debug('completed video', {lessonView, video: lesson})\n    clearResource()\n    if (lessonView) {\n      const hasNextLesson = nextLesson\n      const progress = getProgress(lessonView)\n\n      if (!hasNextLesson && isFullscreen) {\n        window.document.exitFullscreen()\n        setIsFullscreen(false)\n      }\n\n      if (!hasNextLesson && progress?.rate_url) {\n        console.debug('presenting opportunity to rate course', {\n          lessonView,\n          video: lesson,\n        })\n        send('RATE')\n      } else {\n        checkAutoPlay()\n      }\n    } else {\n      console.debug('no lesson view - incrementing watch count')\n      const newWatchCount = Number(\n        cookieUtil.set(`egghead-watch-count`, watchCount + 1, {\n          expires: 15,\n        }),\n      )\n      setWatchCount(newWatchCount)\n      checkAutoPlay()\n    }\n  }\n\n  React.useEffect(() => {\n    //TODO: We are doing work here that the lesson machine should\n    //be handling but we don't have enough information in the context\n    console.debug(`current state of player:`, currentPlayerState)\n    const lesson = get(playerState, 'context.lesson')\n    const mediaPresent = Boolean(lesson?.hls_url || lesson?.dash_url)\n    switch (currentPlayerState) {\n      case 'loaded':\n        const viewLimitNotReached = watchCount < MAX_FREE_VIEWS\n\n        if (isEmpty(viewer) && free_forever) {\n          if (viewLimitNotReached && mediaPresent) {\n            send('VIEW')\n          } else {\n            send('JOIN')\n          }\n        } else if (mediaPresent) {\n          send('VIEW')\n        } else {\n          send('SUBSCRIBE')\n        }\n        break\n      case 'viewing':\n        console.debug(\n          `changed to viewing isFullscreen: ${isFullscreen} mediaPresent: ${mediaPresent}`,\n        )\n        if (!mediaPresent && !isFullscreen) {\n          console.debug(`sending load event from viewing`)\n          send('LOAD')\n        }\n        break\n      case 'completed':\n        console.debug('handling a change to completed', {\n          lesson,\n          lessonView,\n          isIncomingAnonViewer,\n        })\n        onEnded(lesson)\n          .then((lessonView: any) => {\n            if (lessonView) {\n              setLessonView(lessonView)\n              completeVideo(lessonView)\n            } else if (lesson.collection && isIncomingAnonViewer) {\n              send(`COURSE_PITCH`)\n            } else if (nextLesson) {\n              console.debug(`Showing Next Lesson Overlay`)\n              checkAutoPlay()\n            } else {\n              console.debug(`Showing Recommend Overlay`)\n              send(`RECOMMEND`)\n            }\n          })\n          .catch(() => {\n            if (lessonView) {\n              completeVideo(lessonView)\n            } else if (lesson.collection && isIncomingAnonViewer) {\n              send(`COURSE_PITCH`)\n            } else if (nextLesson) {\n              console.debug(`Showing Next Lesson Overlay`)\n              checkAutoPlay()\n            } else {\n              console.debug(`Showing Recommend Overlay`)\n              send(`RECOMMEND`)\n            }\n          })\n\n        break\n    }\n  }, [currentPlayerState])\n\n  React.useEffect(() => {\n    async function run() {\n      console.debug('loading video with auth')\n      const loadedLesson = await loadLesson(initialLesson.slug)\n      console.debug('authed video loaded', {video: loadedLesson})\n\n      send({\n        type: 'LOADED',\n        lesson: {...initialLesson, ...loadedLesson},\n        viewer,\n      })\n    }\n\n    if (cookieUtil.get(`egghead-watch-count`)) {\n      setWatchCount(Number(cookieUtil.get(`egghead-watch-count`)))\n    } else {\n      setWatchCount(\n        Number(\n          cookieUtil.set(`egghead-watch-count`, 0, {\n            expires: 15,\n          }),\n        ),\n      )\n    }\n\n    send({\n      type: 'LOAD',\n      lesson: initialLesson,\n      viewer,\n    })\n\n    run()\n  }, [initialLesson.slug])\n\n  const numberOfComments = filter(\n    comments,\n    (comment) => comment.state !== 'hidden',\n  ).length\n\n  return (\n    <>\n      <NextSeo\n        description={removeMarkdown(description)}\n        canonical={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${lesson.path}`}\n        title={title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          handle: instructor?.twitter,\n          site: `@eggheadio`,\n          cardType: 'summary_large_image',\n        }}\n        openGraph={{\n          title,\n          url: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${lesson.path}`,\n          description: removeMarkdown(description),\n          site_name: 'egghead',\n          images: [\n            {\n              url: `https://og-image-react-egghead.now.sh/lesson/${slug}?v=20201027`,\n            },\n          ],\n        }}\n      />\n      <VideoJsonLd\n        name={title}\n        description={removeMarkdown(description)}\n        uploadDate={lesson?.created_at}\n        thumbnailUrls={[lesson?.thumb_url]}\n      />\n\n      <div className=\"-mx-5 -mt-3 sm:-mt-5 overflow-hidden\">\n        <PlayerProvider>\n          <div\n            className=\"relative grid grid-cols-1 lg:grid-cols-12 font-sans text-base w-full mx-auto lg:min-w-[1024px] gap-6 lg:gap-0\"\n            css={{\n              maxWidth: 'calc((75vh * 1.77777) + 300px)',\n            }}\n          >\n            <div\n              className={`relative before:float-left after:clear-both after:table ${\n                isFullscreen ? 'lg:col-span-12' : 'lg:col-span-9'\n              }`}\n              css={{\n                ':before': {\n                  paddingBottom: `calc(56.25% + ${\n                    isEmpty(lesson.staff_notes_url) ? '3.5rem' : '4.5rem'\n                  })`,\n                },\n              }}\n            >\n              <PlayerContainer ref={playerContainer}>\n                <VideoResourcePlayer\n                  key={lesson.slug}\n                  containerRef={playerContainer}\n                  actualPlayerRef={actualPlayerRef.current}\n                  videoResource={lesson}\n                  hidden={!playerVisible}\n                  onFullscreenChange={(isFullscreen: boolean) => {\n                    setIsFullscreen(isFullscreen)\n                  }}\n                  newNotes={newNotes}\n                  onCanPlay={(event: any) => {\n                    console.debug(`player ready [autoplay:${autoplay}]`)\n                    const videoElement: HTMLVideoElement =\n                      event.target as HTMLVideoElement\n\n                    actualPlayerRef.current = videoElement\n\n                    const isDifferent =\n                      lastAutoPlayed.current !== lesson?.hls_url\n                    if (\n                      autoplay &&\n                      isDifferent &&\n                      isFunction(videoElement.play)\n                    ) {\n                      console.debug(`autoplaying`)\n                      lastAutoPlayed.current = lesson?.hls_url\n                      videoElement.play()\n                    }\n                  }}\n                  onPause={() => {\n                    send('PAUSE')\n                  }}\n                  onPlay={() => send('PLAY')}\n                  onTimeUpdate={(event: any) => {\n                    onProgress(\n                      {playedSeconds: event.target.currentTime},\n                      lesson,\n                    ).then((lessonView: any) => {\n                      if (lessonView) {\n                        console.debug('progress recorded', {\n                          progress: lessonView,\n                        })\n                        setLessonView(lessonView)\n                      }\n                    })\n                  }}\n                  onEnded={() => {\n                    console.debug(`received ended event from player`)\n                    send('COMPLETE')\n                  }}\n                  onAddNote={() => {\n                    send('ADD_NOTE')\n                  }}\n                />\n              </PlayerContainer>\n              {spinnerVisible && (\n                <div className=\"flex justify-center items-center absolute z-10 top-0 right-0 bottom-0 left-0 bg-black bg-opacity-80\">\n                  <Spinner />\n                </div>\n              )}\n\n              {playerState.matches('joining') && (\n                <OverlayWrapper>\n                  <EmailCaptureCtaOverlay\n                    lesson={get(lesson, 'slug')}\n                    technology={primary_tag}\n                  />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('subscribing') && (\n                <OverlayWrapper>\n                  <GoProCtaOverlay lesson={lesson} />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('pitchingCourse') && (\n                <OverlayWrapper>\n                  <WatchFullCourseCtaOverlay\n                    lesson={lesson}\n                    onClickRewatch={() => {\n                      send('VIEW')\n                      if (actualPlayerRef.current) {\n                        actualPlayerRef.current.play()\n                      }\n                    }}\n                  />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('showingNext') && (\n                <OverlayWrapper>\n                  <WatchNextLessonCtaOverlay\n                    lesson={lesson}\n                    nextLesson={nextLesson}\n                    onClickRewatch={() => {\n                      send('VIEW')\n                      if (actualPlayerRef.current) {\n                        actualPlayerRef.current.play()\n                      }\n                    }}\n                  />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('rating') && (\n                <OverlayWrapper>\n                  <RateCourseOverlay\n                    course={lesson.collection}\n                    onRated={(review) => {\n                      axios\n                        .post(lessonView.collection_progress.rate_url, review)\n                        .then(() => {\n                          const comment = get(review, 'comment.comment')\n                          const prompt = get(review, 'comment.context.prompt')\n\n                          if (review) {\n                            track('rated course', {\n                              course: slug,\n                              rating: review.rating,\n                              ...(comment && {comment}),\n                              ...(!!prompt && {prompt}),\n                            })\n                            if (subscriber) {\n                              const currentScore =\n                                Number(subscriber.attributes?.learner_score) ||\n                                0\n                              cioIdentify(subscriber.id, {\n                                learner_score: currentScore + 20,\n                              })\n                            }\n                          }\n                        })\n                        .finally(() => {\n                          setTimeout(() => {\n                            send('RECOMMEND')\n                          }, 1500)\n                        })\n                    }}\n                  />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('recommending') && (\n                <OverlayWrapper>\n                  <RecommendNextStepOverlay lesson={lesson} />\n                </OverlayWrapper>\n              )}\n              {playerState.matches('addingNote') && (\n                <div className=\"absolute z-20 inset-0 bg-black/50 flex justify-center items-center\">\n                  <AddNoteOverlay\n                    resourceId={lesson.slug}\n                    onClose={(newNote: any) => {\n                      if (newNote) setNewNotes([newNote])\n                      send('VIEW')\n                    }}\n                    currentTime={Math.floor(\n                      actualPlayerRef.current?.currentTime ?? 0,\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n            <div className=\"lg:col-span-3 side-bar\">\n              <PlayerSidebar\n                videoResource={lesson}\n                onAddNote={() => send('ADD_NOTE')}\n              />\n            </div>\n          </div>\n        </PlayerProvider>\n      </div>\n\n      <div className=\"grid lg:grid-cols-1 max-w-screen-lg lg:gap-12 gap-8 grid-cols-1 mx-auto divide-y md:divide-transparent divide-gray-50\">\n        <div className=\"md:col-span-8 md:row-start-1 row-start-1 space-y-6 md:space-y-8 lg:space-y-10\">\n          <div className=\"space-y-4 sm:pb-8 pb-2 pt-6\">\n            {title && (\n              <h1 className=\"font-extrabold leading-tight text-xl lg:text-3xl\">\n                {title}\n              </h1>\n            )}\n            <div className=\"pt-4 flex lg:flex-row flex-col w-full justify-between flex-wrap lg:space-x-8 lg:space-y-0 space-y-5 lg:items-center\">\n              <div className=\"md:w-auto w-full flex justify-between items-center space-x-5\">\n                {instructor && (\n                  <div className=\"flex items-center flex-shrink-0\">\n                    <Link href={`/instructors/${get(instructor, 'slug', '#')}`}>\n                      <a\n                        onClick={() => {\n                          track(`clicked view instructor`, {\n                            lesson: lesson.slug,\n                            location: 'avatar',\n                          })\n                        }}\n                        className=\"mr-2 flex itemes-center\"\n                      >\n                        {get(instructor, 'avatar_64_url') ? (\n                          <Image\n                            width={48}\n                            height={48}\n                            src={instructor.avatar_64_url}\n                            alt={instructor.full_name}\n                            className=\"rounded-full m-0\"\n                          />\n                        ) : (\n                          <Eggo className=\"w-8 rounded-full\" />\n                        )}\n                      </a>\n                    </Link>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-xs\">Instructor</span>\n                      {get(instructor, 'full_name') && (\n                        <Link\n                          href={`/instructors/${get(instructor, 'slug', '#')}`}\n                        >\n                          <a\n                            onClick={() => {\n                              track(`clicked view instructor`, {\n                                lesson: lesson.slug,\n                                location: 'text link',\n                              })\n                            }}\n                            className=\"font-semibold leading-tighter hover:underline\"\n                          >\n                            {instructor.full_name}\n                          </a>\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                )}\n                {!md && <Tags tags={collectionTags} lesson={lesson} />}\n              </div>\n\n              {md && <Tags tags={collectionTags} lesson={lesson} />}\n              <div className=\"flex items-center space-x-8\">\n                <div className=\"flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-2\">\n                  <Share\n                    className=\"flex flex-col items-end \"\n                    resource={{\n                      path: lesson.path,\n                      title: lesson.title,\n                      type: 'lesson',\n                    }}\n                    instructor={instructor}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"opacity-80 mt-4 text-sm flex flex-col items-center md:items-start\">\n              {created_at && (\n                <PublishedAt date={friendlyTime(new Date(created_at))} />\n              )}\n              {updated_at && (\n                <UpdatedAt date={friendlyTime(new Date(updated_at))} />\n              )}\n            </div>\n            {description && (\n              <Markdown className=\"prose prose-lg dark:prose-dark max-w-none font-medium text-gray-1000 dark:text-white\">\n                {description}\n              </Markdown>\n            )}\n            {(lesson?.code_url || lesson?.repo_url) && (\n              <div className=\"sm:text-base dark:text-gray-100 text-sm sm:pt-2 w-full flex sm:items-center sm:flex-row flex-col sm:space-x-6 sm:space-y-0 space-y-2\">\n                {lesson?.code_url && (\n                  <CodeLink\n                    onClick={() => {\n                      track(`clicked open code`, {\n                        lesson: lesson.slug,\n                      })\n                    }}\n                    url={lesson.code_url}\n                    icon={<IconCode />}\n                  >\n                    View code for this lesson\n                  </CodeLink>\n                )}\n                {lesson?.repo_url && (\n                  <CodeLink\n                    onClick={() => {\n                      track(`clicked open github`, {\n                        lesson: lesson.slug,\n                      })\n                    }}\n                    url={lesson.repo_url}\n                    icon={<IconGithub />}\n                  >\n                    View code on GitHub\n                  </CodeLink>\n                )}\n              </div>\n            )}\n          </div>\n          <div>\n            {md && (\n              <div className=\"py-4\">\n                <Course course={collection} currentLessonSlug={lesson.slug} />\n              </div>\n            )}\n          </div>\n          <Tabs\n            index={defaultView === 'comments' ? 1 : 0}\n            onChange={(index) => {\n              setPlayerPrefs({\n                defaultView: index === 1 ? 'comments' : 'transcript',\n              })\n            }}\n          >\n            <TabList>\n              {transcriptAvailable && <Tab>Transcript</Tab>}\n              <Tab>\n                Comments <span className=\"text-sm\">({numberOfComments})</span>\n              </Tab>\n            </TabList>\n            <TabPanels className=\"bg-gray-50 dark:bg-gray-1000 sm:p-8 p-5 sm:mx-0 -mx-5 rounded-lg rounded-tl-none\">\n              {transcriptAvailable && (\n                <TabPanel>\n                  <Transcript\n                    initialTranscript={transcript}\n                    enhancedTranscript={enhancedTranscript}\n                  />\n                </TabPanel>\n              )}\n              <TabPanel>\n                <div\n                  className=\"space-y-6 sm:space-y-8\"\n                  css={{wordBreak: 'break-word'}}\n                >\n                  <Comments\n                    lesson={lesson}\n                    commentingAllowed={viewer?.can_comment}\n                  />\n                </div>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst LessonPage: React.FC<{initialLesson: VideoResource}> = ({\n  initialLesson,\n  ...props\n}) => {\n  return <Lesson initialLesson={initialLesson} {...props} />\n}\n\nexport default LessonPage\n\nconst Course: React.FC<{\n  course: {\n    title: string\n    square_cover_480_url: string\n    slug: string\n    path: string\n  }\n  currentLessonSlug: string\n}> = ({course, currentLessonSlug}) => {\n  return course ? (\n    <div>\n      <div className=\"flex items-center\">\n        <Link href={course.path}>\n          <a className=\"flex-shrink-0 relative block w-12 h-12 lg:w-20 lg:h-20\">\n            <Image\n              src={course.square_cover_480_url}\n              alt={`illustration for ${course.title}`}\n              layout=\"fill\"\n            />\n          </a>\n        </Link>\n        <div className=\"ml-2 lg:ml-4\">\n          <h4 className=\"text-gray-700 dark:text-gray-100 font-semibold mb-px text-xs uppercase\">\n            Course\n          </h4>\n          <Link href={course.path}>\n            <a\n              onClick={() => {\n                track(`clicked open course`, {\n                  lesson: currentLessonSlug,\n                })\n              }}\n              className=\"hover:underline\"\n            >\n              <h3 className=\"font-bold leading-tighter 2xl:text-lg\">\n                {course.title}\n              </h3>\n            </a>\n          </Link>\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nconst Tags: React.FC<{tags: any; lesson: any}> = ({tags, lesson}) => {\n  return (\n    <>\n      {!isEmpty(tags) && (\n        <div className=\"flex space-x-4 items-center\">\n          {/* <div className=\"font-medium\">Tech used:</div> */}\n          <ul className=\"grid grid-flow-col-dense gap-5 items-center text-sm\">\n            {tags.map((tag: any, index: number) => (\n              <li key={index} className=\"inline-flex items-center\">\n                <Link href={`/q/${tag.name}`}>\n                  <a\n                    onClick={() => {\n                      track(`clicked view topic`, {\n                        lesson: lesson.slug,\n                        topic: tag.name,\n                      })\n                    }}\n                    className=\"inline-flex items-center  hover:underline\"\n                  >\n                    <Image\n                      src={tag.image_url}\n                      alt={tag.name}\n                      width={20}\n                      height={20}\n                      className=\"flex-shrink-0\"\n                    />\n                    <span className=\"ml-1\">{tag.label}</span>\n                    {tag.version && (\n                      <span className=\"ml-2\">\n                        <code>{tag.version}</code>\n                      </span>\n                    )}\n                  </a>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  )\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/portfolios/[slug].tsx","r":[0,4896],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport Markdown from 'react-markdown'\nimport {sanityClient} from 'utils/sanity-client'\nimport Image from 'next/image'\nimport {NextSeo} from 'next-seo'\nimport Link from 'next/link'\nimport prettifyUrl from 'utils/prettify-url'\n\nconst Portfolio = (props: any) => {\n  const {title, image, url, description = ''} = props\n\n  // there's no `body` field or similar with MDX content in Sanity,\n  // so MDX stuff is commented out and we're using description field as plain markdown for now\n  const content = description // useHydrate(body, {components: mdxComponents})\n\n  const defaultOgImage: string = `https://og-image-react-egghead.now.sh/article/${encodeURIComponent(\n    title,\n  )}?&theme=dark`\n\n  const ogImage = defaultOgImage\n\n  return (<>\n    <NextSeo\n      title={`Portfolio by ${title}`}\n      description={description}\n      openGraph={{\n        title: title,\n        description: '',\n        url,\n        images: [\n          {\n            url: ogImage,\n            alt: title,\n          },\n        ],\n      }}\n      twitter={{\n        cardType: 'summary_large_image',\n        site: 'eggheadio',\n        handle: '',\n      }}\n      canonical={url}\n    />\n    <article className=\"mx-auto max-w-screen-lg pb-16 pt-4\">\n      <header>\n        <Link\n          href=\"/great-developer-portfolios\"\n          className=\"text-sm text-gray-600 rounded-md border border-gray-200 dark:border-gray-700 dark:text-gray-300 inline-flex px-3 py-2 transition-all ease-in-out duration-200 hover:border-blue-400 hover:text-blue-600 items-center dark:hover:bg-gray-700\">\n\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-3 w-3 mr-1\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n          <span>All Portfolios</span>\n\n        </Link>\n        <div className=\"flex sm:flex-row flex-col sm:text-left text-center sm:space-y-0 space-y-5 w-full justify-between sm:items-baseline items-center py-8\">\n          <h1 className=\"max-w-screen-md lg:text-6xl md:text-5xl sm:text-4xl text-3xl font-bold leading-tighter\">\n            {title}\n          </h1>\n          <Link\n            href={url}\n            target=\"_blank\"\n            className=\"text-lg flex items-center space-x-1 hover:text-blue-500 dark:hover:text-blue-300 transition-colors duration-200 ease-in-out\">\n\n            <span>{prettifyUrl(url)}</span>\n            <ExternalLinkIcon />\n\n          </Link>\n        </div>\n\n        {image && (\n          <div className=\"flex overflow-hidden sm:mx-0 -mx-5 sm:rounded-md sm:border-2 border-gray-50\">\n            <Image\n              src={image}\n              alt={title}\n              width={1280}\n              height={810}\n              quality={100}\n            />\n          </div>\n        )}\n      </header>\n      <main>\n        <Markdown\n          className=\"prose dark:prose-dark sm:prose-lg lg:prose-xl mt-10 max-w-3xl mx-auto\"\n          source={content}\n        />\n      </main>\n    </article>\n  </>);\n}\n\nconst ExternalLinkIcon = () => {\n  return (\n    <svg\n      className=\"w-4 h-4\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <g\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        strokeWidth=\"2\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n      >\n        <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n        <path d=\"M15 3h6v6\"></path>\n        <path d=\"M10 14L21 3\"></path>\n      </g>\n    </svg>\n  )\n}\n\nconst query = groq`*[_type == \"resource\" && slug.current == $slug][0]{\n  image,\n  title,\n  description,\n  url\n}`\n\nexport async function getStaticProps(context: any) {\n  const {body = '', ...post} = await sanityClient.fetch(query, {\n    slug: context.params.slug,\n  })\n\n  // const mdxSource = await renderToString(body, {\n  //   components: mdxComponents,\n  // })\n\n  return {\n    props: {\n      ...post,\n      // body: mdxSource\n    },\n    revalidate: 1,\n  }\n}\n\nconst allPortfoliosQuery = groq`\n  *[_type == \"resource\" && type == \"portfolio\"]{\n    \"slug\": slug.current\n  }\n`\n\nexport async function getStaticPaths() {\n  const allPortfolios = await sanityClient.fetch(allPortfoliosQuery)\n\n  const paths = allPortfolios.map((post: {slug: string}) => {\n    return {\n      params: {\n        slug: post.slug,\n      },\n    }\n  })\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default Portfolio\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/portfolios/index.tsx","r":[0,3600],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport Image from 'next/image'\nimport {useRouter} from 'next/router'\nimport Link from 'next/link'\nimport {sortBy} from 'lodash'\nimport prettifyUrl from 'utils/prettify-url'\n\nconst Portfolio: React.FC<{portfolios: any}> = (props) => {\n  const {portfolios} = props\n  const router = useRouter()\n  const path = router.asPath\n\n  return (<>\n    <section className=\"mx-auto max-w-screen-xl py-8\">\n      <h1 className=\"max-w-screen-md lg:text-6xl md:text-5xl sm:text-4xl text-4xl font-bold leading-tighter\">\n        Great Developer Portfolios\n      </h1>\n      <h2 className=\"text-lg pt-4 text-gray-700 dark:text-gray-200\">\n        We've gathered up a bunch of portfolios we think are great examples of\n        how to present your work.\n      </h2>\n      <section className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 sm:gap-8 gap-5 pt-16\">\n        {sortBy(portfolios, 'title', 'asc').map((portfolio: any) => {\n          return (\n            (<article className=\"relative overflow-hidden rounded-md border border-gray-200 dark:border-transparent dark:bg-gray-800 shadow-sm hover:shadow-lg  text-gray-700 dark:text-gray-200 transition-all ease-in-out duration-200\">\n              <header>\n                {portfolio.image && (\n                  <Link href={`${path}/${portfolio.slug}`}>\n\n                    <Image\n                      src={portfolio.image}\n                      alt={portfolio.title}\n                      width={1280}\n                      height={810}\n                      quality={100}\n                      className=\"rounded-t-md hover:scale-105 transition-transform ease-in-out duration-700\"\n                    />\n\n                  </Link>\n                )}\n              </header>\n              <main className=\"flex flex-col mt-3 pl-5 pb-5\">\n                <h2 className=\"max-w-screen-md lg:text-xl md:text-xl sm:text-lg text-lg w-full font-semibold leading-tighter\">\n                  <Link href={`${path}/${portfolio.slug}`} className=\"hover:text-blue-500\">\n                    {portfolio.title}\n                  </Link>\n                </h2>\n                <p className=\"text-xs mt-2 text-gray-500 hover:text-blue-500 dark:text-gray-300 dark:hover:text-blue-400 transition\">\n                  <Link href={portfolio.url}>\n                    {prettifyUrl(portfolio.url)}\n                  </Link>\n                </p>\n                <div className=\"flex flex-wrap mt-2\">\n                  {portfolio.tags &&\n                    portfolio.tags.map((tag: any) => {\n                      return (\n                        <div className=\"pointer-events-none items-center capitalize rounded-md mt-2 font-medium py-1 px-3 mr-2 bg-blue-100 dark:bg-blueGray-700 text-blue-500 dark:text-blue-200 text-xs\">\n                          {tag.label}\n                        </div>\n                      )\n                    })}\n                </div>\n              </main>\n            </article>)\n          );\n        })}\n      </section>\n    </section>\n  </>);\n}\n\nconst query = groq`*[_type == \"resource\" && type == 'portfolio']{\n  \"slug\": slug.current,\n  image,\n  title,\n  url,\n  tags\n}`\n\nexport async function getStaticProps(context: any) {\n  const portfolios = await sanityClient.fetch(query)\n\n  return {\n    props: {portfolios},\n    revalidate: 1,\n  }\n}\n\nexport default Portfolio\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/pricing/index.tsx","r":[0,5526],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport {useViewer} from 'context/viewer-context'\nimport stripeCheckoutRedirect from 'api/stripe/stripe-checkout-redirect'\nimport emailIsValid from 'utils/email-is-valid'\nimport {track} from 'utils/analytics'\nimport {useCommerceMachine} from 'hooks/use-commerce-machine'\nimport {first, get} from 'lodash'\nimport {StripeAccount} from 'types'\nimport {useRouter} from 'next/router'\nimport SelectPlanNew from 'components/pricing/select-plan-new'\nimport PoweredByStripe from 'components/pricing/powered-by-stripe'\nimport Testimonials from 'components/pricing/testimonials'\nimport testimonialsData from 'components/pricing/testimonials/data'\nimport ParityCouponMessage from 'components/pricing/parity-coupon-message'\nimport isEmpty from 'lodash/isEmpty'\nimport {Coupon} from 'machines/commerce-machine'\n\ntype PricingProps = {\n  annualPrice: {\n    id: string\n    recurring: {\n      interval: 'year'\n    }\n    unit_amount: number\n  }\n  redirectURL?: string\n}\n\nconst Pricing: FunctionComponent<PricingProps> & {getLayout: any} = () => {\n  const {viewer, authToken} = useViewer()\n  const router = useRouter()\n\n  React.useEffect(() => {\n    track('visited pricing')\n    if (router?.query?.stripe === 'cancelled') {\n      track('checkout: cancelled from stripe')\n    }\n  }, [])\n\n  const {state, send, priceId, quantity, prices, availableCoupons} =\n    useCommerceMachine()\n\n  // machine-derived states\n  const pricesLoading = !state.matches('pricesLoaded')\n  const pppCouponIsApplied =\n    state.matches('pricesLoaded.withPPPCoupon') ||\n    (pricesLoading && state.context?.couponToApply?.couponType === 'ppp')\n\n  // machine-derived data\n  const parityCoupon = availableCoupons?.['ppp']\n\n  const countryCode = get(parityCoupon, 'coupon_region_restricted_to')\n  const countryName = get(parityCoupon, 'coupon_region_restricted_to_name')\n\n  const pppCouponAvailable =\n    !isEmpty(countryName) && !isEmpty(countryCode) && !isEmpty(parityCoupon)\n  const pppCouponEligible = quantity === 1\n\n  // handlers\n  const onApplyParityCoupon = () => {\n    send('APPLY_PPP_COUPON')\n  }\n\n  const onDismissParityCoupon = () => {\n    send('REMOVE_PPP_COUPON')\n  }\n\n  const onClickCheckout = async () => {\n    if (!priceId) return\n    const account = first<StripeAccount>(get(viewer, 'accounts'))\n    await track('checkout: selected plan', {\n      priceId: priceId,\n    })\n\n    if (emailIsValid(viewer?.email)) {\n      await track('checkout: valid email present', {\n        priceId: priceId,\n      })\n      await track('checkout: redirect to stripe', {\n        priceId,\n      })\n      stripeCheckoutRedirect({\n        priceId,\n        email: viewer.email,\n        stripeCustomerId: account?.stripe_customer_id,\n        authToken,\n        quantity,\n        coupon: state.context.couponToApply?.couponCode,\n      })\n    } else {\n      await track('checkout: get email', {\n        priceId: priceId,\n      })\n      router.push({\n        pathname: '/pricing/email',\n        query: {\n          priceId,\n          quantity,\n          coupon: state.context.couponToApply?.couponCode,\n        },\n      })\n    }\n  }\n\n  return (\n    <>\n      <div className=\"dark:bg-gray-900 bg-gray-50 dark:text-white text-gray-900 px-5\">\n        <header className=\"text-center py-16 flex flex-col items-center\">\n          <h1 className=\"md:text-4xl text-2xl font-extrabold leading-tighter max-w-screen-md\">\n            Build your Developer Project Portfolio and{' '}\n            <span className=\"dark:text-yellow-300 text-yellow-500\">\n              Get a Better Job\n            </span>{' '}\n            as a Web Developer\n          </h1>\n          <h2 className=\"text-lg font-light max-w-2xl pt-8 leading-tight dark:text-gray-200 text-gray-700\">\n            Learn the skills you need to advance your career and build\n            real-world business focused professional projects on the job and for\n            your portfolio\n          </h2>\n        </header>\n        <main className=\"flex flex-col items-center\">\n          <div className=\"p-2 relative dark:bg-gray-800 bg-gray-100 rounded-md dark:shadow-none shadow-lg\">\n            <SelectPlanNew\n              prices={prices}\n              pricesLoading={pricesLoading}\n              handleClickGetAccess={() => {\n                send({type: 'CONFIRM_PRICE', onClickCheckout})\n              }}\n              quantityAvailable={true}\n              onQuantityChanged={(quantity: number) => {\n                send({type: 'CHANGE_QUANTITY', quantity})\n              }}\n              onPriceChanged={(priceId: string) => {\n                send({type: 'SWITCH_PRICE', priceId})\n              }}\n            />\n          </div>\n          {pppCouponAvailable && pppCouponEligible && (\n            <div className=\"mt-4 pb-5 max-w-screen-sm mx-auto\">\n              <ParityCouponMessage\n                coupon={parityCoupon as Coupon}\n                countryName={countryName as string}\n                onApply={onApplyParityCoupon}\n                onDismiss={onDismissParityCoupon}\n                isPPP={pppCouponIsApplied}\n              />\n            </div>\n          )}\n          <div className=\"py-24 flex items-center space-x-5\">\n            <PoweredByStripe />\n            <div className=\"text-sm\">30 day money back guarantee</div>\n          </div>\n          <Testimonials testimonials={testimonialsData} />\n        </main>\n      </div>\n    </>\n  )\n}\n\nPricing.getLayout = (Page: any, pageProps: any) => {\n  return <Page {...pageProps} />\n}\n\nexport default Pricing\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/q/[[...all]].tsx","r":[0,5604],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useRouter} from 'next/router'\nimport {findResultsState} from 'react-instantsearch-dom/server'\nimport algoliasearchLite from 'algoliasearch/lite'\nimport Search from 'components/search'\nimport {NextSeo} from 'next-seo'\nimport {GetServerSideProps} from 'next'\n\nimport qs from 'qs'\nimport {createUrl, parseUrl, titleFromPath} from 'lib/search-url-builder'\nimport {isEmpty, get, first} from 'lodash'\nimport queryParamsPresent from 'utils/query-params-present'\n\nimport {loadInstructor} from 'lib/instructors'\nimport nameToSlug from 'lib/name-to-slug'\n\nimport getTracer from 'utils/honeycomb-tracer'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport Header from 'components/app/header'\nimport Main from 'components/app/main'\nimport Footer from 'components/app/footer'\nimport {loadTag} from 'lib/tags'\nimport {topicExtractor} from '../../utils/search/topic-extractor'\n\nimport useSelectedTopic from 'hooks/use-selected-topic'\n\nconst tracer = getTracer('search-page')\n\nconst createURL = (state: any) => `?${qs.stringify(state)}`\n\nconst fullTextSearch = {\n  appId: process.env.NEXT_PUBLIC_ALGOLIA_APP || '',\n  searchApiKey: process.env.NEXT_PUBLIC_ALGOLIA_KEY || '',\n}\n\nconst ALGOLIA_INDEX_NAME =\n  process.env.NEXT_PUBLIC_ALGOLIA_INDEX_NAME || 'content_production'\n\nconst searchClient = algoliasearchLite(\n  fullTextSearch.appId,\n  fullTextSearch.searchApiKey,\n)\n\nconst defaultProps = {\n  searchClient,\n}\n\nconst getInstructorsFromSearchState = (searchState: any) => {\n  return get(searchState, 'refinementList.instructor_name', []) as string[]\n}\n\nconst getInstructorSlugFromInstructorList = (instructors: string[]) => {\n  return nameToSlug(first(instructors) as string).toLowerCase()\n}\n\ntype SearchIndexProps = {\n  initialSearchState: any\n  resultsState: any\n  pageTitle: string\n  noIndexInitial: boolean\n  initialInstructor: any\n  initialTopic: any\n}\n\nconst SearchIndex: any = ({\n  initialSearchState,\n  resultsState,\n  pageTitle,\n  noIndexInitial,\n  initialInstructor,\n  initialTopic,\n}: SearchIndexProps) => {\n  const [searchState, setSearchState] = React.useState(initialSearchState)\n  const [instructor, setInstructor] = React.useState(initialInstructor)\n  const [noIndex, setNoIndex] = React.useState(noIndexInitial)\n  const debouncedState = React.useRef<any>()\n  const router = useRouter()\n\n  const {isLoading, topic} = useSelectedTopic(initialTopic, searchState)\n\n  const onSearchStateChange = async (searchState: any) => {\n    clearTimeout(debouncedState.current)\n\n    const instructors = getInstructorsFromSearchState(searchState)\n\n    if (instructors.length === 1) {\n      const instructorSlug = getInstructorSlugFromInstructorList(instructors)\n      try {\n        await loadInstructor(instructorSlug).then((instructor: any) =>\n          setInstructor(instructor),\n        )\n      } catch (error) {}\n    } else {\n      setInstructor(null)\n    }\n\n    debouncedState.current = setTimeout(() => {\n      const href: string = createUrl(searchState)\n      setNoIndex(queryParamsPresent(href))\n\n      router.push(href, undefined, {\n        shallow: true,\n      })\n    }, 250)\n\n    setSearchState(searchState)\n  }\n\n  const customProps = {\n    searchState,\n    resultsState,\n    createURL,\n    onSearchStateChange,\n  }\n\n  return (\n    <div className=\"flex-grow\">\n      <NextSeo noindex={noIndex} title={pageTitle} />\n      <Search\n        {...defaultProps}\n        {...customProps}\n        instructor={instructor}\n        topic={topic}\n        loading={isLoading}\n      />\n    </div>\n  )\n}\n\n// this fixes the issue with a double footer rendering. 🥴\nSearchIndex.getLayout = (Page: any, pageProps: any) => {\n  return (\n    <div>\n      <Header />\n      <Main className=\"bg-gray-50\">\n        <Page {...pageProps} />\n      </Main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default SearchIndex\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  query,\n  res,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n  res.setHeader('Cache-Control', 's-maxage=1, stale-while-revalidate')\n  const {all, ...rest} = query\n  const initialSearchState = parseUrl(query)\n  const pageTitle = titleFromPath(all as string[])\n  const resultsState = await findResultsState(Search, {\n    ...defaultProps,\n    searchState: initialSearchState,\n    indexName: ALGOLIA_INDEX_NAME,\n  })\n\n  let initialInstructor = null\n  let initialTopic = null\n\n  const {rawResults, state} = resultsState\n\n  const noHits = isEmpty(get(first(rawResults), 'hits'))\n  const queryParamsPresent = !isEmpty(rest)\n  const userQueryPresent = !isEmpty(state.query)\n\n  const noIndexInitial = queryParamsPresent || noHits || userQueryPresent\n\n  const selectedInstructors = getInstructorsFromSearchState(initialSearchState)\n\n  const selectedTopics = topicExtractor(initialSearchState)\n\n  if (selectedTopics?.length === 1 && !selectedTopics.includes('undefined')) {\n    const topic = first<string>(selectedTopics)\n\n    try {\n      if (topic) {\n        initialTopic = await loadTag(topic)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  if (selectedInstructors.length === 1) {\n    const instructorSlug =\n      getInstructorSlugFromInstructorList(selectedInstructors)\n    try {\n      initialInstructor = await loadInstructor(instructorSlug)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return {\n    props: {\n      resultsState: JSON.parse(JSON.stringify(resultsState)),\n      initialSearchState,\n      pageTitle,\n      noIndexInitial,\n      initialInstructor,\n      ...(!!initialTopic && {initialTopic}),\n    },\n  }\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/site-directory/[tag].tsx","r":[0,2262],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport {useRouter} from 'next/router'\nimport humanize from 'humanize-list'\nimport slugify from 'slugify'\n\nconst createPath = (tags: string[]) => {\n  return tags.sort().join('-and-')\n}\n\nconst Tag = (props: any) => {\n  const router = useRouter()\n  const tag: string = router.query.tag as string\n  const tagSlugs: [string] = props.tagSlugs\n\n  return (<>\n    <h2>{tag}</h2>\n    {tagSlugs\n      .filter((slug) => tag !== slug)\n      .map((slug) => {\n        const sortSlugs = [tag, slug].sort()\n        const path = createPath(sortSlugs)\n        const human = humanize(sortSlugs)\n        return (\n          (<div key={path}>\n            <hr />\n            <Link href={`/q/${path}`}>\n              {human}\n            </Link>\n            <br />\n            {tagSlugs\n              .filter(\n                (third) => tag !== slug && tag !== third && slug !== third,\n              )\n              .map((third) => {\n                const sortSlugs = [tag, slug, third].sort()\n                const path = createPath(sortSlugs)\n                const human = humanize(sortSlugs, {oxfordComma: true})\n                return (\n                  (<span key={path}>\n                    <Link href={`/q/${path}`}>\n                      {human}\n                    </Link>{' '}|{' '}\n                  </span>)\n                );\n              })}\n          </div>)\n        );\n      })}\n  </>);\n}\n\nexport async function getStaticProps(context: any) {\n  const tags: any = await import('./tags.json').then((data) => data.default)\n  const tagSlugs = tags.map(({slug}: {slug: string}) => slug).sort()\n\n  return {\n    props: {tagSlugs}, // will be passed to the page component as props\n  }\n}\n\nexport async function getStaticPaths() {\n  const tags: any = await import('./tags.json').then((data) => data.default)\n  const tagSlugs: [string] = tags\n    .map((tag: any) => {\n      const {slug, name}: any = tag\n      return slug === null ? slugify(name) : slug\n    })\n    .sort()\n  const paths = tagSlugs.map((tag) => {\n    return {params: {tag}}\n  })\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default Tag\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/site-directory/index.tsx","r":[0,1763],"t":"import * as React from 'react'\nimport Link from 'next/link'\n\nconst Index = (props: any) => {\n  const tagSlugs: string[] = props.tagSlugs\n\n  return (\n    (<div className=\"prose dark:prose-dark\">\n      <div className=\"space-y-5\">\n        <p>\n          This is a programmatically generated listing of all the topics and all\n          of the combinations of those topics the site has to offer. All of the\n          permutations of these topics when combined (to a level of 3) is about\n          750,000 individual pages!\n        </p>\n        <p>\n          As a programmer, you might be interested in how this list is generated\n          more than the list itself. If so,{' '}\n          <a href=\"https://github.com/eggheadio/egghead-next/blob/4e8472982345f7c4c67f18c774752b26d15e8825/tags-sitemap.js\">\n            check out the code on Github\n          </a>\n          . If not, feel free to explore, but it's not likely to be fruitful. We\n          use it for generating a comprehensive sitemap. It's kind of weird...\n        </p>\n        <p>\n          Checkout a list of <a href=\"/playlists\">collections</a> or{' '}\n          <a href=\"/courses\">courses</a> sorted by the date they were last\n          updated.\n        </p>\n      </div>\n      <ul>\n        {tagSlugs.map((path) => {\n          return (\n            (<li>\n              <Link href={`/site-directory/${path}`} key={path}>\n                {path}\n              </Link>\n            </li>)\n          );\n        })}\n      </ul>\n    </div>)\n  );\n}\n\nexport async function getStaticProps(context: any) {\n  const tags: any = await import('./tags.json').then((data) => data.default)\n  const tagSlugs = tags.map(({slug}: {slug: string}) => slug).sort()\n\n  return {\n    props: {tagSlugs},\n  }\n}\n\nexport default Index\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/talks/[slug].tsx","r":[0,6590],"t":"import React, {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport {useRouter} from 'next/router'\nimport {useMachine} from '@xstate/react'\nimport EggheadPlayer from 'components/EggheadPlayer'\nimport get from 'lodash/get'\nimport Markdown from 'react-markdown'\nimport Image from 'next/image'\nimport useSWR from 'swr'\nimport {loadLesson} from 'lib/lessons'\nimport {getGraphQLClient} from 'utils/configured-graphql-client'\nimport {useViewer} from 'context/viewer-context'\nimport {GetServerSideProps} from 'next'\nimport {playerMachine} from 'machines/lesson-player-machine'\nimport {useWindowSize} from 'react-use'\nimport Transcript from 'components/pages/lessons/transcript'\nimport {NextSeo} from 'next-seo'\nimport Head from 'next/head'\nimport removeMarkdown from 'remove-markdown'\nimport {useEnhancedTranscript} from 'hooks/use-enhanced-transcript'\n\nconst lessonQuery = /* GraphQL */ `\n  query getLesson($slug: String!) {\n    lesson(slug: $slug) {\n      slug\n      title\n      http_url\n      transcript_url\n      subtitles_url\n      description\n      hls_url\n      dash_url\n      instructor {\n        full_name\n        slug\n        avatar_url\n      }\n    }\n  }\n`\n\nconst lessonLoader = (slug: any, token: any) => (query: string) => {\n  const graphQLClient = getGraphQLClient(token)\n  const variables = {\n    slug: slug,\n  }\n\n  return graphQLClient.request(query, variables)\n}\n\ntype LessonProps = {\n  initialLesson: any\n}\n\nconst OFFSET_Y = 80\nconst VIDEO_MIN_HEIGHT = 480\n\nconst Talk: FunctionComponent<LessonProps> = ({initialLesson}) => {\n  const router = useRouter()\n  const playerRef = React.useRef(null)\n  const {authToken} = useViewer()\n  const [playerState, send] = useMachine(playerMachine)\n  const {height} = useWindowSize()\n  const [lessonMaxWidth, setLessonMaxWidth] = React.useState(0)\n\n  React.useEffect(() => {\n    setLessonMaxWidth(Math.round((height - OFFSET_Y) * 1.6))\n  }, [height])\n\n  const {data = {}} = useSWR(\n    lessonQuery,\n    lessonLoader(initialLesson.slug, authToken),\n  )\n\n  const lesson = {...initialLesson, ...data.lesson}\n  const {\n    instructor,\n    transcript,\n    transcript_url,\n    hls_url,\n    dash_url,\n    title,\n    description,\n    path,\n    slug,\n  } = lesson\n\n  const enhancedTranscript = useEnhancedTranscript(transcript_url)\n  const transcriptAvailable = transcript || enhancedTranscript\n\n  if (router.isFallback) {\n    return <div>Loading...</div>\n  }\n\n  if (!lesson) return null\n\n  const playerVisible: boolean = ['playing', 'paused', 'viewing'].some(\n    playerState.matches,\n  )\n\n  return (<>\n    <NextSeo\n      description={removeMarkdown(description)}\n      canonical={`${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`}\n      title={title}\n      titleTemplate={'%s | conference talk | egghead.io'}\n      twitter={{\n        handle: instructor?.twitter,\n        site: `@eggheadio`,\n        cardType: 'summary_large_image',\n      }}\n      openGraph={{\n        title,\n        url: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}${path}`,\n        description: removeMarkdown(description),\n        site_name: 'egghead',\n        images: [\n          {\n            url: `https://og-image-react-egghead.now.sh/talk/${slug}?v=20201027`,\n          },\n        ],\n      }}\n    />\n    <Head>\n      <script src=\"//cdn.bitmovin.com/player/web/8/bitmovinplayer.js\" />\n    </Head>\n    <div>\n      <div className=\"bg-black -mt-3 sm:-mt-5 -mx-5\">\n        <div\n          className=\"w-full m-auto\"\n          css={{\n            '@media (min-width: 960px)': {\n              maxWidth:\n                height > VIDEO_MIN_HEIGHT + OFFSET_Y\n                  ? lessonMaxWidth\n                  : VIDEO_MIN_HEIGHT * 1.6,\n            },\n            '@media (min-width: 960px) and (max-height: 560px)': {\n              minHeight: '432px',\n            },\n          }}\n        >\n          <div\n            className=\"w-full relative overflow-hidden bg-black text-white\"\n            css={{paddingTop: '56.25%'}}\n          >\n            <div className=\"absolute w-full h-full top-0 left-0\">\n              <EggheadPlayer\n                ref={playerRef}\n                hls_url={hls_url}\n                dash_url={dash_url}\n                width=\"100%\"\n                height=\"auto\"\n                pip=\"true\"\n                controls\n                subtitlesUrl={get(lesson, 'subtitles_url')}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <main className=\"max-w-screen-lg mx-auto pt-8\">\n        <article>\n          <header className=\"mb-6\">\n            <h1 className=\"text-2xl font-bold tracking-tight leading-tight\">\n              {get(lesson, 'title')}\n            </h1>\n            <div className=\"mt-2 flex items-center\">\n              <Link\n                href={`/q/resources-by-${get(instructor, 'slug')}`}\n                className=\"text-base dark:text-gray-400 text-gray-800 hover:text-blue-600 transition-colors ease-in-out duration-300 flex items-center\">\n\n                {instructor.avatar_url && (\n                  <Image\n                    src={get(instructor, 'avatar_url')}\n                    width={32}\n                    height={32}\n                    alt={get(instructor, 'full_name')}\n                    className=\"rounded-full\"\n                  />\n                )}\n                <span className=\"ml-1\">{get(instructor, 'full_name')}</span>\n\n              </Link>\n            </div>\n          </header>\n          <Markdown className=\"prose dark:prose-dark lg:dark:prose-lg-dark lg:prose-lg max-w-none text-gray-900\">\n            {get(lesson, 'description')}\n          </Markdown>\n          {transcriptAvailable && (\n            <div className=\"sm:mt-16 mt-8\">\n              <h3 className=\"text-lg font-bold tracking-tight leading-tight mb-4\">\n                Transcript\n              </h3>\n              <Transcript\n                className=\"prose dark:prose-dark max-w-none text-gray-800\"\n                initialTranscript={transcript}\n                enhancedTranscript={enhancedTranscript}\n              />\n            </div>\n          )}\n        </article>\n      </main>\n    </div>\n  </>);\n}\n\nexport default Talk\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  res,\n  req,\n  params,\n}) {\n  const initialLesson = params && (await loadLesson(params.slug as string))\n\n  return {\n    props: {\n      initialLesson,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/talks/index.tsx","r":[0,3113],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\n\nconst Talks: React.FC = ({allTalks}: any) => {\n  return (\n    (<div className=\"mx-auto max-w-screen-lg lg:py-16 py-10\">\n      <h1 className=\"md:text-4xl text-2xl text-center font-bold pb-16\">\n        egghead Talks\n      </h1>\n      <div className=\"grid md:grid-cols-2 grid-cols-1 md:gap-16 gap-8\">\n        {allTalks.map((talk: any) => {\n          return (\n            (<div key={talk.path} className=\"flex flex-col\">\n              {talk.image ? (\n                <div className=\"md:mb-4 mb-2\">\n                  <Link href={talk.path}>\n\n                    <Image\n                      src={talk.image}\n                      alt={talk.title}\n                      width={1280}\n                      height={720}\n                      quality={100}\n                      className=\"rounded-lg\"\n                    />\n\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"aspect-w-16 aspect-h-9 md:mb-4 mb-2\">\n                  <Link href={talk.path}>\n\n                    <div className=\"absolute top-0 left-0 w-full h-full bg-gray-200 dark:bg-gray-800 rounded-lg flex items-center justify-center text-gray-400 dark:text-gray-600\">\n                      <IconPlaceholder />\n                    </div>\n\n                  </Link>\n                </div>\n              )}\n              <Link href={talk.path}>\n\n                <h2 className=\"md:text-2xl text-xl font-bold leading-tighter hover:text-blue-600 dark:hover:text-blue-300\">\n                  {talk.title}\n                </h2>\n\n              </Link>\n              <h2 className=\"uppercase font-semibold text-xs mt-2 text-gray-700 dark:text-gray-300\">\n                {talk.instructor.name}\n              </h2>\n              {talk.summary && (\n                <div className=\"prose sm:prose prose-sm dark:prose-dark mt-2 text-gray-700 dark:text-white\">\n                  {talk.summary}\n                </div>\n              )}\n            </div>)\n          );\n        })}\n      </div>\n    </div>)\n  );\n}\n\nexport default Talks\n\nconst IconPlaceholder = () => (\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M4 3a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\"\n        fill=\"currentColor\"\n      />\n    </g>\n  </svg>\n)\n\nconst allTalksQuery = groq`\n*[_type == 'resource' && type == \"talk\"]{\n  title,\n path,\n byline,\n image,\n description,\n summary,\n 'instructor': collaborators[]->[role == 'instructor'][0]{\n   'name': person->.name\n },\n}\n`\n\nexport async function getStaticProps() {\n  const allTalks = await sanityClient.fetch(allTalksQuery)\n\n  return {\n    props: {\n      allTalks,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/team/index.tsx","r":[0,9025],"t":"import * as React from 'react'\nimport {GetServerSideProps} from 'next'\nimport Link from 'next/link'\nimport LoginRequired from '../../components/login-required'\nimport {useRouter} from 'next/router'\nimport CopyToClipboard from '../../components/team/copy-to-clipboard'\nimport {track} from 'utils/analytics'\nimport {loadTeams} from 'lib/teams'\nimport TeamName from '../../components/team/team-name'\nimport {getTokenFromCookieHeaders} from 'utils/auth'\nimport {isEmpty, find} from 'lodash'\nimport BillingSection from 'components/team/billing-section'\nimport MemberTable from 'components/team/member-table'\nimport AccountOwnershipTransfer from 'components/team/account-ownership-transfer'\nimport useSubscriptionDetails from 'hooks/use-subscription-data'\n\nexport type TeamData = {\n  accountId: number\n  name: string\n  inviteUrl: string\n  members: Array<any>\n  numberOfMembers: number\n  capacity: number\n  isFull: boolean\n  accountSlug: string\n  stripeCustomerId: string\n}\n\nconst TeamComposition = ({\n  capacity,\n  numberOfMembers,\n}: {\n  capacity: number\n  numberOfMembers: number\n}) => {\n  const valid =\n    typeof numberOfMembers === 'number' &&\n    numberOfMembers > 0 &&\n    typeof capacity === 'number' &&\n    capacity > 0\n\n  if (valid) {\n    return <span>{`(${numberOfMembers}/${capacity})`}</span>\n  } else {\n    return null\n  }\n}\n\nconst AtCapacityNotice = ({\n  isFull,\n  billingPortalUrl,\n  billingScheme,\n}: {\n  isFull: boolean\n  billingPortalUrl: string | undefined\n  billingScheme: 'tiered' | 'per_unit'\n}) => {\n  if (!isFull) {\n    return null\n  }\n\n  return (\n    (<div\n      className=\"relative px-4 py-1 mt-4 mb-4 leading-normal text-orange-700 bg-orange-100 dark:text-orange-100 dark:bg-orange-800 rounded\"\n      role=\"alert\"\n    >\n      <span className=\"absolute inset-y-0 left-0 flex items-center ml-4\">\n        <svg\n          className=\"w-6 h-6\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n          />\n        </svg>\n      </span>\n      {billingScheme === 'tiered' && (\n        <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n          <span>\n            Your team account is full. You can add more seats to your account\n            through the Stripe Billing Portal.\n          </span>\n          {billingPortalUrl && (\n            <Link\n              href={billingPortalUrl}\n              onClick={() => {\n                track(`clicked manage membership`)\n              }}\n              className=\"transition-all duration-150 ease-in-out font-semibold rounded-md dark:text-yellow-400 dark:hover:text-yellow-300\">\n              \n                Visit Stripe Billing Portal\n              \n            </Link>\n          )}\n        </div>\n      )}\n      {billingScheme === 'per_unit' && (\n        <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n          <span>\n            Your team account is full. Our support team can help you add more\n            seats to your account.\n          </span>\n          <Link\n            href=\"mailto:support@egghead.io\"\n            onClick={() => {\n              track(`clicked contact us for account at capacity`)\n            }}\n            className=\"transition-all duration-150 ease-in-out font-semibold rounded-md dark:text-yellow-400 dark:hover:text-yellow-300\">\n            \n              Contact Us\n            \n          </Link>\n        </div>\n      )}\n    </div>)\n  );\n}\n\ntype TeamPageProps = {\n  team?: TeamData\n  error?: boolean\n}\n\nconst Team = ({team: teamData}: TeamPageProps) => {\n  const router = useRouter()\n  const [members, setMembers] = React.useState<any[]>(teamData?.members || [])\n\n  const teamDataNotAvailable = isEmpty(teamData)\n\n  React.useEffect(() => {\n    if (teamDataNotAvailable) {\n      router.push('/')\n    }\n  }, [teamDataNotAvailable])\n\n  const {subscriptionData, loading: subscriptionDataLoading} =\n    useSubscriptionDetails({\n      stripeCustomerId: teamData?.stripeCustomerId,\n    })\n\n  if (teamData === undefined) return null\n\n  return (\n    <LoginRequired>\n      <div className=\"max-w-screen-xl mx-auto mb-24\">\n        <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold leading-tight md:text-left text-center mt-4 md:mt-0\">\n          Team Account\n        </h1>\n        <p className=\"mt-6 leading-6\">\n          We are in the process of migrating team accounts to our new website.\n          If you would like to manage your account please visit{' '}\n          <a href=\"https://app.egghead.io\">https://app.egghead.io</a> and log in\n          there. If you need direct assistance please dont hesitate to email{' '}\n          <a href=\"mailto:support@egghead.io\">support@egghead.io</a>\n        </p>\n        <TeamName teamData={teamData} />\n        <h2 className=\"font-semibold text-xl mt-16\">Team Members</h2>\n        <p className=\"mt-6\">Your invite link to add new team members is: </p>\n        <div className=\"flex flex-col md:flex-row items-start md:items-center mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n          <code className=\"font-bold bg-gray-100 p-3 rounded-md dark:bg-gray-800\">\n            {teamData.inviteUrl}\n          </code>\n          <CopyToClipboard\n            stringToCopy={teamData.inviteUrl}\n            className=\"inline-block\"\n            label={true}\n          />\n        </div>\n        <AtCapacityNotice\n          isFull={teamData.isFull}\n          billingPortalUrl={subscriptionData.portalUrl}\n          billingScheme={subscriptionData.billingScheme}\n        />\n        <h2 className=\"font-semibold text-xl mt-16\">\n          Current Team Members{' '}\n          <TeamComposition\n            capacity={teamData.capacity}\n            numberOfMembers={members.length}\n          />\n        </h2>\n        <MemberTable\n          accountId={teamData.accountId}\n          members={members}\n          setMembers={setMembers}\n        />\n        <BillingSection\n          subscriptionData={subscriptionData}\n          loading={subscriptionDataLoading}\n        />\n        {!subscriptionDataLoading &&\n          subscriptionData.billingScheme === 'per_unit' && (\n            <div\n              className=\"relative px-4 py-1 mt-4 mb-4 leading-normal text-blue-700 bg-blue-100 dark:text-blue-100 dark:bg-blue-800 rounded\"\n              role=\"alert\"\n            >\n              <span className=\"absolute inset-y-0 left-0 flex items-center ml-4\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"\n                  />\n                </svg>\n              </span>\n              <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n                <span>\n                  Is the size of your team changing?{' '}\n                  <a\n                    className=\"transition-all duration-150 ease-in-out underline font-semibold rounded-md\"\n                    href=\"mailto:support@egghead.io\"\n                  >\n                    Contact us\n                  </a>{' '}\n                  at anytime to adjust the number of seats for your account.\n                </span>\n              </div>\n            </div>\n          )}\n        <AccountOwnershipTransfer accountId={teamData.accountId} />\n      </div>\n    </LoginRequired>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps<TeamPageProps> =\n  async function (context: any) {\n    const {eggheadToken} = getTokenFromCookieHeaders(\n      context.req.headers.cookie as string,\n    )\n\n    const {data: teams = []} = await loadTeams(eggheadToken)\n\n    const fetchedTeam = find(teams, (team) => team.capacity > 0)\n\n    if (fetchedTeam) {\n      const team: TeamData = {\n        accountId: fetchedTeam.id,\n        name: fetchedTeam.name,\n        inviteUrl: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}/team-invite/${fetchedTeam.invite_token}`,\n        members: fetchedTeam.members,\n        numberOfMembers: fetchedTeam.number_of_members,\n        capacity: fetchedTeam.capacity,\n        isFull: fetchedTeam.is_full,\n        accountSlug: fetchedTeam.slug,\n        stripeCustomerId: fetchedTeam.stripe_customer_id,\n      }\n\n      return {\n        props: {\n          team,\n        },\n      }\n    } else {\n      const props = {\n        error: true,\n      }\n\n      return {\n        props,\n      }\n    }\n  }\n\nexport default Team\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/team/index.tsx","r":[0,9025],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {GetServerSideProps} from 'next'\nimport Link from 'next/link'\nimport LoginRequired from '../../components/login-required'\nimport {useRouter} from 'next/router'\nimport CopyToClipboard from '../../components/team/copy-to-clipboard'\nimport {track} from 'utils/analytics'\nimport {loadTeams} from 'lib/teams'\nimport TeamName from '../../components/team/team-name'\nimport {getTokenFromCookieHeaders} from 'utils/auth'\nimport {isEmpty, find} from 'lodash'\nimport BillingSection from 'components/team/billing-section'\nimport MemberTable from 'components/team/member-table'\nimport AccountOwnershipTransfer from 'components/team/account-ownership-transfer'\nimport useSubscriptionDetails from 'hooks/use-subscription-data'\n\nexport type TeamData = {\n  accountId: number\n  name: string\n  inviteUrl: string\n  members: Array<any>\n  numberOfMembers: number\n  capacity: number\n  isFull: boolean\n  accountSlug: string\n  stripeCustomerId: string\n}\n\nconst TeamComposition = ({\n  capacity,\n  numberOfMembers,\n}: {\n  capacity: number\n  numberOfMembers: number\n}) => {\n  const valid =\n    typeof numberOfMembers === 'number' &&\n    numberOfMembers > 0 &&\n    typeof capacity === 'number' &&\n    capacity > 0\n\n  if (valid) {\n    return <span>{`(${numberOfMembers}/${capacity})`}</span>\n  } else {\n    return null\n  }\n}\n\nconst AtCapacityNotice = ({\n  isFull,\n  billingPortalUrl,\n  billingScheme,\n}: {\n  isFull: boolean\n  billingPortalUrl: string | undefined\n  billingScheme: 'tiered' | 'per_unit'\n}) => {\n  if (!isFull) {\n    return null\n  }\n\n  return (\n    <div\n      className=\"relative px-4 py-1 mt-4 mb-4 leading-normal text-orange-700 bg-orange-100 dark:text-orange-100 dark:bg-orange-800 rounded\"\n      role=\"alert\"\n    >\n      <span className=\"absolute inset-y-0 left-0 flex items-center ml-4\">\n        <svg\n          className=\"w-6 h-6\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n          />\n        </svg>\n      </span>\n      {billingScheme === 'tiered' && (\n        <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n          <span>\n            Your team account is full. You can add more seats to your account\n            through the Stripe Billing Portal.\n          </span>\n          {billingPortalUrl && (\n            <Link href={billingPortalUrl}>\n              <a\n                onClick={() => {\n                  track(`clicked manage membership`)\n                }}\n                className=\"transition-all duration-150 ease-in-out font-semibold rounded-md dark:text-yellow-400 dark:hover:text-yellow-300\"\n              >\n                Visit Stripe Billing Portal\n              </a>\n            </Link>\n          )}\n        </div>\n      )}\n      {billingScheme === 'per_unit' && (\n        <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n          <span>\n            Your team account is full. Our support team can help you add more\n            seats to your account.\n          </span>\n          <Link href=\"mailto:support@egghead.io\">\n            <a\n              onClick={() => {\n                track(`clicked contact us for account at capacity`)\n              }}\n              className=\"transition-all duration-150 ease-in-out font-semibold rounded-md dark:text-yellow-400 dark:hover:text-yellow-300\"\n            >\n              Contact Us\n            </a>\n          </Link>\n        </div>\n      )}\n    </div>\n  )\n}\n\ntype TeamPageProps = {\n  team?: TeamData\n  error?: boolean\n}\n\nconst Team = ({team: teamData}: TeamPageProps) => {\n  const router = useRouter()\n  const [members, setMembers] = React.useState<any[]>(teamData?.members || [])\n\n  const teamDataNotAvailable = isEmpty(teamData)\n\n  React.useEffect(() => {\n    if (teamDataNotAvailable) {\n      router.push('/')\n    }\n  }, [teamDataNotAvailable])\n\n  const {subscriptionData, loading: subscriptionDataLoading} =\n    useSubscriptionDetails({\n      stripeCustomerId: teamData?.stripeCustomerId,\n    })\n\n  if (teamData === undefined) return null\n\n  return (\n    <LoginRequired>\n      <div className=\"max-w-screen-xl mx-auto mb-24\">\n        <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold leading-tight md:text-left text-center mt-4 md:mt-0\">\n          Team Account\n        </h1>\n        <p className=\"mt-6 leading-6\">\n          We are in the process of migrating team accounts to our new website.\n          If you would like to manage your account please visit{' '}\n          <a href=\"https://app.egghead.io\">https://app.egghead.io</a> and log in\n          there. If you need direct assistance please dont hesitate to email{' '}\n          <a href=\"mailto:support@egghead.io\">support@egghead.io</a>\n        </p>\n        <TeamName teamData={teamData} />\n        <h2 className=\"font-semibold text-xl mt-16\">Team Members</h2>\n        <p className=\"mt-6\">Your invite link to add new team members is: </p>\n        <div className=\"flex flex-col md:flex-row items-start md:items-center mt-4 space-y-2 md:space-y-0 md:space-x-2\">\n          <code className=\"font-bold bg-gray-100 p-3 rounded-md dark:bg-gray-800\">\n            {teamData.inviteUrl}\n          </code>\n          <CopyToClipboard\n            stringToCopy={teamData.inviteUrl}\n            className=\"inline-block\"\n            label={true}\n          />\n        </div>\n        <AtCapacityNotice\n          isFull={teamData.isFull}\n          billingPortalUrl={subscriptionData.portalUrl}\n          billingScheme={subscriptionData.billingScheme}\n        />\n        <h2 className=\"font-semibold text-xl mt-16\">\n          Current Team Members{' '}\n          <TeamComposition\n            capacity={teamData.capacity}\n            numberOfMembers={members.length}\n          />\n        </h2>\n        <MemberTable\n          accountId={teamData.accountId}\n          members={members}\n          setMembers={setMembers}\n        />\n        <BillingSection\n          subscriptionData={subscriptionData}\n          loading={subscriptionDataLoading}\n        />\n        {!subscriptionDataLoading &&\n          subscriptionData.billingScheme === 'per_unit' && (\n            <div\n              className=\"relative px-4 py-1 mt-4 mb-4 leading-normal text-blue-700 bg-blue-100 dark:text-blue-100 dark:bg-blue-800 rounded\"\n              role=\"alert\"\n            >\n              <span className=\"absolute inset-y-0 left-0 flex items-center ml-4\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"\n                  />\n                </svg>\n              </span>\n              <div className=\"ml-8 flex flex-col space-y-2 p-2\">\n                <span>\n                  Is the size of your team changing?{' '}\n                  <a\n                    className=\"transition-all duration-150 ease-in-out underline font-semibold rounded-md\"\n                    href=\"mailto:support@egghead.io\"\n                  >\n                    Contact us\n                  </a>{' '}\n                  at anytime to adjust the number of seats for your account.\n                </span>\n              </div>\n            </div>\n          )}\n        <AccountOwnershipTransfer accountId={teamData.accountId} />\n      </div>\n    </LoginRequired>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps<TeamPageProps> =\n  async function (context: any) {\n    const {eggheadToken} = getTokenFromCookieHeaders(\n      context.req.headers.cookie as string,\n    )\n\n    const {data: teams = []} = await loadTeams(eggheadToken)\n\n    const fetchedTeam = find(teams, (team) => team.capacity > 0)\n\n    if (fetchedTeam) {\n      const team: TeamData = {\n        accountId: fetchedTeam.id,\n        name: fetchedTeam.name,\n        inviteUrl: `${process.env.NEXT_PUBLIC_DEPLOYMENT_URL}/team-invite/${fetchedTeam.invite_token}`,\n        members: fetchedTeam.members,\n        numberOfMembers: fetchedTeam.number_of_members,\n        capacity: fetchedTeam.capacity,\n        isFull: fetchedTeam.is_full,\n        accountSlug: fetchedTeam.slug,\n        stripeCustomerId: fetchedTeam.stripe_customer_id,\n      }\n\n      return {\n        props: {\n          team,\n        },\n      }\n    } else {\n      const props = {\n        error: true,\n      }\n\n      return {\n        props,\n      }\n    }\n  }\n\nexport default Team\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/team-invite/[token].tsx","r":[0,4709],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {useViewer} from '../../context/viewer-context'\nimport {GetServerSideProps} from 'next'\nimport {AUTH_DOMAIN, getAuthorizationHeader} from 'utils/auth'\nimport axios from 'axios'\nimport toast from 'react-hot-toast'\nimport {useRouter} from 'next/router'\n\nconst handleJoinTeam = async (token: string, router: any) => {\n  try {\n    await axios.post(\n      `${AUTH_DOMAIN}//api/v1/accounts/team_invite/${token}`,\n      {},\n      {\n        headers: {...getAuthorizationHeader()},\n      },\n    )\n\n    toast.success(\"You've successfully joined this team\", {\n      icon: '✅',\n    })\n\n    router.replace('/')\n  } catch (e) {\n    toast.error(\n      \"There was an issue joining the team. Please contact the team's account administrator if the issue persists.\",\n      {\n        duration: 6000,\n        icon: '❌',\n      },\n    )\n  }\n}\n\nconst TeamName = ({teamName}: {teamName: string | undefined}) => {\n  if (!teamName) {\n    return <>their team</>\n  } else {\n    return (\n      <>\n        {' '}\n        the <span className=\"font-bold\">{teamName}</span> team\n      </>\n    )\n  }\n}\n\nconst TOKEN_NOT_RECOGNIZED = 'TOKEN_NOT_RECOGNIZED'\n\nconst TeamInvite: React.FunctionComponent<TeamInviteProps> = ({\n  inviteToken,\n  teamName,\n  teamOwnerEmail,\n}) => {\n  const {authToken, loading} = useViewer()\n  const router = useRouter()\n\n  const alreadySignedIn = !loading && typeof authToken === 'string'\n\n  React.useEffect(() => {\n    if (inviteToken === TOKEN_NOT_RECOGNIZED) {\n      toast.error('This is not a recognized team invite link.', {\n        duration: 6000,\n        icon: '❌',\n      })\n      router.replace('/')\n    }\n  }, [inviteToken])\n\n  return (\n    <section className=\"mb-32\">\n      <div className=\"p-4 w-full\">\n        <div className=\"w-full mx-auto md:py-32 py-16 flex flex-col items-center justify-center text-gray-900 dark:text-trueGray-100\">\n          <h2 className=\"text-center text-3xl leading-9 font-bold\">\n            Team Invite\n          </h2>\n          <div className=\"sm:mt-8 mt-4 sm:mx-auto sm:w-full sm:max-w-xl\">\n            <p className=\"text-center pb-4\">\n              You've been invited by{' '}\n              <span className=\"font-bold\">{teamOwnerEmail}</span> to join{' '}\n              <TeamName teamName={teamName} /> on egghead. Click 'Join Team' to\n              accept the invitation and get full access to everything on\n              egghead.\n            </p>\n            {!alreadySignedIn && (\n              <p className=\"text-center mb-4 p-4 bg-blue-50 dark:bg-gray-800 rounded\">\n                You need to{' '}\n                <a\n                  href=\"/login\"\n                  className=\"text-blue-600 hover:text-blue-800 cursor-pointer transition-colors ease-in-out duration-150\"\n                >\n                  sign in\n                </a>{' '}\n                before you can accept this invitation. Revisit this page after\n                signing in to proceed.\n              </p>\n            )}\n            <div className=\"flex justify-center items-center w-full\">\n              <button\n                className={`text-white bg-green-600 border-0 py-2 px-8 focus:outline-none rounded\n                    ${\n                      alreadySignedIn\n                        ? 'hover:bg-green-700'\n                        : 'cursor-not-allowed opacity-50'\n                    }`}\n                disabled={!alreadySignedIn}\n                onClick={() => handleJoinTeam(inviteToken, router)}\n              >\n                Join Team\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\ntype TeamInviteProps = {\n  teamOwnerEmail: string\n  teamName: string | undefined\n  inviteToken: string\n}\n\nexport const getServerSideProps: GetServerSideProps<TeamInviteProps> = async ({\n  params,\n}) => {\n  try {\n    const token = params && (params.token as string)\n    if (!token) {\n      throw new Error('The invite token is not defined')\n    }\n\n    const viewTeamInviteUrl = `${AUTH_DOMAIN}/api/v1/accounts/team_invite/${token}`\n    const {data} = await axios.get(viewTeamInviteUrl)\n\n    let teamName = null\n    // All accounts were defaulted to have names of 'acc' or 'saml_acc'. We'll\n    // treat the name us `undefined` unless it has been set to something else.\n    if (data.team_name !== 'acc' && data.team_name !== 'saml_acc') {\n      teamName = data.team_name\n    }\n\n    return {\n      props: {\n        teamOwnerEmail: data.team_owner_email,\n        teamName,\n        inviteToken: token,\n      },\n    }\n  } catch (e) {\n    return {\n      props: {\n        teamOwnerEmail: '',\n        teamName: null,\n        inviteToken: TOKEN_NOT_RECOGNIZED,\n      },\n    }\n  }\n}\n\nexport default TeamInvite\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/upload/index.tsx","r":[0,2768],"t":"import * as React from 'react'\nimport ReactS3Uploader from 'react-s3-uploader'\nimport {useViewer} from '../../context/viewer-context'\nimport {getAuthorizationHeader} from '../../utils/auth'\nimport uuid from 'shortid'\nimport fileExtension from 'file-extension'\nimport {find} from 'lodash'\n\ntype FileUpload = {file: File; percent: number; message: string}\n\nconst fileUploadReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'add':\n      return {files: [...state.files, action.fileUpload]}\n    case 'progress':\n      const upload = find<FileUpload>(\n        state.files,\n        (fileUpload) => fileUpload.file === action.file,\n      )\n      if (upload) {\n        upload.percent = action.percent\n        upload.message = action.message\n      }\n\n      return {files: [...state.files]}\n    default:\n      throw new Error()\n  }\n}\n\nconst Upload: React.FC = () => {\n  const [state, dispatch] = React.useReducer(fileUploadReducer, {files: []})\n  const {viewer} = useViewer()\n  const uploaderRef = React.useRef(null)\n\n  return viewer?.s3_signing_url ? (\n    <div>\n      <ReactS3Uploader\n        ref={uploaderRef}\n        multiple\n        //if we set this to `false` we can list all the files and\n        //call `uploaderRef.current.uploadFile()` when we are ready\n        autoUpload={true}\n        signingUrl={viewer.s3_signing_url}\n        // @ts-ignore\n        signingUrlHeaders={getAuthorizationHeader()}\n        accept=\"video/*\"\n        scrubFilename={(fullFilename) => {\n          //filename with no extension\n          const filename = fullFilename.replace(/\\.[^/.]+$/, '')\n          //remove stuff s3 hates\n          const scrubbed = `${filename}-${uuid.generate()}`\n            .replace(/[^\\w\\d_\\-.]+/gi, '')\n            .toLowerCase()\n          //rebuild it as a fresh new thing\n          return `${scrubbed}.${fileExtension(fullFilename)}`\n        }}\n        preprocess={(file, next) => {\n          dispatch({\n            type: 'add',\n            fileUpload: {\n              file,\n              percent: 0,\n              message: 'waiting to upload',\n            },\n          })\n\n          console.log('preprocess', file)\n          next(file)\n        }}\n        onProgress={(percent, message, file) => {\n          dispatch({type: 'progress', file, percent, message})\n        }}\n        onError={(message) => console.log(message)}\n        onFinish={(signResult, file) => {\n          const fileUrl = signResult.signedUrl.split('?')[0]\n          console.log(fileUrl, signResult.publicUrl, file)\n        }}\n      />{' '}\n      {state.files.map((file) => {\n        return (\n          <div key={file.name}>\n            {file.file.name} {file.percent} {file.message}\n          </div>\n        )\n      })}\n    </div>\n  ) : null;\n}\n\nexport default Upload\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/upload/index.tsx","r":[0,2768],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport ReactS3Uploader from 'react-s3-uploader'\nimport {useViewer} from '../../context/viewer-context'\nimport {getAuthorizationHeader} from '../../utils/auth'\nimport uuid from 'shortid'\nimport fileExtension from 'file-extension'\nimport {find} from 'lodash'\n\ntype FileUpload = {file: File; percent: number; message: string}\n\nconst fileUploadReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'add':\n      return {files: [...state.files, action.fileUpload]}\n    case 'progress':\n      const upload = find<FileUpload>(\n        state.files,\n        (fileUpload) => fileUpload.file === action.file,\n      )\n      if (upload) {\n        upload.percent = action.percent\n        upload.message = action.message\n      }\n\n      return {files: [...state.files]}\n    default:\n      throw new Error()\n  }\n}\n\nconst Upload: React.FC = () => {\n  const [state, dispatch] = React.useReducer(fileUploadReducer, {files: []})\n  const {viewer} = useViewer()\n  const uploaderRef = React.useRef(null)\n\n  return viewer?.s3_signing_url ? (\n    <div>\n      <ReactS3Uploader\n        ref={uploaderRef}\n        multiple\n        //if we set this to `false` we can list all the files and\n        //call `uploaderRef.current.uploadFile()` when we are ready\n        autoUpload={true}\n        signingUrl={viewer.s3_signing_url}\n        // @ts-ignore\n        signingUrlHeaders={getAuthorizationHeader()}\n        accept=\"video/*\"\n        scrubFilename={(fullFilename) => {\n          //filename with no extension\n          const filename = fullFilename.replace(/\\.[^/.]+$/, '')\n          //remove stuff s3 hates\n          const scrubbed = `${filename}-${uuid.generate()}`\n            .replace(/[^\\w\\d_\\-.]+/gi, '')\n            .toLowerCase()\n          //rebuild it as a fresh new thing\n          return `${scrubbed}.${fileExtension(fullFilename)}`\n        }}\n        preprocess={(file, next) => {\n          dispatch({\n            type: 'add',\n            fileUpload: {\n              file,\n              percent: 0,\n              message: 'waiting to upload',\n            },\n          })\n\n          console.log('preprocess', file)\n          next(file)\n        }}\n        onProgress={(percent, message, file) => {\n          dispatch({type: 'progress', file, percent, message})\n        }}\n        onError={(message) => console.log(message)}\n        onFinish={(signResult, file) => {\n          const fileUrl = signResult.signedUrl.split('?')[0]\n          console.log(fileUrl, signResult.publicUrl, file)\n        }}\n      />{' '}\n      {state.files.map((file) => {\n        return (\n          <div key={file.name}>\n            {file.file.name} {file.percent} {file.message}\n          </div>\n        )\n      })}\n    </div>\n  ) : null;\n}\n\nexport default Upload\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/upload/index.tsx","r":[0,2768],"t":"import * as React from 'react'\nimport ReactS3Uploader from 'react-s3-uploader'\nimport {useViewer} from '../../context/viewer-context'\nimport {getAuthorizationHeader} from '../../utils/auth'\nimport uuid from 'shortid'\nimport fileExtension from 'file-extension'\nimport {find} from 'lodash'\n\ntype FileUpload = {file: File; percent: number; message: string}\n\nconst fileUploadReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'add':\n      return {files: [...state.files, action.fileUpload]}\n    case 'progress':\n      const upload = find<FileUpload>(\n        state.files,\n        (fileUpload) => fileUpload.file === action.file,\n      )\n      if (upload) {\n        upload.percent = action.percent\n        upload.message = action.message\n      }\n\n      return {files: [...state.files]}\n    default:\n      throw new Error()\n  }\n}\n\nconst Upload: React.FC = () => {\n  const [state, dispatch] = React.useReducer(fileUploadReducer, {files: []})\n  const {viewer} = useViewer()\n  const uploaderRef = React.useRef(null)\n\n  return viewer?.s3_signing_url ? (\n    <div>\n      <ReactS3Uploader\n        ref={uploaderRef}\n        multiple\n        //if we set this to `false` we can list all the files and\n        //call `uploaderRef.current.uploadFile()` when we are ready\n        autoUpload={true}\n        signingUrl={viewer.s3_signing_url}\n        // @ts-ignore\n        signingUrlHeaders={getAuthorizationHeader()}\n        accept=\"video/*\"\n        scrubFilename={(fullFilename) => {\n          //filename with no extension\n          const filename = fullFilename.replace(/\\.[^/.]+$/, '')\n          //remove stuff s3 hates\n          const scrubbed = `${filename}-${uuid.generate()}`\n            .replace(/[^\\w\\d_\\-.]+/gi, '')\n            .toLowerCase()\n          //rebuild it as a fresh new thing\n          return `${scrubbed}.${fileExtension(fullFilename)}`\n        }}\n        preprocess={(file, next) => {\n          dispatch({\n            type: 'add',\n            fileUpload: {\n              file,\n              percent: 0,\n              message: 'waiting to upload',\n            },\n          })\n\n          console.log('preprocess', file)\n          next(file)\n        }}\n        onProgress={(percent, message, file) => {\n          dispatch({type: 'progress', file, percent, message})\n        }}\n        onError={(message) => console.log(message)}\n        onFinish={(signResult, file) => {\n          const fileUrl = signResult.signedUrl.split('?')[0]\n          console.log(fileUrl, signResult.publicUrl, file)\n        }}\n      />{' '}\n      {state.files.map((file) => {\n        return (\n          <div key={file.name}>\n            {file.file.name} {file.percent} {file.message}\n          </div>\n        )\n      })}\n    </div>\n  ) : null;\n}\n\nexport default Upload\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/user/index.tsx","r":[0,4622],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {loadAccount} from 'lib/accounts'\nimport LoginRequired, {LoginRequiredParams} from 'components/login-required'\nimport {useViewer} from 'context/viewer-context'\nimport RequestEmailChangeForm from 'components/users/request-email-change-form'\nimport {get, isEmpty, find, first} from 'lodash'\nimport SubscriptionDetails from 'components/users/subscription-details'\nimport {loadUserProgress} from 'lib/users'\nimport InProgressResource from 'components/pages/users/dashboard/activity/in-progress-resource'\n\nconst GithubConnectButton: React.FunctionComponent<{\n  authToken: string\n}> = ({authToken}) => {\n  return (\n    <a\n      href={`${process.env.NEXT_PUBLIC_AUTH_DOMAIN}/users/github_passthrough?client_id=${process.env.NEXT_PUBLIC_CLIENT_ID}&auth_token=${authToken}`}\n      className=\"text-white bg-blue-600 border-0 py-3 px-4 rounded focus:outline-none hover:bg-blue-700 inline-block\"\n    >\n      Connect your GitHub account\n    </a>\n  )\n}\n\ntype ViewerAccount = {\n  stripe_customer_id: string\n  slug: string\n  subscriptions: any[]\n}\n\nfunction getAccountWithSubscription(accounts: ViewerAccount[]) {\n  // prefer the account with a subscription, otherwise grab the first, or just\n  // an empty object (which would be an error state, but possible)\n  return (\n    find<ViewerAccount>(\n      accounts,\n      (account: ViewerAccount) => account.subscriptions?.length > 0,\n    ) ||\n    first<ViewerAccount>(accounts) || {slug: ''}\n  )\n}\n\nconst User: React.FunctionComponent<\n  LoginRequiredParams & {account: ViewerAccount}\n> = () => {\n  const [account, setAccount] = React.useState<ViewerAccount>()\n  const {viewer, authToken} = useViewer()\n  const [progress, setProgress] = React.useState<any>([])\n  const {email: currentEmail, accounts, providers} = viewer || {}\n  const {slug} = getAccountWithSubscription(accounts)\n  const isConnectedToGithub = providers?.includes('github')\n  const viewerId = viewer?.id\n\n  React.useEffect(() => {\n    const loadProgressForUser = async (viewerId: number) => {\n      if (viewerId) {\n        const {data} = await loadUserProgress(viewerId)\n        setProgress(data)\n      }\n    }\n\n    loadProgressForUser(viewerId)\n  }, [viewerId])\n\n  React.useEffect(() => {\n    const loadAccountForSlug = async (slug: string) => {\n      if (slug) {\n        const account: any = await loadAccount(slug, authToken)\n        setAccount(account)\n      }\n    }\n\n    loadAccountForSlug(slug)\n  }, [slug, authToken])\n\n  return (\n    <LoginRequired>\n      <main className=\"pb-10 lg:py-3 lg:px-8\">\n        <div className=\"max-w-screen-md mx-auto flex flex-col sm:space-y-16 space-y-10\">\n          {/* Account details */}\n          <div className=\"sm:px-6 lg:px-0 lg:col-span-9\">\n            <RequestEmailChangeForm originalEmail={currentEmail} />\n          </div>\n          {/* Connect to GitHub */}\n          {isConnectedToGithub ? (\n            <div className=\"sm:px-6 lg:px-0 lg:col-span-9\">\n              <div className=\"flex flex-col space-y-2\">\n                <h2 className=\"text-xl pb-1 border-b border-gray-200 dark:border-gray-800\">\n                  Your Account is Connected to Github\n                </h2>\n                <p>\n                  You are able to login to egghead using your Github account!\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"sm:px-6 lg:px-0 lg:col-span-9\">\n              <div className=\"flex flex-col space-y-2\">\n                <h2 className=\"text-xl pb-1 border-b border-gray-200 dark:border-gray-800\">\n                  Connect to GitHub\n                </h2>\n                <p>Connect your GitHub account to log in with GitHub Oauth.</p>\n                <div className=\"pt-2\">\n                  <GithubConnectButton authToken={authToken} />\n                </div>\n              </div>\n            </div>\n          )}\n          {account && (\n            <SubscriptionDetails\n              stripeCustomerId={account.stripe_customer_id}\n              slug={slug}\n            />\n          )}\n          {!isEmpty(progress) && (\n            <div className=\"flex flex-col space-y-2\">\n              <h2 className=\"text-xl pb-1 border-b border-gray-200 dark:border-gray-800\">\n                Continue learning\n              </h2>\n              {progress.map((item: any) => {\n                return (\n                  <InProgressResource\n                    key={item.slug}\n                    resource={item.collection}\n                  />\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </main>\n    </LoginRequired>\n  )\n}\n\nexport default User\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/app/header/index.tsx","r":[0,13255],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport Link from '../../link'\nimport Eggo from 'components/icons/eggo'\nimport {useViewer} from 'context/viewer-context'\nimport {track} from 'utils/analytics'\nimport {isEmpty} from 'lodash'\nimport Feedback from 'components/feedback-input'\nimport useBreakpoint from 'utils/breakpoints'\nimport {useRouter} from 'next/router'\nimport useCio from 'hooks/use-cio'\nimport PortfolioFoundationsCTA from 'components/survey/portfolio-foundations'\nimport OnlinePresenceCTA from 'components/survey/online-presence-cta'\nimport {HeaderButtonShapedLink} from './header-button-shaped-link'\nimport SearchBar from './search-bar'\nimport React, { Fragment } from 'react';\nimport {Popover, Transition} from '@headlessui/react'\nimport {\n  ChevronDownIcon,\n  MicrophoneIcon,\n  PresentationChartBarIcon,\n  DocumentTextIcon,\n} from '@heroicons/react/solid'\n\nconst Header: FunctionComponent = () => {\n  const router = useRouter()\n  const {viewer, loading} = useViewer()\n  const {subscriber, loadingSubscriber} = useCio()\n  const {sm} = useBreakpoint()\n  const [isOpen, setOpen] = React.useState<boolean>(false)\n\n  React.useEffect(() => {\n    !sm ? setOpen(sm) : setOpen(false)\n  }, [sm, router])\n\n  const isSearch = router.pathname.includes('/q')\n  const isTopics = router.pathname.includes('/topics')\n\n  const showTeamNavLink =\n    viewer?.accounts &&\n    !isEmpty(\n      viewer.accounts.filter(\n        (account: {account_capacity: string}) =>\n          account.account_capacity === 'team',\n      ),\n    )\n\n  let ActiveCTA: React.FC = () => null\n\n  switch (true) {\n    case viewer?.is_pro && !subscriber?.attributes?.portfolio_foundations:\n      ActiveCTA = () => <PortfolioFoundationsCTA variant=\"header\" />\n      break\n    case !subscriber?.attributes?.online_presence:\n      ActiveCTA = () => <OnlinePresenceCTA variant=\"header\" />\n      break\n    case !subscriber && !loadingSubscriber:\n      ActiveCTA = () => <OnlinePresenceCTA variant=\"header\" />\n      break\n    case !viewer?.is_pro:\n      ActiveCTA = () => (\n        <HeaderButtonShapedLink\n          url=\"/pricing\"\n          label=\"Go Pro\"\n          onClick={() => {\n            track('clicked go pro', {location: 'header'})\n          }}\n        />\n      )\n      break\n    default:\n      ActiveCTA = () => null\n  }\n\n  const Navigation: FunctionComponent<{\n    className?: string\n  }> = ({\n    className = 'flex items-center justify-center space-x-1',\n    children,\n  }) => {\n    return !loading ? (\n      <div className=\"text-sm flex-shrink-0\">\n        {viewer ? (\n          <div className={className}>\n            {children}\n            <ActiveCTA />\n            <Feedback\n              user={viewer}\n              className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-white active:bg-gray-200 rounded-md inline-flex transition-all ease-in-out duration-300 leading-tight\"\n            >\n              Feedback\n            </Feedback>\n            {!isEmpty(viewer) && (\n              <Link href={`/bookmarks`}>\n                <a\n                  onClick={() =>\n                    track('clicked bookmarks', {\n                      location: 'header',\n                    })\n                  }\n                  className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 active:bg-gray-200 dark:hover:text-white rounded-md inline-flex transition-all ease-in-out duration-300 leading-tight\"\n                >\n                  Bookmarks\n                </a>\n              </Link>\n            )}\n            {showTeamNavLink && (\n              <Link href={`/team`}>\n                <a\n                  onClick={() =>\n                    track('clicked team', {\n                      location: 'header',\n                    })\n                  }\n                  className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 active:bg-gray-200 dark:hover:text-black rounded-md inline-flex transition-all ease-in-out duration-300 leading-tight\"\n                >\n                  Team\n                </a>\n              </Link>\n            )}\n            <Link href=\"/user\">\n              <a\n                onClick={() =>\n                  track('clicked account', {\n                    location: 'header',\n                  })\n                }\n                className=\"flex items-center space-x-2 p-3 hover:text-blue-700 dark:hover:text-blue-300 hover:underline\"\n              >\n                <img\n                  alt=\"avatar\"\n                  className=\"w-8 rounded-full\"\n                  src={viewer.avatar_url}\n                />\n                <span>\n                  {viewer.name}\n                  {viewer.is_pro && ' ⭐️'}\n                </span>\n              </a>\n            </Link>\n          </div>\n        ) : (\n          <div className={className}>\n            <ActiveCTA />\n            {children}\n            <Link href=\"/login\" activeClassName=\"bg-gray-100 dark:bg-gray-400\">\n              <a\n                onClick={() =>\n                  track('clicked sign in', {\n                    location: 'header',\n                  })\n                }\n                className=\"px-3 py-2 dark:active:text-gray-900 dark:text-gray-200 dark:border-gray-200 hover:opacity-100 hover:bg-gray-100  dark:hover:bg-gray-800  dark:active:bg-gray-700 active:bg-gray-100 rounded-md inline-flex transition-all ease-in-out duration-300\"\n              >\n                Sign in\n              </a>\n            </Link>\n          </div>\n        )}\n      </div>\n    ) : null\n  }\n\n  return (\n    <>\n      <header className=\"h-16 px-5 py-5 dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800 flex items-center justify-between print:hidden dark:text-gray-100\">\n        <div className=\"flex items-center justify-between w-full max-w-screen-xl mx-auto space-x-4\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <a className=\"flex items-center\">\n                <Eggo className=\"w-8 mr-1\" />\n                <span className=\"sm:inline-block hidden text-lg font-semibold dark:text-gray-200\">\n                  egghead.io\n                </span>\n              </a>\n            </Link>\n          </div>\n          {!sm && !isTopics && (\n            <div className={`${isSearch ? 'flex-grow' : ''}`}>\n              <FlyoutMenu />\n            </div>\n          )}\n          {!sm && !isSearch && <SearchBar />}\n          {!sm && <Navigation></Navigation>}\n          {sm && !loading && (\n            <button\n              onClick={() => setOpen(!isOpen)}\n              aria-labelledby=\"menubutton\"\n              aria-expanded={isOpen}\n              className=\"p-1 -mr-2\"\n            >\n              {isOpen ? <IconX /> : <IconMenu />}\n            </button>\n          )}\n        </div>\n      </header>\n      {isOpen && (\n        <>\n          <Navigation className=\"flex flex-col items-start bg-white dark:bg-gray-900 p-3 w-full space-y-2 absolute top-14 z-50 shadow-xl dark:text-gray-100\">\n            {!isSearch && <SearchBar />}\n          </Navigation>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Header\n\nconst IconMenu = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        d=\"M4 6h16M4 12h16M4 18h16\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n  </svg>\n)\n\nconst IconX = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        d=\"M6 18L18 6M6 6l12 12\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </g>\n  </svg>\n)\n\nconst FlyoutMenu = () => {\n  const browse = [\n    {\n      name: 'React',\n      href: '/q/react',\n    },\n    {\n      name: 'JavaScript',\n      href: '/q/javascript',\n    },\n    {name: 'Angular', href: '/q/angular'},\n    {\n      name: 'CSS',\n      href: '/q/css',\n    },\n    {\n      name: 'TypeScript',\n      href: '/q/typescript',\n    },\n    {\n      name: 'AWS',\n      href: '/q/aws',\n    },\n    {\n      name: 'Node.js',\n      href: '/q/node',\n    },\n    {\n      name: 'Next.js',\n      href: '/q/next',\n    },\n    {\n      name: 'Docker',\n      href: '/q/docker',\n    },\n    {\n      name: 'Vue.js',\n      href: '/q/vue',\n    },\n    {\n      name: 'ReactNative',\n      href: '/q/react-native',\n    },\n    {\n      name: 'Algolia',\n      href: '/q/algolia',\n    },\n    {\n      name: 'Python',\n      href: '/q/python',\n    },\n    {\n      name: 'Go',\n      href: '/q/go',\n    },\n  ]\n  const contentSectionLinks = [\n    {name: 'Articles', href: '/blog', icon: DocumentTextIcon},\n    {name: 'Podcasts', href: '/q?type=podcast', icon: MicrophoneIcon},\n    {name: 'Talks', href: '/q?type=talk', icon: PresentationChartBarIcon},\n  ]\n\n  function classNames(...classes: any) {\n    return classes.filter(Boolean).join(' ')\n  }\n\n  return (\n    <div>\n      <Popover className=\"relative\">\n        {({open}) => (\n          <>\n            <Popover.Button\n              className={classNames(\n                open\n                  ? 'hover:bg-gray-100 dark:hover:bg-gray-800'\n                  : 'active:bg-gray-200 dark:hover:text-white',\n                'group rounded-md inline-flex items-center text-base font-medium  focus:outline-none focus:ring-2 focus:ring-offset-2 px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 active:bg-gray-200 dark:hover:text-white transition-all ease-in-out duration-200',\n              )}\n            >\n              <span>Browse</span>\n              <ChevronDownIcon\n                className={classNames(\n                  open\n                    ? 'hover:bg-gray-100 dark:hover:bg-gray-800'\n                    : 'active:bg-gray-200 dark:hover:text-white',\n                  'ml-2 h-5 w-5',\n                )}\n                aria-hidden=\"true\"\n              />\n            </Popover.Button>\n            <Transition\n              show={open}\n              as={Fragment}\n              enter=\"transition ease-out duration-200\"\n              enterFrom=\"opacity-0 translate-y-1\"\n              enterTo=\"opacity-100 translate-y-0\"\n              leave=\"transition ease-in duration-150\"\n              leaveFrom=\"opacity-100 translate-y-0\"\n              leaveTo=\"opacity-0 translate-y-1\"\n            >\n              <Popover.Panel\n                static\n                className=\"absolute z-20 mt-3 px-2 w-screen max-w-xl sm:px-0 min-w-max\"\n              >\n                <div className=\"rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 overflow-hidden\">\n                  <div className=\"relative grid grid-cols-flyoutmenu bg-white dark:bg-gray-800 px-7 py-6 gap-1\">\n                    {browse.map((item) => (\n                      <a\n                        key={item.name}\n                        href={item.href}\n                        onClick={() =>\n                          track(`clicked topic`, {resource: item.href})\n                        }\n                        className=\"flex items-start rounded-lg transition ease-in-out duration-150 hover:bg-gray-100 dark:hover:bg-gray-900 py-2 px-3\"\n                      >\n                        <p className=\"text-base font-medium text-gray-700 transition ease-in-out duration-150 dark:text-white hover:text-black\">\n                          {item.name}\n                        </p>\n                      </a>\n                    ))}\n                    <div className=\"mr-6 text-base font-medium  transition ease-in-out duration-150 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-900 py-2 px-3\">\n                      <a\n                        href=\"/topics\"\n                        onClick={() => track(`clicked all topics`)}\n                        className=\"text-blue-500\"\n                      >\n                        Browse all topics <span aria-hidden=\"true\">&rarr;</span>\n                      </a>\n                    </div>\n                  </div>\n                  <div className=\"relative grid grid-cols-flyoutmenu bg-gray-100 dark:bg-gray-700 px-7 py-5 gap-1\">\n                    {contentSectionLinks.map((item) => (\n                      <div key={item.name} className=\"flow-root\">\n                        <a\n                          href={item.href}\n                          onClick={() =>\n                            track(`clicked browse section`, {\n                              resource: item.href,\n                            })\n                          }\n                          className=\"flex items-center rounded-md text-base text-gray-700 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-900 font-medium transition ease-in-out duration-150 py-3 px-3\"\n                        >\n                          <item.icon\n                            className=\"flex-shrink-0 h-6 w-6 text-gray-400\"\n                            aria-hidden=\"true\"\n                          />\n                          <span className=\"ml-3\">{item.name}</span>\n                        </a>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </Popover.Panel>\n            </Transition>\n          </>\n        )}\n      </Popover>\n    </div>\n  )\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/forms/quiz/multiple-choice-question.tsx","r":[0,3930],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport Markdown from 'react-markdown'\nimport useQuestion from 'hooks/use-question'\nimport SubmitButton from './submit'\nimport CompletedMessage from 'components/forms/quiz/completed-message'\nimport shuffle from 'lodash/shuffle'\nimport {Question, Questions} from 'types'\n\nconst MultipleChoiceQuestion: FunctionComponent<{\n  question: Question\n  questions: Questions\n}> = ({question, questions}) => {\n  const {\n    formik,\n    onAnswer,\n    hasMultipleCorrectAnswers,\n    isCorrectAnswer,\n    isSubmitting,\n    answeredCorrectly,\n    isAnswered,\n  } = useQuestion(question)\n\n  const [choices, setChoices] = React.useState<any>([])\n\n  React.useEffect(() => {\n    setChoices(shuffle(question?.choices))\n  }, [])\n\n  return (\n    <form onSubmit={onAnswer} className=\"w-full\">\n      <fieldset>\n        <legend className=\"lg:text-4xl sm:text-3xl text-2xl font-semibold pb-6\">\n          <Markdown\n            className=\"prose sm:prose-xl prose-lg\"\n            children={question?.question}\n          />\n        </legend>\n        <ul className=\"flex flex-col\">\n          {choices?.map((choice: any) => (\n            <li>\n              <label\n                key={choice.answer}\n                className={`text-lg font-medium group flex sm:items-center items-baseline rounded-lg sm:p-4 p-3 mb-2 border transition-all ease-in-our duration-200 ${\n                  isAnswered ? 'cursor-default' : 'cursor-pointer'\n                }  ${\n                  isAnswered\n                    ? isCorrectAnswer(choice)\n                      ? 'bg-teal-50 text-teal-600 border-teal-200'\n                      : 'bg-pink-50 text-pink-600 border-pink-100'\n                    : 'border-gray-100 bg-gray-50 hover:bg-gray-100'\n                }`}\n              >\n                <input\n                  type={hasMultipleCorrectAnswers ? 'checkbox' : 'radio'}\n                  name=\"answer\"\n                  value={choice.answer}\n                  onChange={formik.handleChange}\n                  disabled={isAnswered}\n                  className={`${\n                    hasMultipleCorrectAnswers\n                      ? 'form-checkbox sm:translate-y-0'\n                      : 'form-radio sm:-translate-y-px'\n                  } border-gray-400 translate-y-1`}\n                />\n                <div className=\"flex sm:flex-row flex-col sm:items-center justify-between relative w-full pl-2 leading-tighter\">\n                  <span className=\"flex-grow\">{choice.label}</span>\n                  {isAnswered && (\n                    <span\n                      className={`text-xs px-2 rounded-full flex-shrink-0 ${\n                        isCorrectAnswer(choice) ? 'bg-teal-100' : 'bg-pink-100'\n                      }`}\n                    >\n                      {isCorrectAnswer(choice) ? 'correct' : 'incorrect'}\n                    </span>\n                  )}\n                </div>\n              </label>\n            </li>\n          ))}\n        </ul>\n      </fieldset>\n      {/* <textarea name=\"comment\" onChange={formik.handleChange} /> */}\n      {!isAnswered && (\n        <div className=\"w-full py-5\">\n          {formik.errors.answer && (\n            <div className=\"pb-5 font-medium text-lg\">\n              <span role=\"img\" aria-label=\"Alert\">\n                ⚠️\n              </span>{' '}\n              {formik.errors.answer}\n            </div>\n          )}\n\n          <SubmitButton isAnswered={isAnswered} isSubmitting={isSubmitting} />\n        </div>\n      )}\n      {isAnswered && question?.answer && (\n        <Markdown\n          children={question.answer}\n          className=\"prose sm:prose-xl prose-lg pt-5\"\n        />\n      )}\n      {isAnswered && (\n        <CompletedMessage\n          answeredCorrectly={answeredCorrectly}\n          question={question}\n          questions={questions}\n        />\n      )}\n    </form>\n  )\n}\n\nexport default MultipleChoiceQuestion\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/dialog-button.tsx","r":[0,2352],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport LockIcon from '../../icons/lock'\nimport {DialogOverlay, DialogContent} from '@reach/dialog'\nimport {useId} from '@reach/auto-id'\n\nconst DialogButton = ({title, buttonStyles, buttonText, children}: any) => {\n  const [showDialog, setShowDialog] = React.useState(false)\n\n  const openDialog = () => {\n    setShowDialog(true)\n  }\n\n  const closeDialog = () => {\n    setShowDialog(false)\n  }\n\n  const labelId = `label--${useId(title)}`\n\n  return (\n    <>\n      <button className={buttonStyles && buttonStyles} onClick={openDialog}>\n        <LockIcon className=\"h-4 w-4 mr-2\" /> {buttonText}\n      </button>\n      <DialogOverlay\n        isOpen={showDialog}\n        onDismiss={closeDialog}\n        className=\"bg-black/50 backdrop-blur-sm flex justify-center items-center px-4 py-6 xs:px-6 xs:py-8 z-50\"\n      >\n        <DialogContent\n          aria-labelledby={labelId}\n          className=\"bg-white dark:bg-gray-900 shadow-lg rounded-lg max-w-screen-sm border dark:border-gray-800 relative xs:px-6 py-6\"\n          style={{width: '28rem'}}\n        >\n          <div className=\"w-full flex flex-col mt-3 mb-3\">\n            {title && (\n              <h4\n                id={labelId}\n                className=\"text-xl sm:text-2xl mb-3 font-semibold text-center px-0 sm:px-6 leading-7 sm:leading-9\"\n              >\n                {title}\n              </h4>\n            )}\n            <div className=\"flex flex-col space-y-4\">{children}</div>\n          </div>\n          <div className=\"block absolute top-0 right-0 pt-3 pr-3\">\n            <button\n              onClick={closeDialog}\n              type=\"button\"\n              className={`text-gray-500 dark:text-gray-400 hover:bg-blue-100 hover:text-blue-600 dark:hover:text-blue-300 dark:hover:bg-gray-700 p-1 focus:shadow-outline-blue transition-all rounded-full hover:scale-110 ease-in-out duration-200`}\n              aria-label=\"Close\"\n            >\n              <span className=\"sr-only\">close dialog</span>\n              {/* prettier-ignore */}\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" /></svg>\n            </button>\n          </div>\n        </DialogContent>\n      </DialogOverlay>\n    </>\n  )\n}\n\nexport default DialogButton\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/instructor-profile.tsx","r":[0,1154],"t":"import Link from 'next/link'\nimport * as React from 'react'\nimport Markdown from 'react-markdown'\n\nconst InstructorProfile: React.FunctionComponent<{\n  name: string\n  avatar_url: string\n  url: string\n  bio_short?: string\n  twitter?: string\n  className?: string\n}> = ({className, url, name, avatar_url, bio_short, twitter}) => (\n  <div className={className ? className : ''}>\n    <div className=\"flex flex-shrink-0\">\n      <div\n        className=\"sm:w-10 sm:h-10 w-8 h-8 rounded-full flex-shrink-0\"\n        style={{\n          background: `url(${avatar_url})`,\n          backgroundSize: 'cover',\n        }}\n      />\n      <div className=\"sm:pl-2 pl-1 flex flex-col justify-center\">\n        <h4 className=\"text-gray-700 dark:text-gray-400 text-sm leading-tighter\">\n          Instructor\n        </h4>\n        <Link\n          href={`/q/resources-by-${url}`}\n          className=\"flex hover:underline flex-shrink-0\">\n\n          <span className=\"font-semibold text-base\">{name}</span>\n\n        </Link>\n      </div>\n    </div>\n    {/* {twitter && <div className=\"text-gray-600 text-sm\">@{twitter}</div>} */}\n  </div>\n)\n\nexport default InstructorProfile\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/learner-ratings.tsx","r":[0,3284],"t":"import React from \"react\";\nimport {isEmpty} from 'lodash'\nimport axios from 'utils/configured-axios'\nimport React, * as React from 'react';\nimport {loadRatings} from 'lib/ratings'\nimport FiveStars from 'components/five-stars'\nimport friendlyTime from 'friendly-time'\nimport Image from 'next/image'\nimport Markdown from '../../markdown'\n\nconst LearnerRatings: React.FunctionComponent<{collection: any}> = ({\n  collection,\n}) => {\n  const [ratings, setRatings] = React.useState(\n    collection?.ratings_with_comment?.data || [],\n  )\n  const [loadingRatings, setLoadingRatings] = React.useState(true)\n  const {type, slug} = collection\n\n  React.useEffect(() => {\n    if (!isEmpty(ratings)) {\n      setLoadingRatings(false)\n    }\n    if (loadingRatings) {\n      setLoadingRatings(false)\n      loadRatings(slug, type).then((ratings: any) => {\n        setRatings(ratings)\n      })\n    }\n  }, [loadingRatings, type, slug, ratings])\n\n  return isEmpty(ratings) ? null : (\n    <div className=\"mt-8 \">\n      <h2 className=\"text-lg font-semibold mb-3\">Learner Reviews</h2>\n      <ul className=\"space-y-5 md:space-y-0  md:grid-cols-2 grid gap-3\">\n        {ratings.map((rating: any) => {\n          const {comment, rating_out_of_5, user, created_at} = rating\n\n          const displayAdminContent =\n            !rating.hidden &&\n            (!isEmpty(comment.hide_url) || !isEmpty(comment.restore_url))\n          return (\n            <li\n              key={`rating-${rating.id}`}\n              className={`space-y-2 dark:border-gray-800 border rounded-md p-4 ${\n                rating.hidden && 'hidden'\n              }`}\n            >\n              <div className=\" flex items-center space-x-3\">\n                <div>\n                  <Image\n                    className=\"rounded-full\"\n                    src={\n                      user.avatar_url.includes('gravatar')\n                        ? `https:${user.avatar_url}`\n                        : user.avatar_url\n                    }\n                    width={32}\n                    height={32}\n                  />\n                </div>\n                <div className=\"font-bold\">{user.full_name || 'Learner'}</div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {friendlyTime(new Date(created_at))}\n                </div>\n              </div>\n              <FiveStars rating={rating_out_of_5} />\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                {comment.prompt}\n              </div>\n              <div className=\"prose dark:prose-dark overflow-hidden\">\n                <Markdown>{comment.comment}</Markdown>\n              </div>\n              {displayAdminContent && (\n                <button\n                  className=\"dark:text-gray-900 rounded text-xs px-2 py-1 flex justify-center items-center bg-gray-100 hover:bg-gray-200 transition-colors duration-150 ease-in-out\"\n                  onClick={() => {\n                    rating.hidden = true\n                    axios.post(comment.hide_url).then(() => {\n                      setLoadingRatings(true)\n                    })\n                  }}\n                >\n                  hide\n                </button>\n              )}\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default LearnerRatings\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/membership-dialog-button.tsx","r":[0,1403],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport FeaturesList from '../../pro-member-features'\nimport DialogButton from './dialog-button'\n\nconst MembershipDialogButton = ({title, children, buttonText}: any) => {\n  return (\n    (<DialogButton\n      buttonText={buttonText}\n      title={title}\n      buttonStyles=\"text-gray-600 dark:text-gray-300 flex flex-row items-center rounded hover:bg-gray-100 \n        dark:hover:bg-gray-700 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 px-4 py-2 border transition-colors text-sm xs:text-base ease-in-out opacity-90 shadow-sm\"\n    >\n      <p className=\"max-w-10 text-center text-gray-700 dark:text-gray-400\">\n        {children}\n      </p>\n      <p className=\"uppercase text-sm tracking-wide text-gray-500 font-bold text-center border-t border-gray-200 dark:border-gray-700 pt-5\">\n        Membership includes\n      </p>\n      <FeaturesList />\n      <Link\n        href=\"/pricing\"\n        className=\"w-full inline-flex justify-center rounded-md text-blue-600 transition-all hover:text-blue-800 ease-in-out duration-200\">\n\n        <button className=\"font-semibold w-full inline-flex justify-center py-4 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200\">\n          Become a Member\n        </button>\n\n      </Link>\n    </DialogButton>)\n  );\n}\n\nexport default MembershipDialogButton\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/play-icon.tsx","r":[0,873],"t":"import * as React from 'react'\n\nconst PlayIcon: React.FunctionComponent<{className: string}> = ({\n  className,\n}) => {\n  return (\n    // prettier-ignore\n    (<svg className={className ? className : \"\"} xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(-5 -4)\"><polygon points=\"0 0 24 0 24 24 0 24\"/><path fill=\"currentColor\" fillRule=\"nonzero\" d=\"M19.376,12.416 L8.777,19.482 C8.62358728,19.5840889 8.42645668,19.5935191 8.26399944,19.5065407 C8.10154219,19.4195623 8,19.2502759 8,19.066 L8,4.934 C8,4.74972414 8.10154219,4.58043768 8.26399944,4.49345928 C8.42645668,4.40648088 8.62358728,4.41591114 8.777,4.518 L19.376,11.584 C19.5150776,11.6767366 19.5986122,11.8328395 19.5986122,12 C19.5986122,12.1671605 19.5150776,12.3232634 19.376,12.416 Z\"/></g></svg>)\n  );\n}\n\nexport default PlayIcon\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/play-icon.tsx","r":[0,873],"t":"import * as React from 'react'\n\nconst PlayIcon: React.FunctionComponent<{className: string}> = ({\n  className,\n}) => {\n  return (\n    // prettier-ignore\n    (<svg className={className ? className : \"\"} xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(-5 -4)\"><polygon points=\"0 0 24 0 24 24 0 24\"/><path fill=\"currentColor\" fillRule=\"nonzero\" d=\"M19.376,12.416 L8.777,19.482 C8.62358728,19.5840889 8.42645668,19.5935191 8.26399944,19.5065407 C8.10154219,19.4195623 8,19.2502759 8,19.066 L8,4.934 C8,4.74972414 8.10154219,4.58043768 8.26399944,4.49345928 C8.42645668,4.40648088 8.62358728,4.41591114 8.777,4.518 L19.376,11.584 C19.5150776,11.6767366 19.5986122,11.8328395 19.5986122,12 C19.5986122,12.1671605 19.5150776,12.3232634 19.376,12.416 Z\"/></g></svg>)\n  );\n}\n\nexport default PlayIcon\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/courses/play-icon.tsx","r":[0,873],"t":"import * as React from 'react'\n\nconst PlayIcon: React.FunctionComponent<{className: string}> = ({\n  className,\n}) => {\n  return (\n    // prettier-ignore\n    (<svg className={className ? className : \"\"} xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 16 16\"><g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(-5 -4)\"><polygon points=\"0 0 24 0 24 24 0 24\"/><path fill=\"currentColor\" fillRule=\"nonzero\" d=\"M19.376,12.416 L8.777,19.482 C8.62358728,19.5840889 8.42645668,19.5935191 8.26399944,19.5065407 C8.10154219,19.4195623 8,19.2502759 8,19.066 L8,4.934 C8,4.74972414 8.10154219,4.58043768 8.26399944,4.49345928 C8.42645668,4.40648088 8.62358728,4.41591114 8.777,4.518 L19.376,11.584 C19.5150776,11.6767366 19.5986122,11.8328395 19.5986122,12 C19.5986122,12.1671605 19.5150776,12.3232634 19.376,12.416 Z\"/></g></svg>)\n  );\n}\n\nexport default PlayIcon\n","c":"nextImageExperimental"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/home/header.tsx","r":[0,2596],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\n\ntype HeaderProps = {\n  heading?: string\n  subheading?: string\n  primaryCta?: {\n    label?: string\n    url?: string\n  }\n  secondaryCta?: {\n    label?: string\n    url?: string\n  }\n}\n\nconst Header: FunctionComponent<HeaderProps> = ({\n  heading = `Craft your developer portfolio and get a better job in 2021`,\n  subheading = `learn modern frameworks, libraries, and tools to build real-world projects and improve your public body of work to shine as a professional web developer`,\n  primaryCta = {label: 'Create an account', url: '/login'},\n  secondaryCta = {label: 'Learn more', url: '/about'},\n}) => {\n  return (\n    (<header className=\"md:px-16 px-8 md:py-24 py-16 md:-mt-5 md:rounded-b-lg md:rounded-t-none rounded-lg bg-gray-900 text-white relative overflow-hidden\">\n      <div className=\"relative z-10\">\n        <div className=\"text-center space-y-5 max-w-2xl mx-auto\">\n          <h1 className=\"md:text-3xl text-2xl font-extrabold leading-tighter tracking-tight\">\n            {heading}\n          </h1>\n          <h2 className=\"md:text-xl text-lg font-light leading-tight\">\n            {subheading}\n          </h2>\n        </div>\n        {primaryCta || secondaryCta ? (\n          <div className=\"pt-10 flex md:flex-row flex-col md:space-y-0 space-y-4 items-center justify-center space-x-2\">\n            {primaryCta.url && (\n              <Link\n                href={primaryCta.url}\n                className=\"md:w-auto w-full px-5 py-3 text-center rounded-md bg-blue-600 text-white font-semibold shadow-lg hover:bg-indigo-600 hover:scale-105 transition-all duration-150 ease-in-out\">\n\n                {primaryCta.label}\n\n              </Link>\n            )}\n            {secondaryCta.url && (\n              <Link\n                href={secondaryCta.url}\n                className=\"md:w-auto w-full px-5 py-3 text-center rounded-md bg-white text-black bg-opacity-100 hover:bg-opacity-100 font-semibold shadow-lg hover:bg-blue-50 hover:scale-105 transition-all duration-150 ease-in-out\">\n\n                {secondaryCta.label}\n\n              </Link>\n            )}\n          </div>\n        ) : null}\n      </div>\n      <Image\n        src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608137337/next.egghead.io/pages/home/header_2x.png\"\n        layout=\"fill\"\n        priority={true}\n        quality={100}\n        objectFit=\"cover\"\n        className=\"absolute left-0 top-0 z-0\"\n        alt=\"\"\n      />\n    </header>)\n  );\n}\n\nexport default Header\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/home/index.tsx","r":[0,15098],"t":"import React, {FunctionComponent} from 'react'\nimport {Card} from 'components/card'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {map, get, find} from 'lodash'\nimport Markdown from 'react-markdown'\nimport {useViewer} from 'context/viewer-context'\nimport {loadUserProgress} from 'lib/users'\nimport {track} from 'utils/analytics'\nimport axios from 'utils/configured-axios'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\nimport Jumbotron from 'components/pages/home/jumbotron'\nimport {CardResource} from 'types'\nimport {VerticalResourceCard} from '../../card/verticle-resource-card'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nconst Home: FunctionComponent<any> = ({homePageData}) => {\n  const location = 'home landing'\n  const {viewer, loading} = useViewer()\n  const [progress, setProgress] = React.useState<any>([])\n\n  const topics: any = get(homePageData, 'topics')\n\n  const findFeature = (featureName: string) => {\n    return find(homePageData?.homePageFeatures?.features, [\n      'slug.current',\n      featureName,\n    ])\n  }\n\n  const featureDigitalGardening: any = get(\n    homePageData,\n    'featureDigitalGardening',\n  )\n  const featureWhatsNew: any = get(homePageData, 'featureWhatsNew')\n\n  const reactFeatures = findFeature('react-features')\n  const kcdFeatures = findFeature('kent-c-dodds-features')\n  const javascriptFeatures = findFeature('javascript-features')\n  const cssFeatures = findFeature('css-features')\n  const reduxFeatures = findFeature('redux-features')\n  const typescriptFeatures = findFeature('typescript-features')\n  const awsFeatures = findFeature('aws-features')\n\n  React.useEffect(() => {\n    if (viewer) {\n      const loadProgressForUser = async (user_id: number) => {\n        if (user_id) {\n          const {data} = await loadUserProgress(user_id)\n          setProgress(data)\n        }\n      }\n\n      loadProgressForUser(viewer.id)\n    }\n  }, [viewer?.id])\n\n  return (<>\n    <div className=\"mt-8\">\n      <WhatsNew resource={featureWhatsNew} />\n\n      <section className=\"mt-32\">\n        <h2 className=\"md:text-xl text-lg sm:font-semibold font-bold mb-3 dark:text-white text-center\">\n          Browse Curated Developer Resources on the Best Tools\n        </h2>\n        <TopicsList topics={topics} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={reactFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <InstructorFeatureRow resource={kcdFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={javascriptFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <div className=\"flex items-center justify-center bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-50 overflow-hidden rounded-lg shadow-sm\">\n          <div className=\"px-5 sm:py-16 py-10 sm:text-left text-center\">\n            <div className=\"space-y-5 mx-auto flex items-center justify-center lg:px-8 w-full\">\n              <div className=\"w-full\">\n                <div className=\"grid sm:grid-cols-3 grid-cols-1 gap-5 mb-5\">\n                  <div className=\"sm:col-span-1 flex-shrink-0 text-center mb-4\">\n                    <Link\n                      href={featureDigitalGardening.path}\n                      tabIndex={-1}\n                      onClick={() => {\n                        track('clicked resource', {\n                          resource: featureDigitalGardening.path,\n                          location,\n                        })\n                      }}>\n\n                      <Image\n                        quality={100}\n                        src={\n                          'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1617475003/egghead-next-pages/home-page/eggo-gardening.png'\n                        }\n                        width={250}\n                        height={305}\n                        alt={featureDigitalGardening.title}\n                      />\n\n                    </Link>\n                  </div>\n                  <div className=\"sm:col-span-2 flex flex-col sm:items-start items-center w-full\">\n                    <h3 className=\"text-xs text-green-600 dark:text-green-300 uppercase font-semibold mb-2\">\n                      Learn in public with a digital garden\n                    </h3>\n                    <Link\n                      href={featureDigitalGardening.path}\n                      className=\"font-bold hover:text-blue-600 dark:hover:text-blue-300 transition ease-in-out\"\n                      onClick={() => {\n                        track('clicked resource', {\n                          resource: featureDigitalGardening.path,\n                          location,\n                        })\n                      }}>\n\n                      <h2 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                        {featureDigitalGardening.title}\n                      </h2>\n\n                    </Link>\n                    <div>\n                      <Markdown className=\"prose dark:prose-dark dark:prose-sm-dark mt-4\">\n                        {featureDigitalGardening.description}\n                      </Markdown>\n                      <Markdown className=\"prose dark:prose-dark dark:prose-sm-dark mt-4 font-medium\">\n                        {featureDigitalGardening.quote.description}\n                      </Markdown>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid md:grid-cols-3 grid-cols-1 gap-5 mt-12\">\n                  {featureDigitalGardening.featured.courses.map(\n                    (resource: any) => {\n                      return (\n                        <VerticalResourceCard\n                          className=\"col-span-3 sm:col-span-1 text-center shadow\"\n                          key={resource.path}\n                          resource={resource}\n                          location={location}\n                        />\n                      )\n                    },\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={awsFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={cssFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={reduxFeatures} />\n      </section>\n\n      <section className=\"mt-20 sm:mt-24\">\n        <FeatureRow resource={typescriptFeatures} />\n      </section>\n    </div>\n  </>);\n}\n\nconst TopicsList: React.FunctionComponent<{topics: CardResource}> = ({\n  topics,\n}) => {\n  const allTopics = get(topics, 'resources', [])\n  return (<>\n    <div className=\"w-full\">\n      <ul\n        className={`grid sm:grid-cols-4 md:grid-cols-8 grid-cols-2 sm:gap-5 md:gap-3 lg:gap-6 gap-4`}\n      >\n        {map(allTopics, (resource) => (\n          <li key={resource.path}>\n            <Link\n              href={resource.path}\n              onClick={() => {\n                track('clicked home page topic', {\n                  topic: resource.title,\n                })\n                axios.post(`/api/topic`, {\n                  topic: resource.slug,\n                  amount: 1,\n                })\n              }}\n              className=\"w-full scale-100 hover:scale-105 transition-all ease-in-out duration-150 rounded-md py-2 px-3 space-x-1 text-base dark:text-white tracking-tight font-bold leading-tight flex items-center hover:text-blue-600\">\n\n              <div className=\"w-full flex flex-col items-center justify-center px-3 py-8 space-y-4\">\n                {resource.image && (\n                  <div className=\"flex items-center\">\n                    <Image\n                      src={get(resource.image, 'src', resource.image)}\n                      width={64}\n                      height={64}\n                      alt={`${resource.title} logo`}\n                    />\n                  </div>\n                )}\n                <div className=\"sm:text-base md:text-sm lg:text-base\">\n                  {resource.title}\n                </div>\n              </div>\n\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </>);\n}\n\nconst WhatsNew: FunctionComponent<any> = ({resource, location = 'home'}) => {\n  const {primary, secondary} = resource\n  const [jumbotron, secondPrimary, thirdPrimary] = primary.resources\n  const [\n    firstSecondaryResource,\n    secondSecondaryResource,\n    thirdSecondaryResource,\n  ] = secondary.resources\n\n  return (\n    <section className=\"sm:-my-5 -my-3 mx-auto max-w-screen-xl\">\n      <h2 className=\"md:text-xl text-lg sm:font-semibold font-bold mb-3 dark:text-white\">\n        What's New\n      </h2>\n      <Jumbotron resource={jumbotron} textColor=\"text-green-400\" />\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4\">\n        <div className=\"h-full grid gap-4\">\n          <HorizontalResourceCard\n            className=\"w-full\"\n            resource={secondPrimary}\n            location={location}\n          />\n          <HorizontalResourceCard\n            className=\"w-full\"\n            resource={thirdPrimary}\n            location={location}\n          />\n        </div>\n        <div className=\"grid gap-4\">\n          <HorizontalResourceCard\n            className=\"h-auto flex\"\n            resource={firstSecondaryResource}\n            location={location}\n          />\n          <HorizontalResourceCard\n            className=\"w-full flex\"\n            resource={secondSecondaryResource}\n            location={location}\n          />\n          <HorizontalResourceCard\n            className=\"w-full flex\"\n            resource={thirdSecondaryResource}\n            location={location}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nconst FeatureRow: FunctionComponent<any> = ({\n  resource,\n  location = 'home',\n}: {\n  resource: CardResource\n  location: string\n}) => {\n  if (!resource) return null\n\n  return (\n    (<section className=\"sm:-my-5 -my-3 mx-auto max-w-screen-xl\">\n      <div className=\"flex mb-4 items-center\">\n        <h2 className=\"flex-1 md:text-xl text-lg font-bold dark:text-white\">\n          {resource.subTitle}\n        </h2>\n\n        {resource.path && (\n          <Link\n            href={resource.path}\n            className=\"text-base font-medium transition ease-in-out duration-150 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-800 py-2 px-3 text-blue-500\"\n            onClick={() => {\n              track('clicked resource', {\n                resource: resource.path,\n                location,\n              })\n            }}>\n            Browse more{resource.name && resource.name}→\n          </Link>\n        )}\n      </div>\n      {resource.resources && (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 grid-cols-1 gap-4\">\n          {map(resource.resources, (resource) => {\n            return (\n              <VerticalResourceCard\n                className=\"col-span-3 sm:col-span-1 text-center shadow-sm\"\n                key={resource.path}\n                resource={resource}\n                location={location}\n              />\n            )\n          })}\n        </div>\n      )}\n      {resource.related && (\n        <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-4 mt-4\">\n          {map(resource.related, (resource) => {\n            return (\n              <HorizontalResourceCard\n                resource={resource}\n                location={location}\n                className=\"m-0\"\n              />\n            )\n          })}\n        </div>\n      )}\n    </section>)\n  );\n}\n\nconst InstructorFeatureRow: FunctionComponent<any> = ({\n  resource,\n  location = 'home',\n}) => {\n  if (!resource) return null\n\n  return (\n    (<section className=\"sm:-my-5 -my-3 mx-auto max-w-screen-xl\">\n      <div className=\"flex mb-4 items-center\">\n        <h2 className=\"flex-1 md:text-xl text-lg font-bold dark:text-white\">\n          {resource.subTitle}\n        </h2>\n\n        {resource.path && (\n          <Link\n            href={resource.path}\n            className=\"text-base font-medium transition ease-in-out duration-150 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-800 py-2 px-3 text-blue-500\"\n            onClick={() => {\n              track('clicked resource', {\n                resource: resource.path,\n                location,\n              })\n            }}>\n            Browse more{resource.name && resource.name}→\n          </Link>\n        )}\n      </div>\n      {resource.resources && (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 grid-cols-1 gap-4\">\n          {map(resource.resources, (resource) => {\n            return (\n              <VerticalResourceCard\n                className=\"col-span-3 sm:col-span-1 text-center shadow-sm\"\n                key={resource.path}\n                resource={resource}\n                location={location}\n              />\n            )\n          })}\n\n          <ExternalTrackedLink\n            eventName=\"clicked epic react banner\"\n            params={{location}}\n            href=\"https://epicreact.dev\"\n            target=\"_blank\"\n            rel=\"noopener\"\n            className=\"block\"\n          >\n            <div className=\"overflow-hidden flex items-center justify-center rounded-lg\">\n              <Image\n                src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1626109728/epic-react/default-banners/banner-home_2x.jpg\"\n                // 25% off\n                // src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1625229239/epic-react/summer-sale-2021/banner-home_2x.jpg\"\n                alt=\"Get Really Good at React on EpicReact.dev by Kent C. Dodds\"\n                width={704}\n                height={836}\n                quality={100}\n                className=\"rounded-lg hover:scale-[102%] ease-in-out duration-500\"\n              />\n            </div>\n          </ExternalTrackedLink>\n        </div>\n      )}\n      {resource.related && (\n        <div className=\"grid lg:grid-cols-2 grid-cols-1 gap-4 mt-4\">\n          {map(resource.related, (resource) => {\n            return (\n              <HorizontalResourceCard\n                resource={resource}\n                location={location}\n                className=\"m-0\"\n              />\n            )\n          })}\n        </div>\n      )}\n    </section>)\n  );\n}\n\nexport default Home\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/collection-lessons-list.tsx","r":[0,4538],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport {Element, scroller} from 'react-scroll'\nimport SimpleBar from 'simplebar-react'\nimport {LessonResource} from 'types'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport CheckIcon from '../../icons/check'\n\ntype NextUpListProps = {\n  currentLessonSlug: string\n  course: any\n  progress: any\n  onActiveTab: boolean\n}\n\nconst CollectionLessonsList: FunctionComponent<NextUpListProps> = ({\n  course,\n  currentLessonSlug,\n  progress,\n  onActiveTab,\n}) => {\n  const {lessons} = course\n  const [activeElement, setActiveElement] = React.useState(currentLessonSlug)\n  const scrollableNodeRef: any = React.createRef()\n\n  React.useEffect(() => {\n    setActiveElement(currentLessonSlug)\n    scrollableNodeRef.current.id = 'scrollable-container'\n    if (onActiveTab) {\n      scroller.scrollTo(activeElement, {\n        duration: 0,\n        delay: 0,\n        containerId: 'scrollable-container',\n      })\n    }\n  }, [activeElement, setActiveElement, currentLessonSlug])\n\n  return lessons ? (\n    <div className=\"h-full overflow-hidden\">\n      <div className=\"overflow-hidden bg-gray-100 dark:bg-gray-1000 dark:border-gray-800 border-gray-100 h-96 lg:h-full rounded-md lg:rounded-none border lg:border-none\">\n        <SimpleBar\n          autoHide={false}\n          className=\"h-full\"\n          scrollableNodeProps={{ref: scrollableNodeRef}}\n        >\n          <ol\n            className=\"h-full\"\n            css={{\n              maxHeight: 300,\n              '@media (min-width: 768px)': {\n                maxHeight: 350,\n              },\n              '@media (min-width: 1024px)': {\n                maxHeight: '100%',\n              },\n            }}\n          >\n            {lessons.map((lesson: LessonResource, index = 0) => {\n              const completedLessons = get(\n                progress,\n                'completed_lessons',\n                [],\n              ).map((lesson: LessonResource) => lesson.slug)\n              const completed =\n                lesson.completed || completedLessons.includes(lesson.slug)\n              return (\n                <li key={lesson.slug}>\n                  {lesson.slug === currentLessonSlug && (\n                    <Element name={lesson.slug} />\n                  )}\n                  <div>\n                    <Item\n                      active={lesson.slug === currentLessonSlug}\n                      lesson={lesson}\n                      index={index}\n                      completed={completed}\n                      className=\"hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100\"\n                    />\n                  </div>\n                </li>\n              )\n            })}\n          </ol>\n        </SimpleBar>\n      </div>\n    </div>\n  ) : null\n}\n\nconst Item: FunctionComponent<{\n  lesson: any\n  active: boolean\n  className?: string\n  index: number\n  completed: boolean\n}> = ({lesson, className, index, completed, active = false, ...props}) => {\n  const Item = () => (\n    <div\n      className={`group flex p-3 ${\n        active\n          ? 'font-semibold bg-blue-600 text-white'\n          : 'hover:text-blue-600 hover:bg-blue-50 dark:hover:text-white dark:hover:bg-gray-800 active:bg-blue-100'\n      } transition-colors ease-in-out duration-150`}\n      {...props}\n    >\n      <div className=\"flex items-start\">\n        <div\n          className={`w-6 leading-5 pt-px text-xs ${\n            completed\n              ? `opacity-100 ${\n                  active ? 'text-white' : 'text-blue-600 dark:text-green-400'\n                }`\n              : 'opacity-60 group-hover:opacity-100'\n          } font-normal tracking-tight`}\n        >\n          {completed ? <CheckIcon /> : index + 1}\n        </div>\n      </div>\n      <div className=\"flex flex-col\">\n        <div className=\"w-full leading-tight\">{lesson.title} </div>\n        <div>\n          <span\n            className={`${active ? 'text-gray-200' : 'text-gray-500'} text-xs`}\n          >\n            {convertTimeWithTitles(lesson.duration, {showSeconds: true})}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n  return active ? (\n    <Item />\n  ) : (\n    <Link\n      href={lesson.path}\n      onClick={() => {\n        track(`clicked next up lesson`, {\n          lesson: lesson.slug,\n        })\n      }}\n      className=\"font-semibold\">\n\n      <Item />\n\n    </Link>\n  );\n}\n\nexport default CollectionLessonsList\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/collection-lessons-list.tsx","r":[0,4538],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport {Element, scroller} from 'react-scroll'\nimport SimpleBar from 'simplebar-react'\nimport {LessonResource} from 'types'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport CheckIcon from '../../icons/check'\n\ntype NextUpListProps = {\n  currentLessonSlug: string\n  course: any\n  progress: any\n  onActiveTab: boolean\n}\n\nconst CollectionLessonsList: FunctionComponent<NextUpListProps> = ({\n  course,\n  currentLessonSlug,\n  progress,\n  onActiveTab,\n}) => {\n  const {lessons} = course\n  const [activeElement, setActiveElement] = React.useState(currentLessonSlug)\n  const scrollableNodeRef: any = React.createRef()\n\n  React.useEffect(() => {\n    setActiveElement(currentLessonSlug)\n    scrollableNodeRef.current.id = 'scrollable-container'\n    if (onActiveTab) {\n      scroller.scrollTo(activeElement, {\n        duration: 0,\n        delay: 0,\n        containerId: 'scrollable-container',\n      })\n    }\n  }, [activeElement, setActiveElement, currentLessonSlug])\n\n  return lessons ? (\n    <div className=\"h-full overflow-hidden\">\n      <div className=\"overflow-hidden bg-gray-100 dark:bg-gray-1000 dark:border-gray-800 border-gray-100 h-96 lg:h-full rounded-md lg:rounded-none border lg:border-none\">\n        <SimpleBar\n          autoHide={false}\n          className=\"h-full\"\n          scrollableNodeProps={{ref: scrollableNodeRef}}\n        >\n          <ol\n            className=\"h-full\"\n            css={{\n              maxHeight: 300,\n              '@media (min-width: 768px)': {\n                maxHeight: 350,\n              },\n              '@media (min-width: 1024px)': {\n                maxHeight: '100%',\n              },\n            }}\n          >\n            {lessons.map((lesson: LessonResource, index = 0) => {\n              const completedLessons = get(\n                progress,\n                'completed_lessons',\n                [],\n              ).map((lesson: LessonResource) => lesson.slug)\n              const completed =\n                lesson.completed || completedLessons.includes(lesson.slug)\n              return (\n                <li key={lesson.slug}>\n                  {lesson.slug === currentLessonSlug && (\n                    <Element name={lesson.slug} />\n                  )}\n                  <div>\n                    <Item\n                      active={lesson.slug === currentLessonSlug}\n                      lesson={lesson}\n                      index={index}\n                      completed={completed}\n                      className=\"hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100\"\n                    />\n                  </div>\n                </li>\n              )\n            })}\n          </ol>\n        </SimpleBar>\n      </div>\n    </div>\n  ) : null\n}\n\nconst Item: FunctionComponent<{\n  lesson: any\n  active: boolean\n  className?: string\n  index: number\n  completed: boolean\n}> = ({lesson, className, index, completed, active = false, ...props}) => {\n  const Item = () => (\n    <div\n      className={`group flex p-3 ${\n        active\n          ? 'font-semibold bg-blue-600 text-white'\n          : 'hover:text-blue-600 hover:bg-blue-50 dark:hover:text-white dark:hover:bg-gray-800 active:bg-blue-100'\n      } transition-colors ease-in-out duration-150`}\n      {...props}\n    >\n      <div className=\"flex items-start\">\n        <div\n          className={`w-6 leading-5 pt-px text-xs ${\n            completed\n              ? `opacity-100 ${\n                  active ? 'text-white' : 'text-blue-600 dark:text-green-400'\n                }`\n              : 'opacity-60 group-hover:opacity-100'\n          } font-normal tracking-tight`}\n        >\n          {completed ? <CheckIcon /> : index + 1}\n        </div>\n      </div>\n      <div className=\"flex flex-col\">\n        <div className=\"w-full leading-tight\">{lesson.title} </div>\n        <div>\n          <span\n            className={`${active ? 'text-gray-200' : 'text-gray-500'} text-xs`}\n          >\n            {convertTimeWithTitles(lesson.duration, {showSeconds: true})}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n  return active ? (\n    <Item />\n  ) : (\n    <Link href={lesson.path}>\n      <a\n        onClick={() => {\n          track(`clicked next up lesson`, {\n            lesson: lesson.slug,\n          })\n        }}\n        className=\"font-semibold\"\n      >\n        <Item />\n      </a>\n    </Link>\n  )\n}\n\nexport default CollectionLessonsList\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/next-up-list.tsx","r":[0,3978],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport {Element, scroller} from 'react-scroll'\nimport {LessonResource} from 'types'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\n\ntype NextUpListProps = {\n  currentLessonSlug: string\n  nextUp: any\n  nextToVideo: boolean\n}\n\nconst NextUpList: FunctionComponent<NextUpListProps> = ({\n  nextUp,\n  currentLessonSlug,\n  nextToVideo,\n}) => {\n  const {nextUpData} = nextUp\n  const [activeElement] = React.useState(currentLessonSlug)\n  const scrollableNodeRef: any = React.createRef()\n\n  React.useEffect(() => {\n    nextUpData &&\n      scroller.scrollTo(activeElement, {\n        duration: 0,\n        delay: 0,\n        containerId: 'scroll-container',\n      })\n  }, [activeElement, nextUpData])\n\n  return nextUpData ? (\n    <div className={nextToVideo ? 'h-full overflow-hidden' : ''}>\n      <div\n        className={`overflow-hidden bg-white border-gray-100 ${\n          nextToVideo ? 'h-full' : 'rounded-md border border-gray-100 mt-2'\n        }`}\n      >\n        <ol\n          ref={scrollableNodeRef}\n          id=\"scroll-container\"\n          className=\"overflow-y-auto h-full\"\n          css={{\n            '@media only screen and (min-width: 640px)': {\n              maxHeight: nextToVideo ? '100%' : 600,\n            },\n            maxHeight: 300,\n          }}\n        >\n          {nextUpData.list.lessons.map((lesson: LessonResource, index = 0) => {\n            const completedLessons = get(\n              nextUpData.list,\n              'progress.completed_lessons',\n              [],\n            ).map((lesson: LessonResource) => lesson.slug)\n            const completed = completedLessons.includes(lesson.slug)\n            return (\n              <li key={lesson.slug}>\n                <Element name={lesson.slug} />\n                <div>\n                  <Item\n                    active={lesson.slug === currentLessonSlug}\n                    lesson={lesson}\n                    index={index}\n                    completed={completed}\n                    className=\"hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100\"\n                  />\n                </div>\n              </li>\n            )\n          })}\n        </ol>\n      </div>\n    </div>\n  ) : null\n}\n\nconst Item: FunctionComponent<{\n  lesson: any\n  active: boolean\n  className?: string\n  index: number\n  completed: boolean\n}> = ({lesson, className, index, completed, active = false, ...props}) => {\n  const Item = () => (\n    <div\n      className={`group flex p-3 ${\n        active\n          ? 'font-semibold bg-blue-600 text-white'\n          : 'hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100'\n      } transition-colors ease-in-out duration-150`}\n      {...props}\n    >\n      <div className=\"flex items-start\">\n        <div\n          className={`w-6 leading-5 pt-px text-xs ${\n            completed\n              ? `opacity-100 ${active ? 'text-white' : 'text-blue-600'}`\n              : 'opacity-60 group-hover:opacity-100'\n          } font-normal tracking-tight`}\n        >\n          {completed ? <CheckIcon /> : index + 1}\n        </div>\n      </div>\n      <div className=\"w-full leading-tight\">{lesson.title}</div>\n    </div>\n  )\n  return active ? (\n    <Item />\n  ) : (\n    <Link\n      href={lesson.path}\n      onClick={() => {\n        track(`clicked next up lesson`, {\n          lesson: lesson.slug,\n        })\n      }}\n      className=\"font-semibold\">\n\n      <Item />\n\n    </Link>\n  );\n}\n\nconst CheckIcon = () => (\n  <svg\n    className=\"-translate-x-1\"\n    viewBox=\"0 0 20 20\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm3.707-9.293a1 1 0 0 0-1.414-1.414L9 10.586 7.707 9.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4z\"\n        fill=\"currentColor\"\n      />\n    </g>\n  </svg>\n)\n\nexport default NextUpList\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/next-up-list.tsx","r":[0,3978],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport React, { FunctionComponent } from 'react';\nimport {Element, scroller} from 'react-scroll'\nimport {LessonResource} from 'types'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\n\ntype NextUpListProps = {\n  currentLessonSlug: string\n  nextUp: any\n  nextToVideo: boolean\n}\n\nconst NextUpList: FunctionComponent<NextUpListProps> = ({\n  nextUp,\n  currentLessonSlug,\n  nextToVideo,\n}) => {\n  const {nextUpData} = nextUp\n  const [activeElement] = React.useState(currentLessonSlug)\n  const scrollableNodeRef: any = React.createRef()\n\n  React.useEffect(() => {\n    nextUpData &&\n      scroller.scrollTo(activeElement, {\n        duration: 0,\n        delay: 0,\n        containerId: 'scroll-container',\n      })\n  }, [activeElement, nextUpData])\n\n  return nextUpData ? (\n    <div className={nextToVideo ? 'h-full overflow-hidden' : ''}>\n      <div\n        className={`overflow-hidden bg-white border-gray-100 ${\n          nextToVideo ? 'h-full' : 'rounded-md border border-gray-100 mt-2'\n        }`}\n      >\n        <ol\n          ref={scrollableNodeRef}\n          id=\"scroll-container\"\n          className=\"overflow-y-auto h-full\"\n          css={{\n            '@media only screen and (min-width: 640px)': {\n              maxHeight: nextToVideo ? '100%' : 600,\n            },\n            maxHeight: 300,\n          }}\n        >\n          {nextUpData.list.lessons.map((lesson: LessonResource, index = 0) => {\n            const completedLessons = get(\n              nextUpData.list,\n              'progress.completed_lessons',\n              [],\n            ).map((lesson: LessonResource) => lesson.slug)\n            const completed = completedLessons.includes(lesson.slug)\n            return (\n              <li key={lesson.slug}>\n                <Element name={lesson.slug} />\n                <div>\n                  <Item\n                    active={lesson.slug === currentLessonSlug}\n                    lesson={lesson}\n                    index={index}\n                    completed={completed}\n                    className=\"hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100\"\n                  />\n                </div>\n              </li>\n            )\n          })}\n        </ol>\n      </div>\n    </div>\n  ) : null\n}\n\nconst Item: FunctionComponent<{\n  lesson: any\n  active: boolean\n  className?: string\n  index: number\n  completed: boolean\n}> = ({lesson, className, index, completed, active = false, ...props}) => {\n  const Item = () => (\n    <div\n      className={`group flex p-3 ${\n        active\n          ? 'font-semibold bg-blue-600 text-white'\n          : 'hover:text-blue-600 hover:bg-blue-50 active:bg-blue-100'\n      } transition-colors ease-in-out duration-150`}\n      {...props}\n    >\n      <div className=\"flex items-start\">\n        <div\n          className={`w-6 leading-5 pt-px text-xs ${\n            completed\n              ? `opacity-100 ${active ? 'text-white' : 'text-blue-600'}`\n              : 'opacity-60 group-hover:opacity-100'\n          } font-normal tracking-tight`}\n        >\n          {completed ? <CheckIcon /> : index + 1}\n        </div>\n      </div>\n      <div className=\"w-full leading-tight\">{lesson.title}</div>\n    </div>\n  )\n  return active ? (\n    <Item />\n  ) : (\n    <Link href={lesson.path}>\n      <a\n        onClick={() => {\n          track(`clicked next up lesson`, {\n            lesson: lesson.slug,\n          })\n        }}\n        className=\"font-semibold\"\n      >\n        <Item />\n      </a>\n    </Link>\n  )\n}\n\nconst CheckIcon = () => (\n  <svg\n    className=\"-translate-x-1\"\n    viewBox=\"0 0 20 20\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm3.707-9.293a1 1 0 0 0-1.414-1.414L9 10.586 7.707 9.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4z\"\n        fill=\"currentColor\"\n      />\n    </g>\n  </svg>\n)\n\nexport default NextUpList\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pricing/select-plan-new/index.tsx","r":[0,9837],"t":"import React from \"react\";\nimport {get, filter} from 'lodash'\nimport React, * as React from 'react';\nimport slugify from 'slugify'\nimport BestValueStamp from 'components/pricing/select-plan-new/assets/best-value-stamp'\nimport ColoredBackground from 'components/pricing/select-plan-new/assets/colored-background'\nimport {keys} from 'lodash'\nimport Spinner from 'components/spinner'\n\nconst PlanTitle: React.FunctionComponent = ({children}) => (\n  <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n    {children}\n  </h2>\n)\n\nconst PlanPrice: React.FunctionComponent<{\n  plan: any\n  pricesLoading: boolean\n}> = ({plan, pricesLoading}) => {\n  const {price, price_discounted} = plan\n  const priceToDisplay = price_discounted || price\n  const discount_percentage = price_discounted\n    ? Math.round(((price - price_discounted) * 100) / price)\n    : null\n  return (\n    <div className=\"flex flex-col items-center\">\n      <div className=\"flex items-end py-6 leading-none\">\n        <span className=\"self-start mt-1\">USD</span>\n        <span className=\"text-4xl font-light\">$</span>\n        <span className=\"self-stretch text-4xl font-extrabold\">\n          {price_discounted ? (\n            <div className=\"flex items-center\">\n              <div className={`relative ${pricesLoading ? 'opacity-60' : ''}`}>\n                {pricesLoading && (\n                  <Spinner\n                    className=\"absolute text-current top-[-0.75rem] right-[-0.75rem]\"\n                    size={4}\n                  />\n                )}\n                {priceToDisplay}\n              </div>\n              <div className=\"flex flex-col ml-2\">\n                <div className=\"relative text-2xl opacity-60 before:h-[2px] before:rotate-[-19deg] before:absolute before:bg-current before:w-full flex justify-center items-center text-center\">\n                  &nbsp;{price}&nbsp;\n                </div>\n                <div className=\"text-sm text-blue-500 uppercase\">\n                  save {discount_percentage}%\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className={`relative ${pricesLoading ? 'opacity-60' : ''}`}>\n              {priceToDisplay}\n              {pricesLoading && (\n                <Spinner\n                  className=\"absolute text-current top-[-0.75rem] right-[-0.75rem]\"\n                  size={4}\n                />\n              )}\n            </div>\n          )}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nconst PlanQuantitySelect: React.FunctionComponent<{\n  quantity: number\n  onQuantityChanged: any\n  plan: any\n  pricesLoading: boolean\n}> = ({quantity, onQuantityChanged}) => {\n  return (\n    <div className=\"flex flex-col items-center space-y-2\">\n      <label className=\"flex items-center\">\n        <span className=\"pr-2 text-sm\">Seats</span>\n        <input\n          className=\"w-20 bg-gray-100 border-none form-input dark:bg-gray-800\"\n          type=\"number\"\n          value={quantity}\n          max={1000}\n          min={1}\n          onChange={(e) => onQuantityChanged(Number(e.currentTarget.value))}\n        />\n      </label>\n    </div>\n  )\n}\n\nconst PlanIntervalsSwitch: React.FunctionComponent<{\n  planTypes: any[]\n  disabled: boolean\n  currentPlan: any\n  setCurrentPlan: (plan: any) => void\n}> = ({planTypes, currentPlan, setCurrentPlan, disabled}) => {\n  const plansToRender = disabled ? [currentPlan] : planTypes\n  return (\n    <ul className=\"flex\">\n      {plansToRender.map((plan: any, i: number) => {\n        const {interval, interval_count} = plan\n        const checked: boolean = plan === currentPlan\n        const intervalLabel = interval_count > 1 ? 'quarter' : interval\n        return (\n          <li key={`${interval}-${interval_count}`}>\n            <button\n              className={`${\n                checked\n                  ? 'dark:bg-white bg-gray-900 dark:text-gray-900 text-white dark:hover:bg-gray-200 hover:bg-gray-800'\n                  : 'dark:bg-gray-800 bg-gray-100 dark:hover:bg-gray-700 hover:bg-gray-200'\n              } ${i === 0 && 'rounded-l-md'} ${i === 2 && 'rounded-r-md'} ${\n                plansToRender.length === 2 && i === 1 && 'rounded-r-md'\n              } ${\n                plansToRender.length === 1 && 'rounded-md'\n              } capitalize block px-3 py-2 cursor-pointer text-sm font-medium transition-all ease-in-out duration-300`}\n              onClick={() => setCurrentPlan(plan)}\n              tabIndex={0}\n              role=\"radio\"\n              aria-pressed={checked}\n            >\n              {intervalLabel}\n            </button>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nconst DEFAULT_FEATURES = [\n  'Full access to all the premium courses',\n  'Download courses for offline viewing',\n  'Closed captions for every video',\n  'Commenting and support',\n  'Enhanced Transcripts',\n  'RSS course feeds',\n]\n\nconst PlanFeatures: React.FunctionComponent<{\n  planFeatures: string[]\n}> = ({planFeatures = DEFAULT_FEATURES}) => {\n  const CheckIcon = () => (\n    <svg\n      className=\"flex-shrink-0 inline-block mt-1 text-blue-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M6.00266104,15 C5.73789196,15 5.48398777,14.8946854 5.29679603,14.707378 L0.304822855,9.71382936 C0.0452835953,9.46307884 -0.0588050485,9.09175514 0.0325634765,8.74257683 C0.123932001,8.39339851 0.396538625,8.12070585 0.745606774,8.02930849 C1.09467492,7.93791112 1.46588147,8.04203262 1.71655287,8.30165379 L5.86288579,12.4482966 L14.1675324,0.449797837 C14.3666635,0.147033347 14.7141342,-0.0240608575 15.0754425,0.00274388845 C15.4367507,0.0295486344 15.7551884,0.250045268 15.9074918,0.578881992 C16.0597953,0.907718715 16.0220601,1.29328389 15.8088932,1.58632952 L6.82334143,14.5695561 C6.65578773,14.8145513 6.38796837,14.9722925 6.09251656,15 C6.06256472,15 6.03261288,15 6.00266104,15 Z\"\n      />\n    </svg>\n  )\n\n  return (\n    <ul>\n      {planFeatures.map((feature: string) => {\n        return (\n          <li className=\"flex py-2 font-medium\" key={slugify(feature)}>\n            <CheckIcon />\n            <span className=\"ml-2 leading-tight\">{feature}</span>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nconst GetAccessButton: React.FunctionComponent<{\n  label: string\n  handleClick: () => void\n}> = ({label, handleClick}) => {\n  return (\n    <button\n      className=\"w-full px-5 py-4 mt-8 font-semibold text-center text-white transition-all duration-300 ease-in-out bg-blue-600 rounded-md hover:bg-blue-700 hover:scale-105\"\n      onClick={(event) => {\n        event.preventDefault()\n        handleClick()\n      }}\n      type=\"button\"\n    >\n      {label}\n    </button>\n  )\n}\n\ntype SelectPlanProps = {\n  prices: any\n  pricesLoading: boolean\n  defaultInterval?: string\n  defaultQuantity?: number\n  handleClickGetAccess: () => void\n  quantityAvailable: boolean\n  onQuantityChanged: (quantity: number) => void\n  onPriceChanged: (priceId: string) => void\n}\n\nconst SelectPlanNew: React.FunctionComponent<SelectPlanProps> = ({\n  quantityAvailable = true,\n  handleClickGetAccess,\n  defaultInterval = 'annual',\n  defaultQuantity = 1,\n  pricesLoading,\n  prices,\n  onQuantityChanged,\n  onPriceChanged,\n}) => {\n  const individualPlans = filter(prices, (plan: any) => true)\n\n  const annualPlan = get(prices, 'annualPrice', {\n    name: 'Yearly',\n    interval: 'year',\n  })\n  const monthlyPlan = get(prices, 'monthlyPrice')\n  const quarterlyPlan = get(prices, 'quarterlyPrice')\n\n  const pricesForInterval = (interval: any) => {\n    switch (interval) {\n      case 'year':\n        return annualPlan\n      case 'month':\n        return monthlyPlan\n      case 'quarter':\n        return quarterlyPlan\n      default:\n        return annualPlan\n    }\n  }\n\n  const [currentInterval] = React.useState<string>(defaultInterval)\n  const [currentQuantity, setCurrentQuantity] =\n    React.useState<number>(defaultQuantity)\n\n  const [currentPlan, setCurrentPlan] = React.useState<any>(\n    pricesForInterval(currentInterval),\n  )\n\n  const forTeams: boolean = currentQuantity > 1\n  const buttonLabel: string = forTeams ? 'Level Up My Team' : 'Become a Member'\n\n  React.useEffect(() => {\n    setCurrentPlan(annualPlan)\n    onPriceChanged(annualPlan.stripe_price_id)\n  }, [annualPlan.price])\n\n  return (\n    <>\n      <div className=\"relative z-10 flex flex-col items-center max-w-sm px-6 py-6 text-gray-900 bg-white rounded-sm dark:text-white dark:bg-gray-900 sm:px-12 sm:py-12\">\n        <PlanTitle>{currentPlan?.name}</PlanTitle>\n        <PlanPrice pricesLoading={pricesLoading} plan={currentPlan} />\n        <div className=\"h-9\">\n          {keys(prices).length > 1 && (\n            <div className={quantityAvailable ? '' : 'mb-4'}>\n              <PlanIntervalsSwitch\n                disabled={false}\n                currentPlan={currentPlan}\n                setCurrentPlan={(newPlan: any) => {\n                  setCurrentPlan(newPlan)\n                  onPriceChanged(newPlan.stripe_price_id)\n                }}\n                planTypes={individualPlans}\n              />\n            </div>\n          )}\n        </div>\n        {quantityAvailable && (\n          <div className=\"my-4\">\n            <PlanQuantitySelect\n              quantity={currentQuantity}\n              plan={currentPlan}\n              pricesLoading={pricesLoading}\n              onQuantityChanged={(quantity: number) => {\n                setCurrentQuantity(quantity)\n                onQuantityChanged(quantity)\n              }}\n            />\n          </div>\n        )}\n\n        <PlanFeatures planFeatures={currentPlan?.features} />\n        <GetAccessButton\n          label={buttonLabel}\n          handleClick={handleClickGetAccess}\n        />\n      </div>\n      <ColoredBackground />\n      {currentPlan.interval === 'year' && <BestValueStamp />}\n    </>\n  )\n}\n\nexport default SelectPlanNew\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/components/cta-card.tsx","r":[0,3405],"t":"import Image from 'next/image'\nimport Link from 'next/link'\nimport {get} from 'lodash'\n\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nconst CtaCard: React.FC<{\n  location: string\n  trackTitle: string\n  resource: any\n  textLight?: any\n}> = ({location, trackTitle, textLight, resource}) => {\n  const {path, title, byline, description, image, background} = resource\n\n  return (\n    (<div\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center\"\n      css={{\n        [bpMinMD]: {\n          minHeight: 477,\n        },\n      }}\n    >\n      <ExternalTrackedLink\n        eventName=\"clicked Instructor Landing page CTA\"\n        params={{location}}\n        className=\"md:-mt-5 flex items-center justify-center bg-white dark:bg-gray-900 text-white overflow-hidden rounded-b-lg md:rounded-t-none rounded-t-lg shadow-sm\"\n        href={path}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track(trackTitle, {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2\n                  className={`text-xs uppercase font-semibold my-2 ${\n                    textLight ? 'text-gray-300' : 'text-gray-700'\n                  }`}\n                >\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className={`text-xl font-extrabold leading-tighter   hover:text-blue-300 ${\n                    textLight ? 'text-white' : 'text-gray-900'\n                  }`}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p\n                  className={`mt-4 ${\n                    textLight ? 'text-white' : 'text-gray-900'\n                  }`}\n                >\n                  {description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Image\n          className=\"absolute top-0 left-0 z-0 w-full h-full\"\n          src={background}\n          alt=\"\"\n          layout=\"fill\"\n        />\n      </ExternalTrackedLink>\n    </div>)\n  );\n}\nexport default CtaCard\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/components/resource.tsx","r":[0,691],"t":"import React, {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\n\ntype ResourceProps = {\n  title: string\n  path: string\n  imageUrl: string\n}\n\nconst Resource: FunctionComponent<ResourceProps> = ({\n  title,\n  path,\n  imageUrl,\n}) => {\n  return (\n    (<li>\n      <Link\n        href={path}\n        className=\"flex items-center font-semibold py-2 hover:underline cursor-pointer leading-tight\">\n\n        <div className=\"flex-shrink-0 flex items-center\">\n          <Image src={imageUrl} width={24} height={24} alt={title} />\n        </div>\n        <span className=\"ml-2\">{title}</span>\n\n      </Link>\n    </li>)\n  );\n}\n\nexport default Resource\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/components/stack.tsx","r":[0,1780],"t":"import React, {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport useSWR from 'swr'\nimport {loadCourse} from 'lib/courses'\nimport {loadLesson} from 'lib/lessons'\nimport {loadPlaylist} from 'lib/playlists'\n\ntype StackResource = {slug: string; type: string}\n\ntype StackProps = {\n  resources: StackResource[]\n}\n\nconst StackResourceItem = ({slug, type}: StackResource) => {\n  // const loader = loadLesson\n  let loader = null\n  switch (type) {\n    case 'lesson':\n      loader = loadLesson\n      break\n    case 'course':\n      loader = loadCourse\n      break\n    case 'playlist':\n      loader = loadPlaylist\n      break\n    default:\n      break\n  }\n\n  const {data: resource} = useSWR(slug, loader)\n  if (!resource) return null\n  return (\n    (<li key={resource.slug}>\n      <Link\n        href={resource.path}\n        className=\"flex items-center font-semibold py-2 hover:underline cursor-pointer leading-tight\">\n\n        {resource && (\n          <div className=\"flex-shrink-0 flex items-center\">\n            <Image\n              src={\n                resource.icon_url ||\n                resource.square_cover_480_url ||\n                resource.image_thumb_url\n              }\n              width={24}\n              height={24}\n              alt=\"\"\n            />\n          </div>\n        )}\n        <span className=\"ml-2\">{resource.title}</span>\n\n      </Link>\n    </li>)\n  );\n}\n\nconst Stack: FunctionComponent<StackProps> = ({resources = []}) => {\n  return (\n    <ul className=\"-mb-2\">\n      {resources.map((resource) => (\n        <StackResourceItem\n          key={resource.slug}\n          slug={resource.slug}\n          type={resource.type}\n        />\n      ))}\n    </ul>\n  )\n}\n\nexport default Stack\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/resource-cta.tsx","r":[0,1404],"t":"import * as React from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {track} from 'utils/analytics'\n\nconst SimpleScriptsCTA = ({instructorData}: any) => {\n  const {\n    feature: {title, image, path, byline, backgroundImage},\n  } = instructorData\n  return (\n    (<Link\n      href={path}\n      onClick={() =>\n        track('clicked featured resource', {\n          location: instructorData.location,\n          resource: path,\n        })\n      }\n      className=\"relative dark:bg-gray-800 bg-white group block md:col-span-4 rounded-md w-full h-full overflow-hidden text-center shadow-sm dark:text-white\">\n\n      <div className=\"flex flex-col items-center h-full\">\n        <div className=\"relative z-10 flex flex-col h-full justify-between p-8 items-center\">\n          <div className=\"flex flex-col items-center\">\n            <Image src={image} width={200} height={200} alt={title} />\n            <h2 className=\"text-xl font-bold min-w-full mt-10 mb-2 leading-tighter group-hover:underline\">\n              {title}\n            </h2>\n            <span className=\"text-sm opacity-80\">{byline}</span>\n          </div>\n        </div>\n        <img\n          className=\"absolute top-0 left-0 z-0\"\n          src={backgroundImage}\n          alt=\"\"\n        />\n      </div>\n\n    </Link>)\n  );\n}\n\nexport default SimpleScriptsCTA\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/survey/questions/multiple-choice-question.tsx","r":[0,3374],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {Formik, Form, Field} from 'formik'\nimport {shuffle, find, reject} from 'lodash'\nimport {MultipleChoiceAnswer, SurveyQuestion} from '../survey-reducer'\n\nconst MultipleChoiceQuestion: React.FunctionComponent<{\n  onAnswer: (answer: string) => void\n  question: SurveyQuestion\n}> = ({onAnswer, question}) => {\n  const [choices, setChoices] = React.useState<MultipleChoiceAnswer[]>([])\n\n  React.useEffect(() => {\n    const lastChoice = find(question.choices, {always_last: true})\n    let orderedChoices = question.choices || []\n\n    if (question.random) {\n      if (lastChoice) {\n        orderedChoices = [\n          ...shuffle(reject(question.choices, {answer: lastChoice.answer})),\n          lastChoice,\n        ]\n      } else {\n        orderedChoices = shuffle(question.choices)\n      }\n    } else {\n      if (lastChoice) {\n        orderedChoices = [\n          ...reject(question.choices, {answer: lastChoice.answer}),\n          lastChoice,\n        ]\n      }\n    }\n\n    setChoices(orderedChoices)\n  }, [question])\n\n  return (\n    <div>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values: any) => {\n          onAnswer(values.picked)\n        }}\n      >\n        {({setValues, submitForm}) => {\n          return (\n            <Form>\n              <div id=\"question-set\">Choose one:</div>\n              <div role=\"group\" aria-labelledby=\"question-set\">\n                <ul className=\"list-none\">\n                  {choices.map((choice: MultipleChoiceAnswer) => {\n                    return (\n                      <li key={choice.answer} className=\"w-full py-2\">\n                        <label className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\">\n                          <Field\n                            type=\"radio\"\n                            name=\"picked\"\n                            value={choice.answer}\n                            className=\"appearance-none hidden\"\n                            onChange={() => {\n                              setValues({picked: choice.answer})\n                              submitForm()\n                            }}\n                          />\n                          {choice.label}\n                        </label>\n                      </li>\n                    )\n                  })}\n                  {question.other && (\n                    <li className=\"w-full py-2\">\n                      <label className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out font-semibold rounded-lg\">\n                        <Field\n                          type=\"radio\"\n                          name=\"picked\"\n                          value=\"other\"\n                          className=\"appearance-none hidden\"\n                          onChange={() => {\n                            setValues({picked: 'other'})\n                            submitForm()\n                          }}\n                        />\n                        {question.other_label}\n                      </label>\n                    </li>\n                  )}\n                </ul>\n              </div>\n            </Form>\n          )\n        }}\n      </Formik>\n    </div>\n  )\n}\n\nexport default MultipleChoiceQuestion\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/learn/developer-portfolio/index.tsx","r":[0,2924],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {track} from 'utils/analytics'\nimport Markdown from 'react-markdown'\n\nconst DeveloperPortfolio: React.FC<any> = ({data}) => {\n  return (\n    (<div className=\"sm:-my-5 -my-3 -mx-5 p-5 dark:bg-gray-900 bg-gray-50\">\n      <div className=\"mx-auto max-w-screen-xl\">\n        <div className=\"flex items-center justify-center bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-50 overflow-hidden rounded-lg shadow-sm\">\n          <div className=\"px-5 sm:py-16 py-10 sm:text-left text-center\">\n            <div className=\"space-y-5 mx-auto flex items-center justify-center lg:px-8 w-full\">\n              <div className=\"flex lg:flex-row flex-col items-center justify-center sm:space-x-10 sm:space-y-0 space-y-5 0 w-full xl:pr-16\">\n                <div className=\"flex-shrink-0\">\n                  <Link\n                    href={data.path}\n                    tabIndex={-1}\n                    onClick={() =>\n                      track('clicked jumbotron resource', {\n                        resource: data.path,\n                        linkType: 'image',\n                      })\n                    }>\n\n                    <Image\n                      quality={100}\n                      src={data.image}\n                      width={300}\n                      height={300}\n                      alt={data.title}\n                    />\n\n                  </Link>\n                </div>\n                <div className=\"flex flex-col sm:items-start items-center w-full\">\n                  <h2 className=\"text-xs text-yellow-600 dark:text-yellow-300 uppercase font-semibold mb-2\">\n                    Craft a Portfolio that gets you hired\n                  </h2>\n\n                  <h1 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                    {data.title}\n                  </h1>\n\n                  <Markdown\n                    source={data.description}\n                    className=\"prose dark:prose-dark dark:prose-md-dark prose-md mt-4\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>)\n  );\n}\n\nexport default DeveloperPortfolio\n\nexport const developerPortfolioQuery = groq`*[_type == 'resource' && slug.current == \"build-business-oriented-portfolio\"][0]{\n  title,\n  description,\n  \"cta\": content[0].description,\n  path,\n  slug,\n  image,\n  \"clubs\": resources[0].resources[]{\n      title,\n      subTitle,\n      \"slug\": slug.current,\n      path,\n      image,\n      summary,\n\t}\n}`\n\nexport async function getStaticProps() {\n  const data = await sanityClient.fetch(developerPortfolioQuery)\n\n  return {\n    props: {\n      data,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/learn/digital-gardening/index.tsx","r":[0,5428],"t":"import * as React from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Markdown from 'react-markdown'\nimport {track} from 'utils/analytics'\nimport {VerticalResourceCard} from 'components/card/verticle-resource-card'\n\nconst DigitalGardening: React.FC<any> = ({data}) => {\n  return (\n    (<div className=\"sm:-my-5 -my-3 -mx-5 p-5 dark:bg-gray-900 bg-gray-50\">\n      <div className=\"mx-auto max-w-screen-xl\">\n        <div className=\"flex items-center justify-center bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-50 overflow-hidden rounded-lg shadow-sm\">\n          <div className=\"px-5 sm:py-16 py-10 sm:text-left text-center\">\n            <div className=\"space-y-5 mx-auto flex items-center justify-center lg:px-8 w-full\">\n              <div className=\"flex lg:flex-row flex-col items-center justify-center sm:space-x-10 sm:space-y-0 space-y-5 0 w-full xl:pr-16\">\n                <div className=\"flex-shrink-0\">\n                  <Link\n                    href={data.path}\n                    tabIndex={-1}\n                    onClick={() =>\n                      track('clicked jumbotron resource', {\n                        resource: data.path,\n                        linkType: 'image',\n                      })\n                    }>\n\n                    <Image\n                      quality={100}\n                      src={data.illustration.url}\n                      width={222}\n                      height={273}\n                      alt={data.illustration.alt}\n                    />\n\n                  </Link>\n                </div>\n                <div className=\"flex flex-col sm:items-start items-center w-full\">\n                  <h2 className=\"text-xs text-green-600 dark:text-green-300 uppercase font-semibold mb-2\">\n                    {data.cta.description}\n                  </h2>\n\n                  <h1 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                    {data.title}\n                  </h1>\n\n                  <Markdown\n                    source={data.description}\n                    allowDangerousHtml={true}\n                    className=\"mt-4 text-gray-700 dark:text-gray-50 text-base max-w-screen-sm\"\n                  />\n                  <Markdown\n                    source={data.quote.description}\n                    allowDangerousHtml={true}\n                    className=\"mt-4 text-gray-700 dark:text-gray-50 text-base max-w-screen-sm\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div className=\"grid lg:grid-cols-12 grid-cols-1 gap-5 mt-5\">\n            {data.featured.courses.map((resource: any) => {\n              return (\n                <VerticalResourceCard\n                  className=\"col-span-4 text-center\"\n                  key={resource.path}\n                  resource={resource}\n                />\n              )\n            })}\n          </div>\n        </div>\n\n        <div className=\"sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center lg:px-8 w-full\">\n            <div className=\"flex lg:flex-row flex-col items-center justify-center sm:space-x-10 sm:space-y-0 space-y-5 0 w-full xl:pr-16\">\n              <div className=\"mx-auto\">\n                <h2 className=\"text-xs text-yellow-600 dark:yellow-green-300 uppercase font-semibold mb-2 text-center\">\n                  {data.talks.cta}\n                </h2>\n\n                <h1 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                  {data.talks.title}\n                </h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"grid lg:grid-cols-12 grid-cols-1 gap-5 mt-5\">\n            {data.talks.resources.map((resource: any) => {\n              return (\n                <VerticalResourceCard\n                  className=\"col-span-3 text-center dark:bg-gray-800\"\n                  key={resource.path}\n                  resource={resource}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    </div>)\n  );\n}\n\nexport default DigitalGardening\n\nexport const digitalGardeningQuery = groq`*[_type == 'resource' && slug.current == \"digital-gardening-for-developers-v2\"][0]{\n  title,\n  description,\n  path,\n  'illustration': images[label == 'eggo'][0]{\n    url,\n    alt\n  },\n  'quote': content[title == 'quote'][0]{\n    description\n  },\n  'cta': content[title == 'cta'][0]{\n    description\n  },\n  'featured': resources[slug.current == 'featured-digital-gardening-courses'][0]{\n \t\t'courses': resources[]{\n    \ttitle,\n    \tbyline,\n      'name': content[title == 'name'][0].description,\n    \t'path': resources[]->[0].path,\n    \t'image': resources[]->[0].image\n  \t}\n  },\n  'talks': resources[slug.current == 'infrastructure-for-digital-gardens'][0]{\n      title,\n      description,\n      'cta': content[title == 'cta'][0].description,\n      resources[]{\n        title,\n        'path': slug.current,\n        byline,\n        image,\n      },\n  },\n}`\n\nexport async function getStaticProps() {\n  const data = await sanityClient.fetch(digitalGardeningQuery)\n\n  return {\n    props: {\n      data,\n    },\n  }\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/learn/state-management/index.tsx","r":[0,6016],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport Markdown from 'react-markdown'\nimport {track} from 'utils/analytics'\nimport {CardResource} from 'types'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {get} from 'lodash'\nimport VideoCard from 'components/pages/home/video-card'\nimport {VerticalResourceCard} from 'components/card/verticle-resource-card'\n\nconst StateManagement: React.FC<any> = ({data}) => {\n  return (\n    <>\n      <div className=\"sm:-my-5 -my-3 -mx-5 p-5 dark:bg-gray-900 bg-gray-50\">\n        <div className=\"mx-auto max-w-screen-xl grid gap-10\">\n          <Jumbotron resource={data.jumbotron} />\n          <BigIdeasSection resource={data.theBigIdeas} />\n          <RecoilSection resource={data.recoilSection} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default StateManagement\n\nexport const StateManagementQuery = groq`*[_type == 'resource' && slug.current == \"state-management\"][0]{\n  title,\n  description,\n  path,\n  \"jumbotron\": {\n    \"background\": images[0] {\n    \turl\n  \t},\n    image,\n    title,\n  \tdescription,\n  \t\"name\": subTitle\n  },\n  'theBigIdeas': resources[slug.current == 'the-big-ideas'][0]{\n    description,\n    title,\n    resources[] {\n    \"name\": subTitle,\n      ...\n    }\n },\n \"recoilSection\": resources[slug.current == 'state-management-with-recoil'][0]{\n  ...,\n  resources[]-> {\n    ...\n  }\n },\n}`\n\nexport async function getStaticProps() {\n  const data = await sanityClient.fetch(StateManagementQuery)\n\n  return {\n    props: {\n      data,\n    },\n  }\n}\n\nconst RecoilSection = ({resource}: any) => {\n  const {title, description, resources, path} = resource\n\n  return (\n    (<div className=\"mt-5 md:bg-gray-100 dark:bg-gray-700 rounded-lg py-10 p-5\">\n      <Link\n        href={path}\n        className=\"font-bold hover:text-blue-600 dark:hover:text-blue-300 transition ease-in-out\"\n        onClick={() => {\n          track('clicked resource', {\n            resource: path,\n          })\n        }}>\n\n        <h1 className=\"sm:text-2xl md:text-4xl text-xl font-extrabold leading-tighter text-center mb-4\">\n          {title}\n        </h1>\n\n      </Link>\n      <Markdown\n        source={description}\n        allowDangerousHtml={true}\n        className=\"prose dark:prose-dark md:prose-lg md:dark:prose-lg-dark text-gray-900 dark:text-gray-100  mt-4 max-w-screen-md mx-auto text-center\"\n      />\n      <div className=\"grid lg:grid-cols-3 grid-cols-1 gap-4 mt-10\">\n        {resources.map((resource: any) => {\n          return (\n            <VerticalResourceCard\n              resource={resource}\n              className=\"mb-4 text-center\"\n            />\n          )\n        })}\n      </div>\n    </div>)\n  );\n}\n\nconst BigIdeasSection = ({resource}: any) => {\n  const {title, description, resources} = resource\n\n  return (\n    <div className=\"\">\n      <div className=\"grid lg:grid-cols-5 grid-cols-1 gap-10 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-50 rounded-lg shadow-sm px-5 sm:py-16 py-10 \">\n        <div className=\"col-span-2\">\n          <h1 className=\"sm:text-2xl md:text-4xl text-xl font-extrabold leading-tighter text-center mb-4\">\n            {title}\n          </h1>\n          <Markdown\n            source={description}\n            allowDangerousHtml={true}\n            className=\"prose dark:prose-dark md:prose-lg md:dark:prose-lg-dark text-gray-900 dark:text-gray-100  mt-4 max-w-screen-md\"\n          />\n        </div>\n        <div className=\"col-span-3\">\n          {resources.map((resource: any) => {\n            return <VideoCard resource={resource} className=\"mb-4\" />\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\ntype JumbotronProps = {\n  resource: CardResource\n}\n\nconst Jumbotron: FunctionComponent<JumbotronProps> = ({resource}) => {\n  const {image, title, background, description, name} = resource\n\n  return (\n    <div\n      className=\"relative flex items-center justify-center bg-white text-white overflow-hidden rounded-lg shadow-sm dark:bg-gray-800 \"\n      css={{\n        [bpMinMD]: {\n          minHeight: 477,\n        },\n      }}\n    >\n      <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n        <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl lg:px-8 w-full sm:mb-4 md:my-12 lg:m-0 mt-0 mb-15\">\n          <div className=\"flex lg:flex-row flex-col items-center justify-center sm:space-x-10 sm:space-y-0 space-y-5 0 w-full xl:pr-16\">\n            <div className=\"flex-shrink-0\">\n              <Image\n                quality={100}\n                src={get(image, 'src', image)}\n                width={340}\n                height={340}\n                priority={true}\n                alt={get(image, 'alt', `illustration for ${title}`)}\n              />\n            </div>\n            <div className=\"flex flex-col sm:items-start items-center w-full\">\n              <h2 className=\"text-xs text-yellow-600 dark:text-yellow-300 uppercase font-semibold mb-2\">\n                {name}\n              </h2>\n              <h1 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter text-gray-900 dark:text-gray-50\">\n                {title}\n              </h1>\n              <Markdown\n                source={description}\n                allowDangerousHtml={true}\n                className=\"mt-4 dark:text-gray-200 text-gray-700 text-base max-w-screen-sm opacity-80\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Background\n        className=\"absolute left-0 top-0 w-full h-full z-0 object-cover\"\n        background={background}\n      />\n    </div>\n  )\n}\n\nconst Background = ({className, background}: any) => {\n  return background ? (\n    <Image\n      priority={true}\n      quality={100}\n      className={className}\n      alt=\"\"\n      layout=\"fill\"\n      src={background.url}\n    />\n  ) : null\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/pricing/email/index.tsx","r":[0,6891],"t":"import React from \"react\";\nimport stripeCheckoutRedirect from 'api/stripe/stripe-checkout-redirect'\nimport {Formik} from 'formik'\nimport React, * as React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport {bpMinSM} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport axios from 'utils/configured-axios'\nimport * as yup from 'yup'\nimport Stepper from 'components/pricing/stepper'\nimport Spinner from 'components/spinner'\nimport getTracer from '../../../utils/honeycomb-tracer'\nimport {GetServerSideProps} from 'next'\nimport {setupHttpTracing} from 'utils/tracing-js/dist/src/index'\nimport {useRouter} from 'next/router'\n\nconst loginSchema = yup.object().shape({\n  email: yup.string().email().required('enter your email'),\n})\n\ntype EmailFormProps = {\n  priceId: string | undefined\n  quantity?: number\n  coupon: string | undefined\n}\n\nconst Email: React.FunctionComponent<EmailFormProps> & {getLayout: any} = ({\n  priceId,\n  quantity = 1,\n  coupon,\n}) => {\n  const [isSubmitted, setIsSubmitted] = React.useState<boolean>(false)\n  const [isError, setIsError] = React.useState<boolean | string>(false)\n  const router = useRouter()\n\n  React.useEffect(() => {\n    if (!priceId) {\n      //no price id needs to select a price\n      router.push('/pricing')\n    }\n  }, [priceId])\n\n  const validateEmail = async (email: string) => {\n    setIsSubmitted(true)\n    const {hasProAccess, stripeCustomerId} = await axios\n      .post(`/api/users/check-pro-status`, {\n        email,\n      })\n      .then(({data}) => data)\n\n    if (hasProAccess) {\n      setIsError(\n        `You've already got a pro account at ${email}. [Please login](/login).`,\n      )\n      track('checkout: existing pro account found', {\n        email,\n      })\n    } else if (!!priceId) {\n      setIsError(false)\n      track('checkout: redirect to stripe', {priceId})\n        .then(() =>\n          stripeCheckoutRedirect({\n            priceId,\n            email,\n            stripeCustomerId,\n            quantity,\n            coupon,\n          }),\n        )\n        .catch((error) => {\n          setIsError(error)\n        })\n    } else {\n      // priceId is not set, useEffect should push to different route\n    }\n  }\n\n  return (\n    <div\n      className=\"sm:-mx-5 sm:-mt-5 -mx-5 -mt-3 sm:dark:bg-gray-1000 sm:bg-gray-100 sm:py-24 h-screen\"\n      css={{\n        [bpMinSM]: {\n          backgroundImage:\n            'url(https://res.cloudinary.com/dg3gyk0gu/image/upload/v1613073056/next.egghead.io/backgrounds/grid-of-course-artworks_2x.png)',\n          backgroundSize: 'cover',\n        },\n      }}\n    >\n      <div className=\"flex flex-col items-center sm:border-2 sm:dark:border-gray-800 sm:border-gray-200 sm:rounded-lg sm:max-w-md mx-auto overflow-hidden\">\n        <div className=\"dark:sm:bg-gray-800 dark:bg-gray-1000 sm:bg-gray-100 bg-gray-100 dark-text-white dark:text-white text-gray-900 py-6 w-full flex items-center justify-center\">\n          <Stepper />\n        </div>\n        <div className=\"sm:mx-auto sm:w-full dark:bg-gray-900 bg-white px-5\">\n          <div>\n            <h2 className=\"py-6 text-center sm:text-2xl text-xl leading-tight font-semibold \">\n              Please provide your email address to create an account.\n            </h2>\n            <div className=\" pb-8 px-4 sm:px-8\">\n              {!isSubmitted && !isError && (\n                <Formik\n                  initialValues={{email: ''}}\n                  validationSchema={loginSchema}\n                  onSubmit={(values) => {\n                    track('checkout: submitted email', {\n                      email: values.email,\n                    })\n                    validateEmail(values.email)\n                  }}\n                >\n                  {(props) => {\n                    const {\n                      values,\n                      isSubmitting,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                    } = props\n                    return (\n                      <>\n                        <form onSubmit={handleSubmit}>\n                          <div>\n                            <label\n                              htmlFor=\"email\"\n                              className=\"block leading-6 text-gray-800 dark:text-gray-300\"\n                            >\n                              Email address\n                            </label>\n                            <div className=\"mt-1 rounded-md shadow-sm\">\n                              <input\n                                id=\"email\"\n                                type=\"email\"\n                                value={values.email}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                placeholder=\"you@company.com\"\n                                required\n                                className=\"bg-gray-100 dark:text-white dark:bg-gray-800 focus:ring-blue-500  border border-gray-200 dark:border-gray-700 rounded-md py-3 px-4 block w-full\"\n                              />\n                            </div>\n                          </div>\n                          <div className=\"flex justify-center items-center w-full mt-6\">\n                            <button\n                              type=\"submit\"\n                              disabled={isSubmitting}\n                              className=\"w-full transition duration-150 ease-in-out  bg-blue-600 hover:bg-blue-700 hover:shadow-xl text-white font-semibold py-4 px-6 rounded-md\"\n                            >\n                              Proceed to Payment\n                            </button>\n                          </div>\n                        </form>\n                      </>\n                    )\n                  }}\n                </Formik>\n              )}\n              {isSubmitted && !isError && (\n                <div className=\"flex items-center justify-center py-16\">\n                  <Spinner className=\"mr-2\" />\n                  <p>Redirecting to Stripe payments</p>\n                </div>\n              )}\n              {isError && (\n                <ReactMarkdown className=\"text-center py-16 prose dark:prose-dark sm:dark:prose-xl-dark sm:prose-xl\">\n                  {isError.toString()}\n                </ReactMarkdown>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst tracer = getTracer('pricing-email-page')\n\nexport const getServerSideProps: GetServerSideProps = async function ({\n  req,\n  res,\n  query,\n}) {\n  setupHttpTracing({name: getServerSideProps.name, tracer, req, res})\n\n  return {\n    props: {\n      ...(!!query?.priceId && {priceId: query.priceId}),\n      quantity: query?.quantity || 1,\n      ...(!!query?.coupon && {coupon: query.coupon}),\n    },\n  }\n}\n\nEmail.getLayout = (Page: any, pageProps: any) => {\n  return <Page {...pageProps} />\n}\n\nexport default Email\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/projects/build-a-developer-blog-with-gatsby/index.tsx","r":[0,14735],"t":"import React, {FunctionComponent} from 'react'\nimport {NextSeo} from 'next-seo'\nimport Markdown from 'react-markdown'\nimport Topic from 'components/search/components/topic'\nimport Image from 'next/image'\nimport Link from 'next/link'\n\ntype LandingProps = {\n  course: any\n}\n\nconst landingPage: FunctionComponent<LandingProps> = () => {\n  const course = {\n    id: '418892',\n    title: 'Build a Developer Blog with Gatsby',\n    path: '/courses/build-a-developer-blog-with-gatsby-bd96',\n    image:\n      'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/425/621/full/developer_blog_1000_2x.png',\n    resources: [\n      {\n        title: 'Use npm init gatsby to create an initial Gatsby site',\n        slug: 'gatsby-use-npm-init-gatsby-to-create-an-initial-gatsby-site',\n        path:\n          '/lessons/gatsby-use-npm-init-gatsby-to-create-an-initial-gatsby-site',\n      },\n      {\n        title: 'Add a Shared Layout Component to a Gatsby Site',\n        slug: 'gatsby-add-a-shared-layout-component-to-a-gatsby-site',\n        path: '/lessons/gatsby-add-a-shared-layout-component-to-a-gatsby-site',\n      },\n      {\n        title: 'Create an Accessible SEO Component using React Helmet',\n        slug: 'gatsby-create-an-accessible-seo-component-using-react-helmet',\n        path:\n          '/lessons/gatsby-create-an-accessible-seo-component-using-react-helmet',\n      },\n      {\n        title: 'Use Gatsby Plugins to Source and Transform MDX Files',\n        slug: 'gatsby-use-gatsby-plugins-to-source-and-transform-mdx-files',\n        path:\n          '/lessons/gatsby-use-gatsby-plugins-to-source-and-transform-mdx-files',\n      },\n      {\n        title: `Use Gatsby's File System Route API to Generate Pages for Each MDX File`,\n        slug:\n          'gatsby-use-gatsby-s-file-system-route-api-to-generate-pages-for-each-mdx-file',\n        path:\n          '/lessons/gatsby-use-gatsby-s-file-system-route-api-to-generate-pages-for-each-mdx-file',\n      },\n      {\n        title: 'Use MDXRenderer to Render MDX Content in a Gatsby Site',\n        slug: 'gatsby-use-mdxrenderer-to-render-mdx-content-in-a-gatsby-site',\n        path:\n          '/lessons/gatsby-use-mdxrenderer-to-render-mdx-content-in-a-gatsby-site',\n      },\n      {\n        title: 'Add a List of Posts using a GraphQL Page Query',\n        slug: 'gatsby-add-a-list-of-posts-using-a-graphql-page-query',\n        path: '/lessons/gatsby-add-a-list-of-posts-using-a-graphql-page-query',\n      },\n      {\n        title:\n          'Add Theme UI to a Gatsby Site using gatsby-plugin-theme-ui and theme-ui',\n        slug:\n          'gatsby-add-theme-ui-to-a-gatsby-site-using-gatsby-plugin-theme-ui-and-theme-ui',\n        path:\n          '/lessons/gatsby-add-theme-ui-to-a-gatsby-site-using-gatsby-plugin-theme-ui-and-theme-ui',\n      },\n      {\n        title:\n          'Add Support for Syntax Highlighting in a Gatsby Site with @theme-ui/prism',\n        slug:\n          'gatsby-add-support-for-syntax-highlighting-in-a-gatsby-site-with-theme-ui-prism',\n        path:\n          '/lessons/gatsby-add-support-for-syntax-highlighting-in-a-gatsby-site-with-theme-ui-prism',\n      },\n      {\n        title: 'Render Performant Images with the Gatsby StaticImage Component',\n        slug:\n          'gatsby-render-performant-images-with-the-gatsby-staticimage-component',\n        path:\n          '/lessons/gatsby-render-performant-images-with-the-gatsby-staticimage-component',\n      },\n      {\n        title: 'Process Images and Render them using GatsbyImage',\n        slug: 'gatsby-process-images-and-render-them-using-gatsbyimage',\n        path:\n          '/lessons/gatsby-process-images-and-render-them-using-gatsbyimage',\n      },\n      {\n        title: 'Add Image Support to SEO Component',\n        slug: 'gatsby-add-image-support-to-seo-component',\n        path: '/lessons/gatsby-add-image-support-to-seo-component',\n      },\n    ],\n  }\n\n  return (<>\n    <div className=\"mb-10 pb-10 xl:px-0 px-5 max-w-screen-xl mx-auto\">\n      <div className=\"mt-10 mb-16 text-center\">\n        <div className=\"mb-10\">\n          <Image priority src={course.image} height=\"270\" width=\"270\" />\n        </div>\n        <p className=\"text-lg md:text-2xl leading-6 text-gray-500\">\n          Portfolio Project Challenge\n        </p>\n        <h1 className=\"text-2xl md:text-4xl font-bold mt-2\">\n          {course.title}\n        </h1>\n      </div>\n      <ProjectBrief\n        className=\"pb-12\"\n        topic={{\n          name: 'gatsby',\n          label: 'Project Brief',\n        }}\n      >\n        <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n          {`As a developer, your GitHub is a huge step up from a bullet point list of buzzwords on a resume. However, your repos alone don't give much room to provide additional context around the other aspects of web development. \n\nYour task is to use Gatsby to **build a portfolio site** that features your case studies. Make it performant and accessible out of the box, add SEO support so potential employers can find you with a quick search.\n\nYou can make this site using MDX, or stretch yourself a bit by relying on reusable React components and passing things via props. Both are great approaches to use inside Gatsby.\n\nIf you more ideas about what to include in your portfolio, check out [this article by Joel Hooks](https://joelhooks.com/developer-portfolio).`}\n        </Markdown>\n      </ProjectBrief>\n\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 mt-16 mb-16\">\n        <div className=\"relative px-10 py-10 bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-2 shadow rounded-md border border-gray-100 sm:mr-0 md:mr-4\">\n          <div\n            className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n            style={{\n              background:\n                'linear-gradient(to right, #7b47a3 0%, #9290ff 100%)',\n            }}\n          />\n          <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">Performance</h1>\n          <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n            {`- The individual pages to the case studies need to be programmatically created from your GraphQL data using the File System Route API.\n- The index page of your portfolio site needs to include at least 3 case studies.\n\n- GatsbyImage is a React component specially designed to give users a great image experience. It combines speed and best practices. Process images and render them using GatsbyImage on each page.\n\n- MDX is an authorable format that lets you seamlessly write JSX in your Markdown documents. Use MDX to process and render the content of each page. \n\n- Gatsby can help your site rank and perform better in search engines. Some advantages, like speed, come out of the box and others require configuration. Add SEO support to your portfolio.\n\n`}\n          </Markdown>\n        </div>\n        <div className=\"relative px-10 py-10 bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-1 shadow rounded-md border border-gray-100 mt-4 md:mt-0\">\n          <div\n            className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n            style={{\n              background:\n                'linear-gradient(to right, #938cff 0%, #8440a8 100%)',\n            }}\n          />\n          <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">Standards</h1>\n          <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n            {`- The application uses Gatsby.\n\n- The application contains minimal bugs.\n\n- The application is deployed to the web and is useable for its intended purpose.\n\n- The application is accessible.`}\n          </Markdown>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n\n      <div className=\"relative bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 shadow rounded-md border border-gray-100 mt-16 mb-16 px-10 py-10\">\n        <div\n          className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n          style={{\n            background: 'linear-gradient(to right, #7b47a3 0%, #9290ff 100%)',\n          }}\n        />\n        <h1 className=\"sm:text-2xl text-xl font-bold mb-2 text-center\">\n          Course Content\n        </h1>\n\n        <div className=\"max-w-screen-sm m-auto pb-4\">\n          <ul className=\"mt-10\">\n            {course?.resources?.map((lesson: any) => {\n              return (\n                (<li key={`${course.path}::${lesson.slug}`}>\n                  <div className=\"flex items-center leading-tight py-2\">\n                    <Link\n                      href={lesson.path}\n                      className=\"py-1 flex space-x-2 items-center dark:text-gray-100 text-gray-700 hover:text-blue-600 group\">\n\n                      {/* prettier-ignore */}\n                      <div className=\"flex-shrink-0\"><svg className=\"text-gray-400 dark:text-gray-400 group-hover:text-blue-600\" width={18} height={18} viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM9.555 7.168A1 1 0 0 0 8 8v4a1 1 0 0 0 1.555.832l3-2a1 1 0 0 0 0-1.664l-3-2z\" fill=\"currentColor\"/></g></svg></div>\n                      <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-700 dark:text-gray-100 mt-0 text-base md:text-lg\">\n                        {lesson.title}\n                      </Markdown>\n\n                    </Link>\n                  </div>\n                </li>)\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n      <div>\n        <div className=\"mt-10 text-center pb-12\">\n          <h1 className=\"text-2xl md:text-4xl font-bold pb-4\">\n            Did you complete the Portfolio Project Challenge?\n          </h1>\n          <p className=\"text-lg md:text-2xl leading-6 text-gray-500\">\n            Let us know what you built!\n          </p>\n\n          <a\n            className=\"inline-flex justify-center items-center px-6 py-4 font-semibold rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200 mt-12\"\n            title=\"Share on twitter\"\n            href=\"https://twitter.com/intent/tweet?text=I%20completed%20the%20Portfolio%20Project%20Challenge%20on%20%40eggheadio%20🙌\"\n            rel=\"noopener\"\n          >\n            Tweet @eggheadio\n          </a>\n        </div>\n      </div>\n    </div>\n  </>);\n}\n\nexport enum CARD_TYPES {\n  SUMMARY = 'summary',\n  SUMMARY_LARGE_IMAGE = 'summary_large_image',\n}\n\nexport type Topic = {\n  name: string\n  label: string\n  title?: string\n}\n\ntype ProjectBriefProps = {\n  topic: Topic\n  className: any\n  pageData?: any\n  CTAComponent?: React.FC\n  ogImage?: string\n  verticalImage?: string\n  cardType?: CARD_TYPES\n}\n\nconst ProjectBrief: React.FC<ProjectBriefProps> = ({\n  topic,\n  children,\n  ogImage,\n  className,\n  cardType = CARD_TYPES.SUMMARY_LARGE_IMAGE,\n}) => {\n  const description = `Build a localization engine that renders data based on the Edge location nearest to the application's user using Cloudflare Workers.`\n\n  const title =\n    topic.title ||\n    `Introduction to Cloudflare Workers - Portfolio Project Challenge`\n\n  return (\n    <div className={`xl:px-0 dark:bg-gray-900 ${className ? className : ''}`}>\n      <NextSeo\n        description={description}\n        title={title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          site: `@eggheadio`,\n          cardType,\n        }}\n        openGraph={{\n          title,\n          description: description,\n          site_name: 'egghead',\n          images: [\n            {\n              url:\n                ogImage ||\n                `https://og-image-react-egghead.now.sh/topic/${topic.name}?orientation=landscape&v=20201104`,\n            },\n          ],\n        }}\n      />\n      <div className=\"md:grid grid-cols-1 gap-5 justify-self-center space-y-5 md:space-y-0 dark:bg-gray-900\">\n        <div\n          className={`bg-white grid grid-cols-8 h-full relative items-center overflow-hidden shadow rounded-md border border-gray-100 dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-8`}\n        >\n          <div\n            className=\"overflow-hidden sm:col-span-3 col-span-3 w-full h-full\"\n            style={{\n              background: `url(https://og-image-react-egghead.now.sh/topic/${topic.name}?orientation=portrait&v=20201104)`,\n              backgroundSize: 'cover',\n              backgroundPosition: '38%',\n            }}\n          />\n          <div className=\"sm:col-span-5 col-span-5 flex flex-col justify-start h-full px-12 py-12 pt-10\">\n            <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">\n              {topic.label}\n            </h1>\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default landingPage\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/index.tsx","r":[0,30616],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport Markdown from 'react-markdown'\nimport Eggo from '../../../components/images/eggo.svg'\nimport removeMarkdown from 'remove-markdown'\nimport {NextSeo} from 'next-seo'\nimport {track} from 'utils/analytics'\nimport {first, get} from 'lodash'\nimport {useViewer} from '../../../context/viewer-context'\nimport VideoCard from 'components/pages/home/video-card'\n\ntype CourseProps = {\n  course: any\n  dependencies: any\n}\n\nconst Course: FunctionComponent<CourseProps> = () => {\n  const course = {\n    title: `Create an eCommerce Store with Next.js and Stripe Checkout`,\n    slug: `create-an-ecommerce-store-with-next-js-and-stripe-checkout`,\n    image:\n      'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608034857/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/create-an-ecommerce-store-with-next-js-and-stripe-checkout_1.png',\n    summary: `#### Accept payments & sell products powered by Stripe and the best of the JAMStack\n\nThere are as many ways to build an e-commerce store on the internet as there are products to sell. \nOne thing is for certain, e-commerce is here to stay and as professional developers we need to understand\nhow to build fully custom stores for our clients using the best modern tools available.\n\n* React: flexible and customizable while following modern best practices\n* Next.js: lightening fast with guide rails to help your project perform like consumers expect\n* Stripe Checkout: let's you offload reams of complicated business logic to a trusted third party\nthat maintains regulatory compliance, global payments, and a standard UX.\n\nYour store will have well managed local component state using React Hooks and you'll \nalso have clear and cohesive shared (global) state with React Context.\n\nFinally you'll deploy your custom store to Vercel (the platform behind Next.js) as well as\nhow to make your Next.js e-commerce store portable to deploy to other platforms.\n`,\n    podcast: {\n      id: '',\n    },\n    instructor: {\n      name: 'Colby Fayock',\n      slug: 'colby-fayock',\n      path: '/q/resources-by-colby-fayock',\n      bio: 'Colby is a UX designer and front-end engineer living on the Philly side of Pennsylvania. He got his start in web design customizing his AIM and MySpace pages, and quickly graduated to whole websites for teams and bands. He currently works as a developer advocate for Applitools.',\n      twitter: 'colbyfayock',\n      image:\n        'https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/366/medium/IMG_7414.JPG',\n    },\n    tags: [\n      {\n        title: 'Next.js',\n        // prettier-ignore\n        image: <svg className=\"w-6 h-6\" width=\"116\" height=\"100\" viewBox=\"0 0 116 100\" fill=\"#000\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M57.5 0L115 100H0L57.5 0z\" /></svg>,\n      },\n      {\n        title: 'Stripe',\n        // prettier-ignore\n        image: <svg className=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"34\" viewBox=\"0 0 24 34\"><path fill=\"#6772E5\" fillRule=\"evenodd\" d=\"M688.562205,565.125275 C688.562205,563.668132 689.771654,563.107692 691.774803,563.107692 C694.647244,563.107692 698.275591,563.967033 701.148031,565.498901 L701.148031,556.718681 C698.011024,555.485714 694.911811,555 691.774803,555 C684.102362,555 679,558.96044 679,565.573626 C679,575.885714 693.362205,574.241758 693.362205,578.687912 C693.362205,580.406593 691.850394,580.967033 689.733858,580.967033 C686.59685,580.967033 682.590551,579.696703 679.415748,577.978022 L679.415748,586.87033 C682.930709,588.364835 686.483465,589 689.733858,589 C697.595276,589 703,585.151649 703,578.463736 C702.962205,567.32967 688.562205,569.30989 688.562205,565.125275 Z\" transform=\"translate(-679 -555)\"/></svg>,\n      },\n    ],\n    articles: [\n      {\n        title: `Build a CMS for an E-commerce Store with Next.js and Sanity`,\n        description: `Having the ability to build an online store opens up a ton of possibilities, whether you’re building that store for a new client to pay the bills or you’re trying to start your own business. In this article, you will learn how to build a CMS for an ecommerce store with Next.js and Sanity`,\n        name: `manage product inventory`,\n        image: `https://res.cloudinary.com/dg3gyk0gu/image/upload/v1613432463/next.egghead.io/resources/create-an-ecommerce-store-with-next-js-and-stripe-checkout/build-cms-e-commerce-article_2x.png`,\n        path: `/blog/build-cms-for-ecommerce-store-with-nextjs-and-sanity`,\n      },\n      {\n        title: `Product Images That Don't Byte with the Next.js Image Component`,\n        name: `Build high-performance ecommerce sites`,\n        description: `By using the Next.js Image Component, you can add images to your project just like you would the standard img tag and be confident that you’ll be serving optimized images to your website visitors.`,\n        image: `https://res.cloudinary.com/dg3gyk0gu/image/upload/v1613454662/next.egghead.io/resources/create-an-ecommerce-store-with-next-js-and-stripe-checkout/product-images-ecommerce-article_2x.png`,\n        path: `/blog/product-images-that-dont-byte-with-the-nextjs-image-component`,\n      },\n    ],\n    video: {\n      name: 'Explore the challenges of ecommerce',\n      title: 'Getting Personal with Ecommerce, React, & the Static Web',\n      description: `Ecommerce depends on highly dynamic solutions personalizing experiences for customers from the price of a product to the total cost of that customer’s shopping cart. How can we leverage React and tools like Next.js to bring that dynamic experience to the static web? \n        \nIn this talk, we’ll explore the challenges of ecommerce in a static world. We’ll talk about what tools are available to us and how we can take advantage of them to build dynamic web apps with a practical example of a Next.js app.`,\n      byline: 'Colby Fayock',\n      path: '/talks/react-getting-personal-with-ecommerce-react-the-static-web',\n      image:\n        'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1613463219/next.egghead.io/resources/create-an-ecommerce-store-with-next-js-and-stripe-checkout/challenges-of-ecommerce-cover_2.png',\n    },\n    resources: [\n      {\n        title: 'Bootstrap a Next.js Ecommerce App',\n        image:\n          'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608205688/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/ecommerce-stripe-icon-2.png',\n        // body: `* Create a New React Application with Next.js\\n* Add a Grid of Products with Images to a Next.js React App\\n* Add and Configure Products in the Stripe Dashboard for an Online Store\\n* Dynamically Manage a Grid of Products in an Online Store with a JSON Document\\n* Host & Deploy a Next.js React app on Vercel`,\n        lessons: [\n          {\n            slug: `next-js-create-a-new-react-application-with-the-next-js-create-next-app-cli`,\n            title:\n              'Create a New React Application with the Next.js create-next-app CLI',\n            path: '/lessons/next-js-create-a-new-react-application-with-the-next-js-create-next-app-cli',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `next-js-add-and-style-a-grid-of-products-with-images-in-a-next-js-react-app`,\n            title:\n              'Add and Style a Grid of Products with Images in a Next.js React App',\n            path: '/lessons/next-js-add-and-style-a-grid-of-products-with-images-in-a-next-js-react-app',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `next-js-add-and-configure-products-in-the-stripe-dashboard-for-an-online-store`,\n            title:\n              'Add and Configure Products in the Stripe Dashboard for an Online Store',\n            path: '/lessons/next-js-add-and-configure-products-in-the-stripe-dashboard-for-an-online-store',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `javascript-dynamically-manage-a-grid-of-products-in-an-online-store-with-a-json-document`,\n            title:\n              'Dynamically Manage a Grid of Products in an Online Store with a JSON Document',\n            path: '/lessons/javascript-dynamically-manage-a-grid-of-products-in-an-online-store-with-a-json-document',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png',\n          },\n          {\n            slug: `next-js-host-deploy-a-next-js-react-app-on-vercel-imported-from-github`,\n            title:\n              'Host & Deploy a Next.js React App on Vercel imported from GitHub',\n            path: '/lessons/next-js-host-deploy-a-next-js-react-app-on-vercel-imported-from-github',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n        ],\n      },\n      {\n        title: 'Integrate Stripe Checkout into Next.js',\n        image:\n          'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608205688/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/ecommerce-stripe-icon-3.png',\n        lessons: [\n          {\n            slug: `stripe-configure-a-stripe-checkout-domain-for-client-only-integration`,\n            title:\n              'Configure a Stripe Checkout Domain for Client-Only Integration',\n            path: '/lessons/stripe-configure-a-stripe-checkout-domain-for-client-only-integration',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/294/square_280/Artboard.png',\n          },\n          {\n            slug: `next-js-add-a-stripe-api-key-as-an-environment-variable-in-next-js-vercel`,\n            title:\n              'Add a Stripe API Key as an Environment Variable in Next.js & Vercel',\n            path: '/lessons/next-js-add-a-stripe-api-key-as-an-environment-variable-in-next-js-vercel',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `stripe-integrate-stripe-checkout-to-purchase-products-in-next-js-with-stripe-stripe-stripe-js-cl`,\n            title:\n              'Integrate Stripe Checkout to Purchase Products in Next.js with Stripe @stripe/stripe-js Cl',\n            path: '/lessons/stripe-integrate-stripe-checkout-to-purchase-products-in-next-js-with-stripe-stripe-stripe-js-cl',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/294/square_280/Artboard.png',\n          },\n        ],\n      },\n      {\n        title: 'Manage Shopping Cart State',\n        image:\n          'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608205688/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/ecommerce-stripe-icon-1.png',\n        lessons: [\n          {\n            slug: `react-create-a-shopping-cart-with-the-usestate-react-hook-to-manage-product-quantity-and-total`,\n            title:\n              'Create a Shopping Cart with the useState React Hook to Manage Product Quantity and Total',\n            path: '/lessons/react-create-a-shopping-cart-with-the-usestate-react-hook-to-manage-product-quantity-and-total',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png',\n          },\n          {\n            slug: `react-create-a-custom-react-hook-to-manage-cart-state`,\n            title: 'Create a Custom React Hook to Manage Cart State',\n            path: '/lessons/react-create-a-custom-react-hook-to-manage-cart-state',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png',\n          },\n          {\n            slug: `react-use-the-react-context-api-to-globally-manage-cart-state-in-a-next-js-app`,\n            title:\n              'Use the React Context API to Globally Manage Cart State in a Next.js App',\n            path: '/lessons/react-use-the-react-context-api-to-globally-manage-cart-state-in-a-next-js-app',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png',\n          },\n          {\n            slug: `react-store-and-load-cart-state-from-local-storage-to-persist-cart-data-when-reloading-the-page`,\n            title:\n              'Store and Load Cart State from Local Storage to Persist Cart Data When Reloading the Page',\n            path: '/lessons/react-store-and-load-cart-state-from-local-storage-to-persist-cart-data-when-reloading-the-page',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png',\n          },\n          {\n            slug: `next-js-use-next-js-dynamic-routes-to-create-product-pages-for-an-online-store`,\n            title:\n              'Use Next.js Dynamic Routes to Create Product Pages for an Online Store',\n            path: '/lessons/next-js-use-next-js-dynamic-routes-to-create-product-pages-for-an-online-store',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `next-js-create-a-shopping-cart-page-to-manage-products-to-purchase-in-a-next-js-app`,\n            title:\n              'Create a Shopping Cart Page to Manage Products to Purchase in a Next.js App',\n            path: '/lessons/next-js-create-a-shopping-cart-page-to-manage-products-to-purchase-in-a-next-js-app',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/074/square_280/nextjs.png',\n          },\n          {\n            slug: `react-add-a-quantity-input-to-the-cart-page-to-add-or-remove-items-from-a-shopping-cart-in-next`,\n            title:\n              'Add a Quantity Input to the Cart Page to Add or Remove Items from a Shopping Cart in Next',\n            path: '/lessons/react-add-a-quantity-input-to-the-cart-page-to-add-or-remove-items-from-a-shopping-cart-in-next',\n            image:\n              'https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/square_280/react.png',\n          },\n        ],\n      },\n    ],\n  }\n\n  return (\n    <>\n      <NextSeo\n        description={removeMarkdown(course.summary)}\n        title={course.title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          handle: course.instructor.twitter,\n          site: `@eggheadio`,\n          cardType: 'summary_large_image',\n        }}\n        openGraph={{\n          title: course.title,\n          // url: http_url,\n          description: removeMarkdown(course.summary),\n          site_name: 'egghead',\n          images: [\n            {\n              url: `https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608044328/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/card_2x.png`,\n            },\n          ],\n        }}\n      />\n      <div>\n        <article className=\"\">\n          <header className=\"relative -mx-5 px-5\">\n            <div className=\"absolute left-0 top-0 sm:-mt-5 -mt-3 h-3 w-full bg-gradient-to-r from-pink-400 via-purple-500 to-cyan-500\" />\n            <div className=\"flex md:flex-row flex-col md:space-x-10 md:space-y-0 space-y-6 items-center md:pb-16 pb-8 md:pt-8 pt-4 max-w-screen-lg mx-auto\">\n              <div className=\"flex-shrink-0 mt-8\">\n                <Image\n                  src={course.image}\n                  alt={course.title}\n                  width={288}\n                  height={288}\n                  quality={100}\n                />\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"uppercase font-medium tracking-wide text-xs md:text-left text-center text-pink-600\">\n                  Portfolio Project\n                </div>\n                <h1 className=\"md:text-3xl text-3xl md:text-left text-center font-bold tracking-tight leading-snug pb-6 max-w-screen-sm\">\n                  {course.title}\n                </h1>\n                <Tags tags={course.tags} />\n              </div>\n            </div>\n          </header>\n          <main>\n            <Markdown\n              className=\"prose prose-lg md:prose-xl dark:prose-dark dark:prose-lg-dark dark:md:prose-xl-dark max-w-screen-md mx-auto\"\n              source={course.summary}\n            />\n            <div className=\"mt-20 bg-gray-50 dark:bg-gray-800 -mx-5 pt-24 xl:px-0 px-5\">\n              <div className=\"max-w-screen-lg mx-auto\">\n                <div className=\"mb-4 uppercase font-medium tracking-wide text-sm md:text-left text-center text-blue-600\">\n                  What You’ll Build for Your Portfolio\n                </div>\n                <h2 className=\"sm:text-2xl text-3xl sm:text-left font-semibold text-center leading-tighter pb-12\">\n                  How to build a start-to-finish dynamic Next.js app\n                </h2>\n                {course.resources.map((part, idx) => {\n                  const isLast = idx === course.resources.length - 1\n                  return (\n                    <Part\n                      key={part.title}\n                      part={part}\n                      idx={idx}\n                      isLast={isLast}\n                    />\n                  )\n                })}\n              </div>\n            </div>\n            <div className=\"bg-gray-900 -mx-5 md:pt-24 pt-10 pb-40 xl:px-0 px-5 text-white \">\n              <div className=\"max-w-screen-lg mx-auto grid md:grid-cols-2 grid-cols-1 gap-10 md:text-left text-center\">\n                <div>\n                  {/* <div className=\"mb-2 uppercase font-medium tracking-wide text-sm md:text-left text-center text-purple-300\">\n                    What You’ll Build for Your Portfolio\n                  </div> */}\n                  <p className=\"text-xl mt-4 max-w-md md:mx-0 mx-auto\">\n                    By the end of this project, you’ll have your own dynamic\n                    eCommerce store with a working checkout flow.\n                  </p>\n                  <ul className=\"text-blueGray-200 mt-6 leading-10 list-none list-inside text-lg font-light\">\n                    {[\n                      'Manage local state with React Hooks',\n                      'Manage global state with React Context',\n                      'Purchasing flow with Stripe Checkout',\n                    ].map((i) => (\n                      <li className=\"space-x-4\" key={i}>\n                        <span className=\"text-purple-300\">✓</span>\n                        <span>{i}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div className=\"md:row-start-auto row-start-1\">\n                  <Image\n                    className=\"rounded-md shadow-lg\"\n                    src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1608034859/next.egghead.io/pages/projects/create-an-ecommerce-store-with-next-js-and-stripe-checkout/screenshot-of-space-jelly-shop-interface.png\"\n                    width={1128 / 2}\n                    height={698 / 2}\n                    alt=\"a screenshot of space jelly shop interface\"\n                  />\n                </div>\n              </div>\n              <div className=\"mt-16 font-light text-purple-300 grid md:grid-cols-5 grid-cols-2 lg:grid-rows-2 text-center max-w-screen-lg mx-auto md:gap-x-12 gap-x-3 md:gap-y-6 gap-y-5 tracking-wide\">\n                {[\n                  'React Context API',\n                  'Data Fetching',\n                  'React useState',\n                  'Custom React Hooks',\n                  'Stripe Integration',\n                  'Manage API keys',\n                  'Pre-rendering',\n                  'Dynamic Routing',\n                  'CSS Grid',\n                  'Vercel deploys',\n                ].map((i) => (\n                  <div className=\"\" key={i}>\n                    {i}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </main>\n        </article>\n\n        <Instructor instructor={course.instructor} />\n        <Articles articles={course.articles}>\n          <VideoCard resource={course.video} />\n        </Articles>\n\n        <Join />\n      </div>\n    </>\n  )\n}\n\n// ——— COMPONENTS\n\nconst Join: FunctionComponent = () => {\n  const {viewer} = useViewer()\n  return (\n    (<div className=\"py-24 text-center dark:bg-gray-800 bg-gray-100 text-white -mx-5 xl:px-0 px-5\">\n      <div className=\"max-w-screen-xl mx-auto flex flex-col items-center space-y-6\">\n        <div>\n          <Eggo className=\"w-16\" />\n        </div>\n        <h2 className=\"lg:text-2xl text-xl font-semibold leading-tighter max-w-2xl text-gray-900 dark:text-gray-100\">\n          Add this project to your portfolio with your egghead Pro Membership\n        </h2>\n        {viewer?.is_pro ? (\n          <>\n            <Link\n              href=\"/playlists/create-an-ecommerce-store-with-next-js-and-stripe-checkout-562c\"\n              onClick={() =>\n                track('clicked project', {\n                  project:\n                    'create-an-ecommerce-store-with-next-js-and-stripe-checkout',\n                })\n              }\n              className=\"px-6 py-4 rounded-lg font-semibold bg-blue-600 text-white transition-all ease-in-out duration-300 hover:scale-105 hover:bg-blue-500 hover:shadow-xl\">\n              \n                Build this E-Commerce Store\n              \n            </Link>\n          </>\n        ) : (\n          <>\n            <div className=\"text-gray-900 dark:text-gray-100\">\n              from just <strong>$20/month</strong>\n            </div>\n            <Link\n              href=\"/pricing\"\n              onClick={() =>\n                track('clicked join CTA', {\n                  project:\n                    'create-an-ecommerce-store-with-next-js-and-stripe-checkout',\n                })\n              }\n              className=\"px-6 py-4 rounded-lg font-semibold bg-blue-600 text-white transition-all ease-in-out duration-300 hover:scale-105 hover:bg-blue-500 hover:shadow-xl\">\n              \n                Build this E-Commerce Store\n              \n            </Link>\n          </>\n        )}\n      </div>\n    </div>)\n  );\n}\n\nconst Instructor: FunctionComponent<{\n  instructor: {\n    name: string\n    bio: string\n    path: string\n    image: string\n    slug: string\n  }\n}> = ({instructor: {name, bio, path, image, slug}}) => {\n  return (\n    (<div className=\"bg-gray-100 dark:bg-gray-800 -mx-5 py-20 xl:px-0 px-5 text-white\">\n      <div className=\"max-w-screen-lg mx-auto\">\n        <div className=\"flex flex-col space-y-2 text-center items-center\">\n          <div className=\"rounded-full bg-white p-1 overflow-hidden mb-4\">\n            <Image\n              className=\"rounded-full\"\n              src={image}\n              width={160}\n              height={160}\n              alt=\"Colby Fayock\"\n            />\n          </div>\n          <div className=\"text-xs uppercase text-gray-600 dark:text-gray-400\">\n            Meet Your Instructor\n          </div>\n          <Link\n            href={path}\n            onClick={() => {\n              track(`clicked instructor profile link`, {\n                project:\n                  'create-an-ecommerce-store-with-next-js-and-stripe-checkout',\n                instructor: slug,\n              })\n            }}\n            className=\"text-lg font-semibold text-gray-900 dark:text-gray-200\">\n\n            {name}\n\n          </Link>\n          <Markdown className=\"prose dark:prose-dark max-w-xl\" source={bio} />\n        </div>\n      </div>\n    </div>)\n  );\n}\n\nconst Tags: FunctionComponent<{\n  tags: {title: string; image: React.ReactElement}[]\n}> = ({tags}) => {\n  return (\n    <div className=\"flex space-x-6 items-center md:justify-start justify-center\">\n      {tags.map((tag) => (\n        <div key={tag.title} className=\"flex space-x-1 items-center\">\n          {tag.image}\n          <span>{tag.title}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst Part: FunctionComponent<{\n  part: {\n    title: string\n    body?: string\n    image: string\n    lessons?: {title: string; path: string; slug: string}[]\n  }\n  idx: number\n  isLast: boolean\n}> = ({part: {title, body, image, lessons}, idx, isLast = false}) => {\n  const index = idx + 1\n  const gap = isLast ? 'md:pb-24 pb-10' : 'pb-10'\n\n  const Thumbnail = () => {\n    return image ? (\n      <div className=\"overflow-hidden flex\">\n        <Image\n          className=\"block\"\n          src={image}\n          alt={title}\n          width={202}\n          height={171}\n        />\n      </div>\n    ) : null\n  }\n\n  return (\n    (<div className=\"flex md:flex-row flex-col md:space-x-6 mt-4\">\n      <div\n        className={`space-y-2 flex flex-col md:items-end items-center py-1 ${gap}`}\n      >\n        {/* <div className=\"uppercase font-semibold text-sm text-blue-500\">Part {index}</div> */}\n        {lessons ? (\n          <Link\n            href={get(first(lessons), 'path', '#')}\n            onClick={() => {\n              track(`clicked first lesson thumbnail`, {\n                lesson: get(first(lessons), 'slug'),\n                project:\n                  'create-an-ecommerce-store-with-next-js-and-stripe-checkout',\n              })\n            }}>\n\n            <Thumbnail />\n\n          </Link>\n        ) : (\n          <Thumbnail />\n        )}\n      </div>\n      <div className=\"md:flex hidden flex-col items-center relative\">\n        <div className=\"flex items-center justify-center text-center text-xs text-gray-400 font-semibold w-6 h-6 rounded-full border-2 border-gray-200 dark:border-gray-400 flex-shrink-0\">\n          <small>{index}</small>\n        </div>\n        <div className=\"border-r-2 border-gray-200 dark:border-gray-400 h-full\" />\n        {/* {isLast && (\n          <div className=\"flex items-center justify-center text-center text-xs bg-blue-100 text-blue-500 font-semibold w-10 h-10 transform translate-y-10 absolute bottom-0 rounded-full border-none border-gray-200 flex-shrink-0\">\n            <FlagIcon />\n          </div>\n        )} */}\n      </div>\n      <div className={`md:w-full ${gap}`}>\n        <h3 className=\"text-lg font-bold relative -translate-y-1 pb-1\">\n          {title}\n        </h3>\n        {body && <Markdown className=\"prose\" source={body} />}\n        {lessons && (\n          <ul>\n            {lessons.map((l) => (\n              <li>\n                {l.path ? (\n                  <Link\n                    href={l.path}\n                    onClick={() => {\n                      track(`clicked lesson in list`, {\n                        lesson: l.slug,\n                        project:\n                          'create-an-ecommerce-store-with-next-js-and-stripe-checkout',\n                      })\n                    }}\n                    className=\"py-1 flex space-x-2 items-center dark:text-gray-100 text-gray-700 hover:text-blue-600 group\">\n\n                    {/* prettier-ignore */}\n                    <div className=\"flex-shrink-0\"><svg className=\"text-gray-400 dark:text-gray-400 group-hover:text-blue-600\" width={18} height={18} viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM9.555 7.168A1 1 0 0 0 8 8v4a1 1 0 0 0 1.555.832l3-2a1 1 0 0 0 0-1.664l-3-2z\" fill=\"currentColor\"/></g></svg></div>\n                    <div className=\"font-semibold\">{l.title}</div>\n\n                  </Link>\n                ) : (\n                  <div className=\"font-semibold py-1\">{l.title}</div>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>)\n  );\n}\n\nconst Articles: React.FC<{articles: any}> = ({articles, children}) => {\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 -mx-5 pt-24 pb-40 xl:px-0 px-5 text-white pb-12\">\n      <div className=\"max-w-screen-lg mx-auto\">\n        <div className=\"mb-4 uppercase font-medium tracking-wide text-sm md:text-left text-center text-blue-600\">\n          Build Beyond this project\n        </div>\n        <h2 className=\"sm:text-2xl text-3xl md:text-left font-semibold text-center leading-tighter pb-4 dark:text-gray-200 text-gray-900\">\n          Additional Learning Resources\n        </h2>\n\n        <div className=\"relative\">\n          <div className=\"absolute inset-0\">\n            <div className=\"h-2/3\"></div>\n          </div>\n          <div className=\"relative max-w-7xl mx-auto\">\n            <div className=\"mt-12 mx-auto grid gap-5 md:grid-cols-2 md:max-w-none\">\n              {articles.map((article: any) => {\n                return (\n                  <div\n                    className=\"flex flex-col rounded-lg shadow-lg overflow-hidden mb-4\"\n                    key={article.path}\n                  >\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        className=\"h-64 h-72 w-full object-cover\"\n                        src={article.image}\n                        alt=\"\"\n                      />\n                    </div>\n                    <div className=\"flex-1 dark:bg-gray-800 p-6 flex flex-col justify-between\">\n                      <h2 className=\"uppercase font-semibold text-xs text-gray-700 dark:text-gray-200\">\n                        {article.name}\n                      </h2>\n                      <div className=\"flex-1\">\n                        <a href={article.path} className=\"block mt-2\">\n                          <p className=\"text-xl font-semibold dark:text-white text-gray-900\">\n                            {article.title}\n                          </p>\n                          <Markdown className=\"prose dark:prose-dark dark:prose-sm-dark prose-sm mt-4\">\n                            {article.description}\n                          </Markdown>\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Course\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/pages/projects/introduction-to-cloudflare-workers/index.tsx","r":[0,13801],"t":"import React, {FunctionComponent} from 'react'\nimport {NextSeo} from 'next-seo'\nimport Markdown from 'react-markdown'\nimport Topic from 'components/search/components/topic'\nimport Image from 'next/image'\nimport Link from 'next/link'\n\ntype LandingProps = {\n  course: any\n}\n\nconst landingPage: FunctionComponent<LandingProps> = () => {\n  const course = {\n    id: '418892',\n    title: 'Introduction to Cloudflare Workers',\n    path: '/playlists/introduction-to-cloudflare-workers-5aa3',\n    image:\n      'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/418/892/full/EGH_IntroCloudFlareWorkers_Final.png',\n    resources: [\n      {\n        title: 'Create a Cloudflare Workers Account',\n        slug: 'cloudflare-create-a-cloudflare-workers-account',\n        path: '/lessons/cloudflare-create-a-cloudflare-workers-account',\n      },\n      {\n        title: 'Install and Configure the Cloudflare Workers CLI Wrangler',\n        slug:\n          'cloudflare-install-and-configure-the-cloudflare-workers-cli-wrangler',\n        path:\n          '/lessons/cloudflare-install-and-configure-the-cloudflare-workers-cli-wrangler',\n      },\n      {\n        title:\n          \"Generate New Cloudflare Workers Projects with Wrangler's generate Command\",\n        slug:\n          'cloudflare-generate-new-cloudflare-workers-projects-with-wrangler-s-generate-command',\n        path:\n          '/lessons/cloudflare-generate-new-cloudflare-workers-projects-with-wrangler-s-generate-command',\n      },\n      {\n        title: 'Write Your First Cloudflare Workers Serverless Function',\n        slug:\n          'cloudflare-write-your-first-cloudflare-workers-serverless-function',\n        path:\n          '/lessons/cloudflare-write-your-first-cloudflare-workers-serverless-function',\n      },\n      {\n        title: 'Preview and Publish Your Cloudflare Workers Project',\n        slug: 'cloudflare-preview-and-publish-your-cloudflare-workers-project',\n        path:\n          '/lessons/cloudflare-preview-and-publish-your-cloudflare-workers-project',\n      },\n      {\n        title: 'Render HTML Pages with Cloudflare Workers',\n        slug: 'cloudflare-render-html-pages-with-cloudflare-workers',\n        path: '/lessons/cloudflare-render-html-pages-with-cloudflare-workers',\n      },\n      {\n        title: 'Render Cloudflare Region Data for a Request Using request.cf',\n        slug:\n          'cloudflare-render-cloudflare-region-data-for-a-request-using-request-cf',\n        path:\n          '/lessons/cloudflare-render-cloudflare-region-data-for-a-request-using-request-cf',\n      },\n      {\n        title:\n          'Deploy to a Custom Domain with Cloudflare Wrangler Environments',\n        slug:\n          'cloudflare-deploy-to-a-custom-domain-with-cloudflare-wrangler-environments',\n        path:\n          '/lessons/cloudflare-deploy-to-a-custom-domain-with-cloudflare-wrangler-environments',\n      },\n    ],\n  }\n\n  return (<>\n    <div className=\"mb-10 pb-10 xl:px-0 px-5 max-w-screen-xl mx-auto\">\n      <div className=\"mt-10 mb-16 text-center\">\n        <div className=\"mb-10\">\n          <Image priority src={course.image} height=\"270\" width=\"270\" />\n        </div>\n        <p className=\"text-lg md:text-2xl leading-6 text-gray-500\">\n          Portfolio Project Challenge\n        </p>\n        <h1 className=\"text-2xl md:text-4xl font-bold mt-2\">\n          {course.title}\n        </h1>\n      </div>\n      <ProjectBrief\n        className=\"pb-12\"\n        topic={{\n          name: 'cloudflare',\n          label: 'Project Brief',\n        }}\n      >\n        <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n          {`You are a developer for a national concert promoter.\n\nMusic fans from all over the world visit your site to see when and where the next show is going to be. To save them time when they visit the page, we want to show them upcoming events at a venue close to their location.\n\nYour task is to create and deploy a Cloudflare Worker that will examine the request for location data, and render HTML featuring information for the closest concert taking place based on the nearest [regional Cloudflare Location](https://www.cloudflare.com/network/). Choose locations for testing where you have friends (or a VPN 😅) so you can prove this functionality works as expected.`}\n        </Markdown>\n      </ProjectBrief>\n\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 mt-16 mb-16\">\n        <div className=\"relative px-10 py-10 bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-2 shadow rounded-md border border-gray-100 sm:mr-0 md:mr-4\">\n          <div\n            className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n            style={{\n              background:\n                'linear-gradient(to right, #F5C361 0%, #E75E3C 100%)',\n            }}\n          />\n          <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">Performance</h1>\n          <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n            {`- No styling or third party npm modules are prescribed. Instead, the focus is on the big takeaways that the Cloudflare network has many locations, and a Worker project supports JS.\n\n- In the course, Kristian deploys a worker that makes use of Cloudflare's **IncomingRequestCfProperties** ([see docs](https://developers.cloudflare.com/workers/runtime-apis/request#incomingrequestcfproperties)) to retrieve the user's country. There are additional data available here that could be used in fulfilling this project brief.\n\n- The template rendered in the demo ([see repo](https://github.com/signalnerve/region-workers-example/blob/main/template.js)) imports the country-code-emoji package from npm. While the project brief doesn't call for using a 3rd party library, the learner should be able to see how they could create an object with hardcoded demo data.`}\n          </Markdown>\n        </div>\n        <div className=\"relative px-10 py-10 bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-1 shadow rounded-md border border-gray-100 mt-4 md:mt-0\">\n          <div\n            className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n            style={{\n              background:\n                'linear-gradient(to right, #E75E3C 0%, #F5C361 100%)',\n            }}\n          />\n          <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">Standards</h1>\n          <Markdown className=\"prose dark:prose-dark pt-2 sm:text-base text-sm leading-normal text-gray-800 dark:text-gray-200 mt-0\">\n            {`- The application uses Cloudflare Workers.\n\n- The application is deployed to the web and is useable for its intended purpose.\n\n- The application contains minimal bugs.\n\n- The application is accessible.`}\n          </Markdown>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n\n      <div className=\"relative bg-white dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 shadow rounded-md border border-gray-100 mt-16 mb-16 px-10 py-10\">\n        <div\n          className=\"absolute rounded-t-lg rounded-b-none left-0 top-4 -mt-5 h-3 w-full bg-gradient-to-r\"\n          style={{\n            background: 'linear-gradient(to right, #F5C361 0%, #E75E3C 100%)',\n          }}\n        />\n        <h1 className=\"sm:text-2xl text-xl font-bold mb-2 text-center\">\n          Course Content\n        </h1>\n\n        <div className=\"max-w-screen-sm m-auto pb-4\">\n          <ul className=\"mt-10\">\n            {course?.resources?.map((lesson: any) => {\n              return (\n                (<li key={`${course.path}::${lesson.slug}`}>\n                  <div className=\"flex items-center leading-tight py-2\">\n                    <Link\n                      href={lesson.path}\n                      className=\"py-1 flex space-x-2 items-center dark:text-gray-100 text-gray-700 hover:text-blue-600 group\">\n\n                      {/* prettier-ignore */}\n                      <div className=\"flex-shrink-0\"><svg className=\"text-gray-400 dark:text-gray-400 group-hover:text-blue-600\" width={18} height={18} viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" ><path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM9.555 7.168A1 1 0 0 0 8 8v4a1 1 0 0 0 1.555.832l3-2a1 1 0 0 0 0-1.664l-3-2z\" fill=\"currentColor\"/></g></svg></div>\n                      <Markdown className=\"prose dark:prose-dark md:dark:prose-lg-dark md:prose-lg text-gray-700 dark:text-gray-100 mt-0 text-base md:text-lg\">\n                        {lesson.title}\n                      </Markdown>\n\n                    </Link>\n                  </div>\n                </li>)\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n      <div className=\"flex justify-center\">\n        <svg\n          width=\"7\"\n          height=\"155\"\n          viewBox=\"0 0 7 155\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.5\"\n            y1=\"-1.5299e-07\"\n            x2=\"3.50001\"\n            y2=\"155\"\n            stroke=\"#B0B0B0\"\n            strokeWidth=\"7\"\n            strokeDasharray=\"10 10\"\n          />\n        </svg>\n      </div>\n      <div>\n        <div className=\"mt-10 text-center pb-12\">\n          <h1 className=\"text-2xl md:text-4xl font-bold pb-4\">\n            Did you complete the Portfolio Project Challenge?\n          </h1>\n          <p className=\"text-lg md:text-2xl leading-6 text-gray-500\">\n            Let us know what you built!\n          </p>\n\n          <a\n            className=\"inline-flex justify-center items-center px-6 py-4 font-semibold rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 ease-in-out duration-200 mt-12\"\n            title=\"Share on twitter\"\n            href=\"https://twitter.com/intent/tweet?text=I%20created%20my%20portfolio%20project%20for%20the%20Introduction%20to%20Cloudflare%20Workers%20course%20on%20@eggheadio!\"\n            rel=\"noopener\"\n          >\n            Tweet @eggheadio\n          </a>\n        </div>\n      </div>\n    </div>\n  </>);\n}\n\nexport enum CARD_TYPES {\n  SUMMARY = 'summary',\n  SUMMARY_LARGE_IMAGE = 'summary_large_image',\n}\n\nexport type Topic = {\n  name: string\n  label: string\n  title?: string\n}\n\ntype ProjectBriefProps = {\n  topic: Topic\n  className: any\n  pageData?: any\n  CTAComponent?: React.FC\n  ogImage?: string\n  verticalImage?: string\n  cardType?: CARD_TYPES\n}\n\nconst ProjectBrief: React.FC<ProjectBriefProps> = ({\n  topic,\n  children,\n  ogImage,\n  className,\n  cardType = CARD_TYPES.SUMMARY_LARGE_IMAGE,\n}) => {\n  const description = `Build a localization engine that renders data based on the Edge location nearest to the application's user using Cloudflare Workers.`\n\n  const title =\n    topic.title ||\n    `Introduction to Cloudflare Workers - Portfolio Project Challenge`\n\n  return (\n    <div className={`xl:px-0 dark:bg-gray-900 ${className ? className : ''}`}>\n      <NextSeo\n        description={description}\n        title={title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          site: `@eggheadio`,\n          cardType,\n        }}\n        openGraph={{\n          title,\n          description: description,\n          site_name: 'egghead',\n          images: [\n            {\n              url:\n                ogImage ||\n                `https://og-image-react-egghead.now.sh/topic/${topic.name}?orientation=landscape&v=20201104`,\n            },\n          ],\n        }}\n      />\n      <div className=\"md:grid grid-cols-1 gap-5 justify-self-center space-y-5 md:space-y-0 dark:bg-gray-900\">\n        <div\n          className={`bg-white grid grid-cols-8 h-full relative items-center overflow-hidden shadow rounded-md border border-gray-100 dark:border-gray-800 dark:bg-gray-800 dark:text-gray-200 col-span-8`}\n        >\n          <div\n            className=\"overflow-hidden sm:col-span-3 col-span-3 w-full h-full\"\n            style={{\n              background: `url(https://og-image-react-egghead.now.sh/topic/${topic.name}?orientation=portrait&v=20201104)`,\n              backgroundSize: 'cover',\n              backgroundPosition: '38%',\n            }}\n          />\n          <div className=\"sm:col-span-5 col-span-5 flex flex-col justify-start h-full px-12 py-12 pt-10\">\n            <h1 className=\"sm:text-2xl text-xl font-bold mb-2\">\n              {topic.label}\n            </h1>\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default landingPage\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/confirm/membership/index.tsx","r":[0,9445],"t":"import * as React from 'react'\nimport useLastResource from 'hooks/use-last-resource'\nimport {find, isEmpty} from 'lodash'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport homepageData from 'components/pages/home/homepage-data'\nimport Spinner from 'components/spinner'\nimport {IconTwitter} from 'components/share'\n\ntype HeaderProps = {\n  heading: React.ReactElement\n  primaryMessage: React.ReactElement\n}\n\ntype ConfirmMembershipProps = {\n  session: any\n  alreadyAuthenticated: boolean\n  currentState: {value: any; context: any; matches: Function}\n}\n\nconst Illustration = () => (\n  <div>\n    <Image\n      src={\n        'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1606467216/next.egghead.io/eggodex/playful-eggo_2x.png'\n      }\n      width={646 / 3}\n      height={622 / 3}\n      quality={100}\n      alt=\"welcome to egghead\"\n    />\n  </div>\n)\n\nconst Heading: React.FC = ({children}) => {\n  return (\n    <h1 className=\"sm:leading-tighter leading-tight sm:text-2xl text-xl font-bold text-center\">\n      {children}\n    </h1>\n  )\n}\n\nconst PrimaryMessage: React.FC = ({children}) => {\n  return <div className=\"dark:text-gray-200 text-gray-800\">{children}</div>\n}\n\nconst tweet = `https://twitter.com/intent/tweet/?text=Just joined @eggheadio to level up my development skills.`\n\nconst Header: React.FC<HeaderProps> = ({heading, primaryMessage}) => {\n  return (\n    <header className=\"w-full h-full flex flex-col items-start justify-center\">\n      <div className=\"flex flex-col justify-center items-center space-y-6\">\n        <Illustration />\n        <Heading>{heading}</Heading>\n        <PrimaryMessage>{primaryMessage}</PrimaryMessage>\n      </div>\n    </header>\n  )\n}\n\nconst Support: React.FC = () => {\n  return (\n    <div className=\"border-t dark:border-gray-800 border-gray-100 pt-16 sm:grid grid-cols-2 gap-5\">\n      <div className=\"\">\n        <h4 className=\"text-lg font-bold pb-3\">Support</h4>\n        <p className=\"prose dark:prose-dark max-w-none\">\n          If you have any issues, please email support{' '}\n          <strong>\n            <a href=\"mailto:support@egghead.io\">support@egghead.io</a>\n          </strong>{' '}\n          and we will help you as soon as possible.\n        </p>\n      </div>\n      <div className=\"\">\n        <h4 className=\"text-lg font-bold pb-3\">Share</h4>\n        <a\n          href={tweet}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          className=\"mt-1 text-white rounded-md text-sm inline-flex items-center px-3 py-2 bg-blue-500 hover:bg-blue-600\"\n        >\n          <IconTwitter className=\"w-5\" />{' '}\n          <span className=\"pl-2\">Share with your friends!</span>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nconst PopularTopics: React.FC = () => {\n  const topics: any = find(homepageData, {id: 'topics'})\n\n  return (\n    (<div>\n      <h4 className=\"text-lg font-semibold pb-4 text-center\">\n        Start with one of these popular topics\n      </h4>\n      <ul className=\"grid sm:grid-cols-4 grid-cols-2 gap-3\">\n        {topics.resources.map((topic: any) => (\n          <li key={topic.path}>\n            <Link\n              href={topic.path}\n              className=\"px-6 pt-6 pb-5 rounded-lg dark:bg-gray-800 bg-white dark:hover:bg-gray-700 hover:shadow-lg border dark:border-transparent border-gray-200 border-opacity-50 flex flex-col items-center justify-center\">\n\n              <Image\n                src={topic.image}\n                alt={topic.title}\n                width={40}\n                height={40}\n              />\n              <div className=\"pt-3\">{topic.title}</div>\n\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>)\n  );\n}\n\nconst IconMail: React.FC<{className: string}> = ({className}) => {\n  return (\n    <div className={className}>\n      <svg\n        className=\"animate-bounce transition-transform transform\"\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g fill=\"none\">\n          <path\n            d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0 0 16 4H4a2 2 0 0 0-1.997 1.884z\"\n            fill=\"currentColor\"\n          />\n          <path\n            d=\"M18 8.118l-8 4-8-4V14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8.118z\"\n            fill=\"currentColor\"\n          />\n        </g>\n      </svg>\n    </div>\n  )\n}\n\nconst LastResource = () => {\n  const {lastResource} = useLastResource()\n\n  return !isEmpty(lastResource) ? (\n    <div>\n      <h4 className=\"text-lg font-bold pb-2\">Continue where you left off</h4>\n      <Link\n        href={lastResource.path}\n        className=\"inline-flex items-center space-x-3 font-semibold sm:p-8 p-5 rounded-lg dark:bg-gray-800 bg-white dark:hover:bg-gray-700 border dark:border-transparent border-gray-200 border-opacity-50 hover:shadow-lg\">\n\n        <Image src={lastResource.image_url} width={32} height={32} alt=\"\" />\n        <span>{lastResource.title}</span>\n\n      </Link>\n    </div>\n  ) : null;\n}\n\nconst Callout: React.FC = ({children}) => {\n  return (\n    <div className=\"sm:p-6 p-5 border border-gray-200 rounded-lg mb-5 inline-flex items-center space-x-3 w-full\">\n      {children}\n    </div>\n  )\n}\n\nconst StartLearning: React.FC = () => {\n  return (\n    (<Link\n      href=\"/q\"\n      className=\"text-white bg-blue-500 border-0 py-3 px-5 rounded-md hover:bg-blue-600\">\n      Browse Catalog\n    </Link>)\n  );\n}\n\nexport const ConfirmMembership: React.FC<ConfirmMembershipProps> = ({\n  session,\n  alreadyAuthenticated,\n  currentState,\n}) => {\n  return (\n    <div className=\"max-w-screen-lg mx-auto dark:text-white text-gray-900 w-full space-y-16\">\n      {alreadyAuthenticated ? (\n        <>\n          <Header\n            heading={<>Thank you so much for joining egghead!</>}\n            primaryMessage={\n              <>\n                <p className=\"text-lg text-center\">\n                  We've charged your credit card{' '}\n                  <strong>${session.amount} for your egghead membership</strong>{' '}\n                  and sent a receipt to <strong>{session.email}</strong>.\n                </p>\n                <p className=\"text-lg pt-5 text-center\">\n                  You can now learn from all premium resources on egghead,\n                  including courses, talks, podcasts, articles, and more. Enjoy!\n                </p>\n              </>\n            }\n          />\n          <div className=\"space-y-10\">\n            <PopularTopics />\n            <LastResource />\n            <div className=\"flex justify-center\">\n              <StartLearning />\n            </div>\n          </div>\n          <Support />\n        </>\n      ) : (\n        <>\n          <Header\n            heading={<>Thank you so much for joining egghead! </>}\n            primaryMessage={\n              <>\n                {currentState.matches('pending') && (\n                  <Callout>\n                    <Spinner color=\"gray-700\" />\n                    <p className=\"text-lg\">Setting up your account...</p>\n                  </Callout>\n                )}\n                {currentState.matches('pollingExpired') && (\n                  <>\n                    <Callout>\n                      <IconMail className=\"p-3 rounded-full dark:bg-rose-500 dark:text-white bg-rose-100 text-rose-500\" />\n                      <p className=\"text-lg\">\n                        Please check your inbox ({session.email}) to{' '}\n                        <strong>confirm your email address</strong> and{' '}\n                        <strong>access your membership</strong>.\n                      </p>\n                    </Callout>\n                    <p className=\"text-lg\">\n                      We've charged your credit card{' '}\n                      <strong>\n                        ${session.amount} for an egghead membership\n                      </strong>{' '}\n                      and sent an email along with a receipt to{' '}\n                      <strong>{session.email}</strong> so you can log in and\n                      access your membership.\n                    </p>\n                  </>\n                )}\n                {currentState.matches('authTokenRetrieved') && (\n                  <>\n                    <Callout>\n                      <p className=\"text-lg w-full text-center\">\n                        <span role=\"img\" aria-label=\"party popper\">\n                          🎉\n                        </span>{' '}\n                        Your egghead membership is ready to go!\n                      </p>\n                    </Callout>\n                    <p className=\"text-lg pb-8 border-b border-gray-100 text-center max-w-lg mx-auto\">\n                      We've charged your credit card{' '}\n                      <strong>\n                        ${session.amount} for an egghead membership\n                      </strong>{' '}\n                      and sent a receipt to <strong>{session.email}</strong>.\n                      Please check your inbox to{' '}\n                      <strong>confirm your email address</strong>.\n                    </p>\n                    <div className=\"pt-8\">\n                      <PopularTopics />\n                    </div>\n                    <div className=\"flex justify-center pt-6\">\n                      <StartLearning />\n                    </div>\n                  </>\n                )}\n              </>\n            }\n          />\n          <Support />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default ConfirmMembership\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/home/jumbotron/index.tsx","r":[0,4145],"t":"import React, {FunctionComponent} from 'react'\nimport {CardResource} from 'types'\nimport Markdown from 'react-markdown'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\n\ntype JumbotronProps = {\n  resource: CardResource\n  textColor?: String\n}\n\nconst Jumbotron: FunctionComponent<JumbotronProps> = ({\n  resource,\n  textColor,\n}) => {\n  const {path, image, title, byline, instructor, background, description} =\n    resource\n\n  return (\n    (<div\n      className=\"relative flex items-center justify-center bg-white text-white overflow-hidden rounded-lg shadow-sm bg-gradient-to-t dark:bg-gradient-to-t dark:from-gray-800 dark:to-gray-600\"\n      css={{\n        [bpMinMD]: {\n          minHeight: 477,\n        },\n      }}\n    >\n      {/* <div className=\"absolute top-0 left-0 bg-gradient-to-r from-purple-500 to-indigo-600 w-full h-2 z-20\" /> */}\n      <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n        <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl lg:px-8 w-full sm:mb-4 md:my-12 lg:m-0 mt-0 mb-15\">\n          <div className=\"flex lg:flex-row flex-col items-center justify-center sm:space-x-10 sm:space-y-0 space-y-5 0 w-full xl:pr-16\">\n            <div className=\"flex-shrink-0\">\n              <Link\n                href={path}\n                tabIndex={-1}\n                onClick={() =>\n                  track('clicked jumbotron resource', {\n                    resource: path,\n                    linkType: 'image',\n                  })\n                }>\n\n                <Image\n                  quality={100}\n                  src={get(image, 'src', image)}\n                  width={340}\n                  height={340}\n                  priority={true}\n                  alt={get(image, 'alt', `illustration for ${title}`)}\n                />\n\n              </Link>\n            </div>\n            <div className=\"flex flex-col sm:items-start items-center w-full\">\n              <h2 className={`text-xs text-white uppercase font-semibold mb-2`}>\n                {byline}\n              </h2>\n              <Link\n                href={path}\n                className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter text-white hover:text-blue-300\"\n                onClick={() =>\n                  track('clicked jumbotron resource', {\n                    resource: path,\n                    linkType: 'text',\n                  })\n                }>\n\n                <h1>{title}</h1>\n\n              </Link>\n\n              <span className=\"mt-4 flex items-center space-x-2 text-base group\">\n                <Image\n                  src={instructor.image}\n                  width={40}\n                  height={40}\n                  className=\"rounded-full\"\n                  alt={instructor.name}\n                  priority={true}\n                />\n                <span className=\"text-gray-200\">{instructor.name}</span>\n              </span>\n\n              {description && (\n                <Markdown\n                  source={description}\n                  allowDangerousHtml={true}\n                  className=\"mt-4 text-gray-200 text-base max-w-screen-sm opacity-80\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <UniqueBackground\n        className=\"absolute left-0 top-0 w-full h-full z-0 object-cover\"\n        background={background}\n      />\n    </div>)\n  );\n}\n\nconst UniqueBackground = ({className, background}: any) => {\n  return background ? (\n    <Image\n      priority={true}\n      quality={100}\n      className={className}\n      alt=\"\"\n      layout=\"fill\"\n      src={\n        background ||\n        'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612373331/next.egghead.io/resources/introduction-to-cloudflare-workers-5aa3/introduction-to-cloudflare-workers-cover_2.png'\n      }\n    />\n  ) : null\n}\n\nexport default Jumbotron\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/home/video-card/index.tsx","r":[0,3842],"t":"import * as React from 'react'\nimport {track} from 'utils/analytics'\nimport PlayIcon from '../../courses/play-icon'\nimport Link from 'next/link'\nimport {Card} from 'components/card'\nimport Markdown from 'react-markdown'\nimport Image from 'next/image'\nimport {useEggheadPlayerPrefs} from 'components/EggheadPlayer/use-egghead-player'\nimport {useRouter} from 'next/router'\n\nconst VideoCard: React.FC<{\n  resource: any\n  className?: string\n  location?: any\n}> = ({resource, className, location}) => {\n  const router = useRouter()\n  const {setPlayerPrefs} = useEggheadPlayerPrefs()\n  const {\n    name,\n    path,\n    title,\n    description,\n    instructor_path,\n    instructor,\n    byline,\n    image,\n  } = resource\n\n  const currentLocation = location ? location : router.pathname\n\n  return (\n    (<Card className={className}>\n      <div className=\"sm:grid grid-cols-2 flex flex-col-reverse\">\n        <div className=\"flex flex-col justify-center sm:pr-10 sm:pt-0 pt-5\">\n          <div>\n            <h2 className=\"uppercase font-semibold text-xs text-gray-700 dark:text-gray-200\">\n              {name}\n            </h2>\n            <Link\n              href={path}\n              onClick={() =>\n                track('clicked resource', {\n                  resource: path,\n                  linkType: 'text',\n                  location: currentLocation,\n                })\n              }\n              className=\"hover:text-blue-600 dark:hover:text-blue-300\">\n\n              <h3 className=\"text-2xl font-bold tracking-tight leading-tighter mt-2\">\n                {title}\n              </h3>\n\n            </Link>\n            <div className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-gray-900 transition-colors duration-150 ease-in-out mt-1\">\n              {byline}\n              {instructor && instructor_path && (\n                <Link\n                  href={instructor_path || ''}\n                  onClick={() =>\n                    track('clicked instructor', {\n                      instructor: instructor,\n                      linkType: 'text',\n                      location: currentLocation,\n                    })\n                  }\n                  className=\"hover:text-blue-600 dark:hover:text-blue-300\">\n\n                  {instructor}\n\n                </Link>\n              )}\n            </div>\n            <Markdown className=\"prose dark:prose-dark dark:prose-sm-dark prose-sm mt-4\">\n              {description}\n            </Markdown>\n          </div>\n        </div>\n        <div className=\"flex-shrink-0 flex items-center self-center\">\n          <Link\n            href={path}\n            onClick={() => {\n              setPlayerPrefs({autoplay: true})\n              track('clicked resource', {\n                resource: path,\n                linkType: 'video',\n                location: currentLocation,\n              })\n            }}\n            className=\"group sm:w-full flex items-center justify-center relative overflow-hidden rounded-md border dark:border-gray-700 border-gray-200\">\n\n            <Image\n              src={image}\n              alt={title}\n              width={1280 / 2.6}\n              height={720 / 2.6}\n            />\n            <div className=\"group-hover:scale-105 shadow-xl backdrop-filter backdrop-blur-sm border-2 border-white absolute bg-gray-800 bg-opacity-70 z-10 rounded-full w-16 h-16 flex items-center justify-center leading-none transition-all ease-in-out duration-200\">\n              <PlayIcon className=\"w-4 h-4 text-white\" />\n              <span className=\"sr-only\">Play</span>\n            </div>\n\n          </Link>\n        </div>\n      </div>\n    </Card>)\n  );\n}\n\nexport default VideoCard\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/add-note-overlay.tsx","r":[0,4156],"t":"import React from \"react\";\nimport React, * as React from 'react';\n// import {Switch} from '@headlessui/react'\nimport VisuallyHidden from '@reach/visually-hidden'\nimport axios from 'axios'\nimport readingTime from 'reading-time'\nimport {track} from 'utils/analytics'\n\nconst AddNoteOverlay: React.FC<{\n  onClose: (newNote: any) => void\n  resourceId: string\n  currentTime: number\n}> = ({onClose, resourceId, currentTime}) => {\n  // const [enabled, setEnabled] = React.useState(false)\n  const inputRef = React.useRef<HTMLTextAreaElement>(null)\n  React.useEffect(() => {\n    if (inputRef) {\n      inputRef.current?.focus({preventScroll: true})\n    }\n  }, [])\n\n  const addNote = () => {\n    if (inputRef.current) {\n      const text = inputRef.current.value || ''\n      axios\n        .post(`/api/lessons/notes/${resourceId}`, {\n          text,\n          startTime: currentTime,\n          endTime: currentTime + readingTime(text).time / 1000,\n        })\n        .then(({data}) => {\n          track('add note', {\n            contact: data.user_id,\n            resource: data.resource_id,\n            type: data.type,\n            startTime: data.start_time,\n            endTime: data.end_time,\n            text: data.text,\n          })\n          onClose(data)\n        })\n    }\n  }\n\n  return (\n    <div\n      className=\"w-[34rem] h-[20rem] rounded-md bg-white p-4 flex flex-col\"\n      id=\"add-note-overlay\"\n    >\n      <div className=\"flex-shrink-0 flex justify-end\">\n        <button\n          type=\"button\"\n          onClick={() => onClose(false)}\n          className=\"text-gray-400 hover:text-gray-500\"\n          tabIndex={0}\n        >\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden=\"true\">\n            <IconX />\n          </span>\n        </button>\n      </div>\n      <div className=\"flex-grow my-3\">\n        <textarea\n          ref={inputRef}\n          tabIndex={0}\n          className=\"w-full h-full rounded-lg resize-none border-gray-300 p-3 placeholder-gray-400 text-black transition duration-150 ease-in-out focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-50\"\n          placeholder={`Write a note...\\n\\nYou can use markdown to [add links](https://stackoverflow.com), **bold text** or \\`write syntax\\``}\n        />\n      </div>\n      <div className=\"flex-shrink-0 flex justify-between items-end\">\n        {/*<Switch.Group>*/}\n        {/*  <div className=\"flex items-center\">*/}\n        {/*    <Switch*/}\n        {/*      tabIndex={0}*/}\n        {/*      checked={enabled}*/}\n        {/*      onChange={setEnabled}*/}\n        {/*      className={`${*/}\n        {/*        enabled ? 'bg-blue-600' : 'bg-gray-200'*/}\n        {/*      } relative inline-flex items-center h-6 rounded-full w-11 transition duration-150 ease-in-out focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-50`}*/}\n        {/*    >*/}\n        {/*      <span*/}\n        {/*        className={`${*/}\n        {/*          enabled ? 'translate-x-[1.375rem]' : 'translate-x-0.5'*/}\n        {/*        } inline-block w-5 h-5 bg-white rounded-full transition-transform`}*/}\n        {/*      />*/}\n        {/*    </Switch>*/}\n        {/*    <Switch.Label className=\"ml-4 text-gray-500 text-sm\">*/}\n        {/*      Publicly visible*/}\n        {/*    </Switch.Label>*/}\n        {/*  </div>*/}\n        {/*</Switch.Group>*/}\n        <button\n          type=\"button\"\n          tabIndex={0}\n          onClick={addNote}\n          className=\"inline-flex justify-center items-center px-4 py-2 rounded-md bg-blue-600 text-white transition-all hover:bg-blue-700 duration-150 ease-in-out focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-50\"\n        >\n          Add to notes\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default AddNoteOverlay\n\nconst IconX: React.FC<any> = ({className}) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`w-5 h-5 ${className ?? ''}`}\n  >\n    <path\n      d=\"M6 18L18 6M6 6l12 12\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n)\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/go-pro-cta-overlay.tsx","r":[0,1039],"t":"import React, {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport {LessonResource} from 'types'\nimport {track} from 'utils/analytics'\n\ntype JoinCTAProps = {\n  lesson: LessonResource\n}\n\nconst GoProCtaOverlay: FunctionComponent<JoinCTAProps> = ({lesson}) => {\n  return (\n    (<div className=\"flex flex-col items-center p-4\">\n      <h2 className=\"sm:text-2xl text-xl leading-tighter tracking-tight font-light text-center\">\n        This lesson is an{' '}\n        <strong className=\"font-bold\">egghead member exclusive</strong>.\n      </h2>\n      <Link\n        href=\"/pricing\"\n        onClick={() => {\n          track('clicked join cta on blocked lesson', {\n            lesson: lesson.slug,\n          })\n        }}\n        className=\"mt-8 text-white py-3 px-5 rounded-md text-base font-semibold bg-blue-600 hover:bg-indigo-600 hover:shadow-xl transition-all ease-in-out duration-300 hover:scale-105\">\n        \n          Become a Member\n        \n      </Link>\n    </div>)\n  );\n}\n\nexport default GoProCtaOverlay\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/watch-full-course-cta-overlay.tsx","r":[0,2934],"t":"import Link from 'next/link'\nimport Image from 'next/image'\nimport * as React from 'react'\nimport {track} from 'utils/analytics'\nimport noop from 'utils/noop'\nimport {useTrackComponent} from 'hooks/use-track-component'\n\nconst WatchFullCourseCtaOverlay: React.FunctionComponent<{\n  lesson: any\n  onClickRewatch?: () => void\n}> = ({lesson, onClickRewatch = noop}) => {\n  const courseImage = lesson?.collection?.square_cover_480_url\n\n  useTrackComponent('show course pitch', {course: lesson?.collection?.slug})\n\n  return (\n    (<div className=\"flex flex-col items-center p-4\">\n      {courseImage && (\n        <div className=\"w-16 h-16 md:w-32 md:h-32 lg:w-40 lg:h-40 xl:w-48 xl:h-48 relative flex-shrink-0\">\n          <Image\n            src={courseImage}\n            alt={`illustration of ${lesson.collection.title} course`}\n            layout=\"fill\"\n          />\n        </div>\n      )}\n      <div className=\"mt-4 md:mt-4\">This Lesson is Part of a Course</div>\n      <h3 className=\"text-md md:text-lg font-semibold mt-4 text-center\">\n        {lesson.collection.title}\n      </h3>\n      <div className=\"flex mt-6 md:mt-8\">\n        <button\n          className=\"border border-blue-600 rounded px-3 py-2 flex items-center hover:bg-gray-900 transition-colors duration-200 ease-in-out\"\n          onClick={() => {\n            track('clicked rewatch video', {\n              lesson: lesson.slug,\n            })\n            onClickRewatch()\n          }}\n        >\n          <IconRefresh className=\"w-6 mr-2\" /> Watch again\n        </button>\n        <Link\n          href={lesson?.collection?.path || '#'}\n          onClick={() => {\n            track('clicked view course', {\n              lesson: lesson.slug,\n            })\n          }}\n          className=\"bg-blue-600 rounded px-3 py-2 flex items-center ml-4 hover:bg-blue-500 transition-colors duration-200 ease-in-out\">\n\n          <IconPlay className=\"w-6 mr-2\" />Explore the Whole Course\n        </Link>\n      </div>\n    </div>)\n  );\n}\n\nexport default WatchFullCourseCtaOverlay\n\nconst IconPlay: React.FunctionComponent<{className: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n    className={className}\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n)\n\nconst IconRefresh: React.FunctionComponent<{className: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className={className}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n    />\n  </svg>\n)\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/watch-next-lesson-cta-overlay.tsx","r":[0,2936],"t":"import Link from 'next/link'\nimport Image from 'next/image'\nimport * as React from 'react'\nimport {track} from 'utils/analytics'\nimport noop from 'utils/noop'\nimport {useTrackComponent} from 'hooks/use-track-component'\n\nconst WatchNextLessonCtaOverlay: React.FunctionComponent<{\n  lesson: any\n  nextLesson: any\n  onClickRewatch?: () => void\n}> = ({lesson, nextLesson, onClickRewatch = noop}) => {\n  const courseImage = lesson?.collection?.square_cover_480_url\n\n  useTrackComponent('show next up', {\n    course: lesson?.collection?.slug,\n    lesson: lesson.slug,\n  })\n\n  return (\n    (<div className=\"flex flex-col items-center p-4\">\n      {courseImage && (\n        <div className=\"w-16 h-16 md:w-32 md:h-32 lg:w-40 lg:h-40 xl:w-48 xl:h-48 relative flex-shrink-0\">\n          <Image\n            src={courseImage}\n            alt={`illustration of ${lesson.collection.title} course`}\n            layout=\"fill\"\n          />\n        </div>\n      )}\n      <div className=\"mt-4 md:mt-4\">Up Next</div>\n      <h3 className=\"text-md md:text-lg font-semibold mt-4 text-center\">\n        {nextLesson.title}\n      </h3>\n      <div className=\"flex mt-6 md:mt-8\">\n        <button\n          className=\"border border-blue-600 rounded px-3 py-2 flex items-center hover:bg-gray-900 transition-colors duration-200 ease-in-out\"\n          onClick={() => {\n            track('clicked rewatch video', {\n              lesson: lesson.slug,\n            })\n            onClickRewatch()\n          }}\n        >\n          <IconRefresh className=\"w-6 mr-2\" /> Watch again\n        </button>\n        <Link\n          href={nextLesson.path || '#'}\n          onClick={() => {\n            track('clicked play next', {\n              lesson: lesson.slug,\n            })\n          }}\n          className=\"bg-blue-600 rounded px-3 py-2 flex items-center ml-4 hover:bg-blue-500 transition-colors duration-200 ease-in-out\">\n\n          <IconPlay className=\"w-6 mr-2\" />Play next\n        </Link>\n      </div>\n    </div>)\n  );\n}\n\nexport default WatchNextLessonCtaOverlay\n\nconst IconPlay: React.FunctionComponent<{className: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n    className={className}\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n)\n\nconst IconRefresh: React.FunctionComponent<{className: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className={className}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n    />\n  </svg>\n)\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/components/hit/index.tsx","r":[0,3128],"t":"import React, {FunctionComponent} from 'react'\nimport Link from 'next/link'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport capitalize from 'lodash/capitalize'\nimport {track} from 'utils/analytics'\nimport config from 'lib/config'\nimport {CREATOR_DELINIATOR} from 'lib/search-url-builder'\nimport Image from 'next/image'\n\ntype HitComponentProps = {\n  hit: any\n}\n\nconst HitComponent: FunctionComponent<HitComponentProps> = ({hit}) => {\n  const {\n    path,\n    image,\n    title,\n    slug,\n    duration,\n    type,\n    instructor_url,\n    instructor_name,\n    instructor,\n  } = hit\n\n  const hasImage = image !== 'https://d2eip9sf3oo6c2.cloudfront.net/logo.svg'\n\n  return (\n    (<div className=\"flex items-center py-3 space-x-2 w-100\">\n      {hasImage && (\n        <div className=\"items-center flex justify-center\">\n          <Link\n            href={path}\n            onClick={() => {\n              track(`clicked search result image`, {\n                [type]: slug,\n              })\n            }}\n            className={`flex-shrink-0 relative ${\n              type === 'lesson'\n                ? 'w-8 h-8 opacity-70'\n                : 'w-16 h-16 md:w-20 md:h-20'\n            }`}>\n\n            <Image\n              src={image}\n              className={type === 'lesson' ? 'opacity-90' : ''}\n              layout=\"fill\"\n            />\n\n          </Link>\n        </div>\n      )}\n      <div\n        className={`${\n          hasImage ? 'pl-4' : ''\n        } flex sm:flex-row flex-col sm:items-center items-start w-full `}\n      >\n        <div className=\"flex flex-col justify-start items-start  w-full\">\n          <Link\n            href={path}\n            onClick={() =>\n              track(`clicked search result title`, {\n                [type]: slug,\n              })\n            }\n            className=\"self-start\">\n\n            <h2 className=\"sm:text-lg text-base dark:text-gray-200 font-semibold leading-tight hover:underline\">\n              {title}\n            </h2>\n\n          </Link>\n          <div className=\"sm:text-sm text-sm font-light text-gray-600 dark:text-gray-400\">\n            {instructor_name && !instructor_url && <>{instructor_name}・</>}\n            {instructor_name && instructor?.slug && (\n              <>\n                <a\n                  href={`${config.searchUrlRoot}/${CREATOR_DELINIATOR}-${instructor.slug}`}\n                  onClick={() =>\n                    track(`clicked search result creator`, {\n                      instructor: instructor_name,\n                    })\n                  }\n                  className=\"hover:underline\"\n                >\n                  {instructor_name}\n                </a>\n                ・\n              </>\n            )}\n\n            {duration && convertTimeWithTitles(duration) !== '' && (\n              <>{convertTimeWithTitles(duration)}・</>\n            )}\n            {type.toLowerCase() === 'playlist' ? 'Course' : capitalize(type)}\n          </div>\n        </div>\n      </div>\n    </div>)\n  );\n}\n\nexport default HitComponent\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/curated/aws/index.tsx","r":[0,6583],"t":"import React from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {NextSeo} from 'next-seo'\nimport Topic from '../../components/topic'\nimport awsPageData from './aws-page-data'\nimport {find, get} from 'lodash'\nimport ExternalTrackedLink from '../../../external-tracked-link'\nimport {track} from 'utils/analytics'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {useTheme} from 'next-themes'\nimport {ThreeLevels} from '../curated-essential'\nimport VideoCard from '../../../pages/home/video-card'\nimport {VerticalResourceCollectionCard} from '../../../card/vertical-resource-collection-card'\n\nconst SearchAWS = () => {\n  const location = 'AWS landing'\n  const description = `Life is too short for lonnnnnng boring videos. Learn AWS using the best screencast tutorial videos online.`\n  const title = `In-Depth Up-to-Date AWS Tutorials for ${new Date().getFullYear()}`\n\n  const beginner: any = find(awsPageData, {id: 'beginner'})\n  const intermediate: any = find(awsPageData, {\n    id: 'aws-amplify',\n  })\n  const advanced: any = find(awsPageData, {\n    id: 'lambda',\n  })\n  const awsVideo: any = find(awsPageData, {\n    id: 'aws-video',\n  })\n  const awsSam: any = find(awsPageData, {\n    id: 'aws-sam',\n  })\n\n  return (\n    <div className=\"mb-6 pb-6 md:mb-10 md:pb-10\">\n      <NextSeo\n        description={description}\n        title={title}\n        titleTemplate={'%s | egghead.io'}\n        twitter={{\n          site: `@eggheadio`,\n          cardType: 'summary_large_image',\n        }}\n        openGraph={{\n          title,\n          description: description,\n          site_name: 'egghead',\n          images: [\n            {\n              url: `https://res.cloudinary.com/dg3gyk0gu/image/upload/v1611981777/egghead-next-pages/graphql/graphql-share-image_2x.png`,\n            },\n          ],\n        }}\n      />\n      <div className=\"md:grid md:grid-cols-12 grid-cols-1 gap-5 items-start space-y-5 md:space-y-0 dark:bg-gray-900\">\n        <Topic\n          className=\"col-span-8\"\n          title=\"AWS\"\n          imageUrl=\"https://og-image-react-egghead.now.sh/topic/aws?orientation=portrait&v=20201104\"\n        >\n          {`\nAmazon Web Services (AWS) is a powerful expansive cloud infrastructure platform for building modern web applications.\n\nAWS provides services for data, presentation, authentication, security, video encoding, and much more. Offering over 175 fully-featured services from data centers globally, AWS powers a large percentage of the internet.\n\n`}\n        </Topic>\n        <AWSCourse location=\"AWS Page\" />\n      </div>\n\n      <ThreeLevels\n        beginner={beginner}\n        intermediate={intermediate}\n        advanced={advanced}\n        location={location}\n      />\n\n      <div className=\"grid md:grid-cols-3 grid-cols-1 mt-8\">\n        <VideoCard\n          resource={awsVideo}\n          className=\"flex md:flex-row flex-col col-span-2 md:mr-4 mr-0\"\n          location={location}\n        />\n        <VerticalResourceCollectionCard\n          resource={awsSam}\n          location={location}\n          className=\"md:mt-0 mt-4\"\n        />\n      </div>\n    </div>\n  )\n}\n\nconst AWSCourse: React.FC<{location: string}> = ({location}) => {\n  const {path, title, byline, name, description, image, background, slug} = {\n    title: 'Deploy Ghost to AWS using RDS and EC2',\n    byline: 'Sam Julien',\n    name: 'FEATURED COURSE',\n    description: `This course ties together skills like networking, SSH, and using the command line while getting a realistic full-stack platform up and running.`,\n    image:\n      'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/437/276/full/EGH_ghost-aws_1000.png',\n    background:\n      'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1634231703/egghead-next-pages/deploy-ghost-to-aws-using-rds-and-ec2/featured-card-background.png',\n    path: '/courses/deploy-ghost-to-aws-using-rds-and-ec2-a3487caa',\n    slug: 'deploy-ghost-to-aws-using-rds-and-ec2-a3487caa',\n  }\n  return (\n    (<div\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center\"\n      css={{\n        [bpMinMD]: {\n          minHeight: 477,\n        },\n      }}\n    >\n      <ExternalTrackedLink\n        eventName=\"clicked AWS page CTA\"\n        params={{location}}\n        className=\"md:-mt-5 flex items-center justify-center bg-white dark:bg-gray-900 text-white overflow-hidden rounded-b-lg md:rounded-t-none rounded-t-lg shadow-sm\"\n        href=\"/courses/deploy-ghost-to-aws-using-rds-and-ec2-a3487caa\"\n      >\n        <div className=\"relative z-10 px-5 py-10 text-center sm:py-16 sm:text-left\">\n          <div className=\"flex items-center justify-center max-w-screen-xl mx-auto space-y-5\">\n            <div className=\"flex flex-col items-center justify-center space-y-5 sm:space-x-5 sm:space-y-0\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col items-center sm:items-start\">\n                <h2 className=\"mb-2 text-xs font-semibold text-white uppercase\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Image\n          className=\"absolute top-0 left-0 z-0 w-full h-full\"\n          src={background}\n          alt=\"\"\n          layout=\"fill\"\n        />\n      </ExternalTrackedLink>\n    </div>)\n  );\n}\n\nexport default SearchAWS\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/curated/css/index.tsx","r":[0,5070],"t":"import * as React from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport SearchCuratedEssential from '../curated-essential'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport {get, find} from 'lodash'\nimport data from './css-page-data'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport {VerticalResourceCollectionCard} from '../../../card/vertical-resource-collection-card'\n\nconst SearchCSS = () => {\n  const resources: any = get(data, 'resources')\n  const levels: any = get(\n    find(resources, {slug: {current: 'css-by-skill-level'}}),\n    'resources',\n  )\n  const animation: any = find(resources, {slug: {current: 'css-animation'}})\n\n  return (\n    <>\n      <SearchCuratedEssential\n        verticalImage={data?.image}\n        topic={{\n          label: 'CSS',\n          name: 'css',\n          description: data.description,\n        }}\n        CTAComponent={CssFormStyling}\n      />\n      <div className=\"grid grid-cols-1 mt-8 gap-5 lg:grid-cols-3 md:grid-cols-1\">\n        {levels?.map((resource: any) => {\n          return (\n            <VerticalResourceCollectionCard\n              location={data.slug.current}\n              key={resource._id}\n              resource={{\n                ...resource,\n                title: resource.name,\n                name: '',\n              }}\n            />\n          )\n        })}\n      </div>\n      <div className=\"grid md:grid-cols-2 gap-5 mt-5 md:gap-8 md:mt-8\">\n        <VerticalResourceCollectionCard resource={{...animation, name: ''}} />\n      </div>\n    </>\n  )\n}\n\nconst CssFormStyling: React.FC<{location: string}> = ({location}) => {\n  const {path, title, byline, name, description, image, background, slug} = {\n    title: 'Accessible Cross-Browser CSS Form Styling',\n    byline: 'Stephanie Eckles ',\n    name: 'FEATURED COURSE',\n    description: `Confidently build out an accessiblility focused form design system that works in all browsers.`,\n    image:\n      'https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/425/628/full/EGH_accessible-css.png',\n    background:\n      'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1633545274/next.egghead.io/resources/accessible-cross-browser-css-form-styling-7297/feature-card-background--css-form-styling.png',\n    path: '/courses/accessible-cross-browser-css-form-styling-7297',\n    slug: 'accessible-cross-browser-css-form-styling-7297',\n  }\n  return (\n    (<div\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center\"\n      css={{\n        [bpMinMD]: {\n          minHeight: 477,\n        },\n      }}\n    >\n      <ExternalTrackedLink\n        eventName=\"clicked CSS page CTA\"\n        params={{location}}\n        className=\"md:-mt-5 flex items-center justify-center bg-white dark:bg-gray-900 text-white overflow-hidden rounded-b-lg md:rounded-t-none rounded-t-lg shadow-sm\"\n        href=\"/courses/accessible-cross-browser-css-form-styling-7297\"\n      >\n        <div className=\"relative z-10 px-5 py-10 text-center sm:py-16 sm:text-left\">\n          <div className=\"flex items-center justify-center max-w-screen-xl mx-auto space-y-5\">\n            <div className=\"flex flex-col items-center justify-center space-y-5 sm:space-x-5 sm:space-y-0\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col items-center sm:items-start\">\n                <h2 className=\"mb-2 text-xs font-semibold text-white uppercase\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Image\n          className=\"absolute top-0 left-0 z-0 w-full h-full\"\n          src={background}\n          alt=\"\"\n          layout=\"fill\"\n        />\n      </ExternalTrackedLink>\n    </div>)\n  );\n}\n\nexport default SearchCSS\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/curated/css/sanity-loading-data.tsx","r":[0,1932],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport groq from 'groq'\nimport {sanityClient} from 'utils/sanity-client'\n\nexport default function LoadDataFromSanity() {\n  const [data, setData] = React.useState<any>()\n  React.useEffect(() => {\n    const slug = 'curated-css-resources'\n    async function run() {\n      const data = await sanityClient.fetch(\n        groq`\n        *[slug.current == $slug][0]{\n          name,\n          title,\n          description,\n          summary,\n          byline, \n          meta,\n          image,\n          slug,\n          path,\n          resources[]->{\n            _id,\n            title, \n            name,\n            summary,\n            slug,\n            meta,\n            description,\n            image,\n            type,\n            path,\n            resources[]->{\n              _id,\n              title,\n              slug,\n              name,\n              'image': externalPreviewImageUrl,\n              path,\n              'instructor': collaborators[]->[role == 'instructor'][0]{\n                title,\n                'slug': person->slug.current,\n                'name': person->name,\n                'path': person->website,\n                'twitter': person->twitter,\n                'image': person->image.url\n              },\n              resources[]->{\n                _id,\n                title,\n                slug,\n                name,\n                'image': externalPreviewImageUrl,\n                path,\n                'instructor': collaborators[]->[role == 'instructor'][0]{\n                  title,\n                  'slug': person->slug.current,\n                  'name': person->name,\n                  'path': person->website,\n                  'twitter': person->twitter,\n                  'image': person->image.url\n                },\n              }\n            }\n        }\n        }`,\n        {slug},\n      )\n      setData(data)\n    }\n    run()\n  }, [])\n\n  return data\n}\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/curated/docker/index.tsx","r":[0,21792],"t":"import React from 'react'\nimport dockerPageData from './docker-page-data'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {get, find} from 'lodash'\nimport Markdown from 'react-markdown'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport SearchCuratedEssential from '../curated-essential'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nconst SearchDocker = () => {\n  return (\n    <SearchCuratedEssential\n      topic={{\n        label: 'Docker',\n        name: 'docker',\n        description: `Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries – anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.`,\n      }}\n      pageData={dockerPageData}\n      CTAComponent={DockerCourse}\n    />\n  )\n}\n\nconst DockerCourse: React.FC<{location: string}> = ({location}) => {\n  const resource: any = find(dockerPageData, {id: 'jumbotron'})\n  const {path, image, title, byline, instructor} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked epic react banner\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center\"\n      href=\"/playlists/containerize-full-stack-javascript-applications-with-docker-30a8\"\n    >\n      <div\n        className=\"md:-mt-5 flex items-center justify-center bg-gray-900 dark:bg-gray-800 text-white overflow-hidden rounded-b-lg md:rounded-t-none rounded-t-lg shadow-sm\"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-orange-300 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <Link\n                  href={instructor.path}\n                  className=\"mt-4 flex items-center space-x-2 text-base group\"\n                  onClick={() =>\n                    track('clicked instructor in jumbotron', {\n                      instructor: instructor.slug,\n                    })\n                  }>\n\n                  <Image\n                    src={instructor.image}\n                    width={40}\n                    height={40}\n                    className=\"rounded-full\"\n                    alt={instructor.name}\n                  />\n                  <span className=\"group-hover:text-blue-200\">\n                    {instructor.name}\n                  </span>\n\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n        <UniqueBackground className=\"absolute left-0 top-0 w-full h-full z-0\" />\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n\nconst UniqueBackground = ({className}: any) => {\n  return (\n    <svg\n      preserveAspectRatio=\"xMidYMid slice\"\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      viewBox=\"0 0 1000 477\"\n    >\n      <defs>\n        <rect id=\"bg-a\" width=\"1280\" height=\"477\" x=\"0\" y=\"0\" />\n        <linearGradient id=\"bg-b\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"#6E7596\" />\n          <stop offset=\"100%\" stopColor=\"#111827\" />\n        </linearGradient>\n        <linearGradient id=\"bg-d\" x1=\"50%\" x2=\"50%\" y1=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"#6E7596\" />\n          <stop offset=\"100%\" stopColor=\"#111827\" />\n        </linearGradient>\n      </defs>\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <mask id=\"bg-c\" fill=\"#fff\">\n          <use xlinkHref=\"#bg-a\" />\n        </mask>\n        <path\n          fill=\"url(#bg-b)\"\n          d=\"M0,370.400749 C47.30625,367.061174 130.092188,384.593945 248.357813,422.999064 C425.75625,480.606742 570.121875,387.933521 712.040625,387.933521 C853.959375,387.933521 955.504688,441.366729 1087.63594,441.366729 C1219.76719,441.366729 1307.85469,387.933521 1419.1875,387.933521 C1493.40938,387.933521 1542.34688,391.551394 1566,398.787141 L1566,477 L0,477 L0,370.400749 Z\"\n          mask=\"url(#bg-c)\"\n          opacity=\".1\"\n        />\n        <path\n          fill=\"url(#bg-d)\"\n          d=\"M0,381.359551 C38.6666667,378.363296 106.333333,394.093633 203,428.550562 C348,480.235955 466,397.089888 582,397.089888 C698,397.089888 781,445.029963 889,445.029963 C997,445.029963 1069,397.089888 1160,397.089888 C1220.66667,397.089888 1260.66667,400.33583 1280,406.827715 L1280,477 L0,477 L0,381.359551 Z\"\n          mask=\"url(#bg-c)\"\n          opacity=\".3\"\n        />\n        <circle cx=\"938\" cy=\"410\" r=\"3\" fill=\"#3C4266\" />\n        <circle cx=\"34\" cy=\"354\" r=\"3\" fill=\"#3C4266\" />\n        <circle cx=\"1143\" cy=\"70\" r=\"3\" fill=\"#3C4266\" />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M359.302446 91.192774L355.876731 92.1394957C353.800972 92.7131469 352.191865 94.3552677 351.660483 96.4422477L350.693816 100.238795C350.666561 100.345837 350.557693 100.410517 350.450651 100.383262 350.379676 100.365191 350.324255 100.30977 350.306184 100.238795L349.339517 96.4422477C348.808135 94.3552677 347.199028 92.7131469 345.123269 92.1394957L341.697554 91.192774C341.591087 91.1633513 341.528631 91.0531916 341.558054 90.9467255 341.576789 90.8789311 341.629759 90.8259614 341.697554 90.807226L345.123269 89.8605043C347.199028 89.2868531 348.808135 87.6447323 349.339517 85.5577523L350.306184 81.7612051C350.333439 81.6541634 350.442307 81.5894833 350.549349 81.6167379 350.620324 81.6348094 350.675745 81.6902301 350.693816 81.7612051L351.660483 85.5577523C352.191865 87.6447323 353.800972 89.2868531 355.876731 89.8605043L359.302446 90.807226C359.408913 90.8366487 359.471369 90.9468084 359.441946 91.0532745 359.423211 91.1210689 359.370241 91.1740386 359.302446 91.192774zM1000.30245 90.192774L996.876731 91.1394957C994.800972 91.7131469 993.191865 93.3552677 992.660483 95.4422477L991.693816 99.2387949C991.666561 99.3458366 991.557693 99.4105167 991.450651 99.3832621 991.379676 99.3651906 991.324255 99.3097699 991.306184 99.2387949L990.339517 95.4422477C989.808135 93.3552677 988.199028 91.7131469 986.123269 91.1394957L982.697554 90.192774C982.591087 90.1633513 982.528631 90.0531916 982.558054 89.9467255 982.576789 89.8789311 982.629759 89.8259614 982.697554 89.807226L986.123269 88.8605043C988.199028 88.2868531 989.808135 86.6447323 990.339517 84.5577523L991.306184 80.7612051C991.333439 80.6541634 991.442307 80.5894833 991.549349 80.6167379 991.620324 80.6348094 991.675745 80.6902301 991.693816 80.7612051L992.660483 84.5577523C993.191865 86.6447323 994.800972 88.2868531 996.876731 88.8605043L1000.30245 89.807226C1000.40891 89.8366487 1000.47137 89.9468084 1000.44195 90.0532745 1000.42321 90.1210689 1000.37024 90.1740386 1000.30245 90.192774zM832.302446 389.192774L828.876731 390.139496C826.800972 390.713147 825.191865 392.355268 824.660483 394.442248L823.693816 398.238795C823.666561 398.345837 823.557693 398.410517 823.450651 398.383262 823.379676 398.365191 823.324255 398.30977 823.306184 398.238795L822.339517 394.442248C821.808135 392.355268 820.199028 390.713147 818.123269 390.139496L814.697554 389.192774C814.591087 389.163351 814.528631 389.053192 814.558054 388.946725 814.576789 388.878931 814.629759 388.825961 814.697554 388.807226L818.123269 387.860504C820.199028 387.286853 821.808135 385.644732 822.339517 383.557752L823.306184 379.761205C823.333439 379.654163 823.442307 379.589483 823.549349 379.616738 823.620324 379.634809 823.675745 379.69023 823.693816 379.761205L824.660483 383.557752C825.191865 385.644732 826.800972 387.286853 828.876731 387.860504L832.302446 388.807226C832.408913 388.836649 832.471369 388.946808 832.441946 389.053275 832.423211 389.121069 832.370241 389.174039 832.302446 389.192774z\"\n          opacity=\".2\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M718.302446,86.192774 L714.876731,87.1394957 C712.800972,87.7131469 711.191865,89.3552677 710.660483,91.4422477 L709.693816,95.2387949 C709.666561,95.3458366 709.557693,95.4105167 709.450651,95.3832621 C709.379676,95.3651906 709.324255,95.3097699 709.306184,95.2387949 L708.339517,91.4422477 C707.808135,89.3552677 706.199028,87.7131469 704.123269,87.1394957 L700.697554,86.192774 C700.591087,86.1633513 700.528631,86.0531916 700.558054,85.9467255 C700.576789,85.8789311 700.629759,85.8259614 700.697554,85.807226 L704.123269,84.8605043 C706.199028,84.2868531 707.808135,82.6447323 708.339517,80.5577523 L709.306184,76.7612051 C709.333439,76.6541634 709.442307,76.5894833 709.549349,76.6167379 C709.620324,76.6348094 709.675745,76.6902301 709.693816,76.7612051 L710.660483,80.5577523 C711.191865,82.6447323 712.800972,84.2868531 714.876731,84.8605043 L718.302446,85.807226 C718.408913,85.8366487 718.471369,85.9468084 718.441946,86.0532745 C718.423211,86.1210689 718.370241,86.1740386 718.302446,86.192774 Z\"\n          transform=\"rotate(-30 709.5 86)\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M412.76318,60.1934443 L411.137841,60.62016 C409.677263,61.0036193 408.534369,62.1406781 408.143439,63.5992738 L407.693182,65.2792217 C407.664587,65.3859131 407.554915,65.4492225 407.448224,65.4206273 C407.379215,65.4021318 407.325314,65.34823 407.306818,65.2792217 L406.856561,63.5992738 C406.465631,62.1406781 405.322737,61.0036193 403.862159,60.62016 L402.23682,60.1934443 C402.129984,60.1653956 402.066114,60.0560496 402.094162,59.9492132 C402.11249,59.8794032 402.16701,59.8248836 402.23682,59.8065557 L403.862159,59.37984 C405.322737,58.9963807 406.465631,57.8593219 406.856561,56.4007262 L407.306818,54.7207783 C407.335413,54.6140869 407.445085,54.5507775 407.551776,54.5793727 C407.620785,54.5978682 407.674686,54.65177 407.693182,54.7207783 L408.143439,56.4007262 C408.534369,57.8593219 409.677263,58.9963807 411.137841,59.37984 L412.76318,59.8065557 C412.870016,59.8346044 412.933886,59.9439504 412.905838,60.0507868 C412.88751,60.1205968 412.83299,60.1751164 412.76318,60.1934443 Z\"\n          transform=\"rotate(-30 407.5 60)\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M1129.08139,129.250819 L1124.52625,130.494558 C1121.82499,131.232113 1119.72635,133.36103 1119.02756,136.072578 L1117.75177,141.023035 C1117.71594,141.162086 1117.57417,141.245759 1117.43512,141.209924 C1117.34344,141.186298 1117.27185,141.11471 1117.24823,141.023035 L1115.97244,136.072578 C1115.27365,133.36103 1113.17501,131.232113 1110.47375,130.494558 L1105.91861,129.250819 C1105.78009,129.212996 1105.69845,129.07004 1105.73628,128.931516 C1105.76051,128.842757 1105.82985,128.773416 1105.91861,128.749181 L1110.47375,127.505442 C1113.17501,126.767887 1115.27365,124.63897 1115.97244,121.927422 L1117.24823,116.976965 C1117.28406,116.837914 1117.42583,116.754241 1117.56488,116.790076 C1117.65656,116.813702 1117.72815,116.88529 1117.75177,116.976965 L1119.02756,121.927422 C1119.72635,124.63897 1121.82499,126.767887 1124.52625,127.505442 L1129.08139,128.749181 C1129.21991,128.787004 1129.30155,128.92996 1129.26372,129.068484 C1129.23949,129.157243 1129.17015,129.226584 1129.08139,129.250819 Z\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M256.463578,46.1502207 L253.709678,46.9214287 C252.092563,47.3742891 250.842051,48.6588704 250.432812,50.2875716 L249.651297,53.3978641 C249.630301,53.4814232 249.545543,53.5321408 249.461984,53.5111452 C249.406238,53.4971379 249.36271,53.4536105 249.348703,53.3978641 L248.567188,50.2875716 C248.157949,48.6588704 246.907437,47.3742891 245.290322,46.9214287 L242.536422,46.1502207 C242.453457,46.1269872 242.405036,46.0408965 242.428269,45.9579319 C242.442961,45.9054687 242.483959,45.8644711 242.536422,45.8497793 L245.290322,45.0785713 C246.907437,44.6257109 248.157949,43.3411296 248.567188,41.7124284 L249.348703,38.6021359 C249.369699,38.5185768 249.454457,38.4678592 249.538016,38.4888548 C249.593762,38.5028621 249.63729,38.5463895 249.651297,38.6021359 L250.432812,41.7124284 C250.842051,43.3411296 252.092563,44.6257109 253.709678,45.0785713 L256.463578,45.8497793 C256.546543,45.8730128 256.594964,45.9591035 256.571731,46.0420681 C256.557039,46.0945313 256.516041,46.1355289 256.463578,46.1502207 Z\"\n          transform=\"rotate(-30 249.5 46)\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M915.302446,50.192774 L911.876731,51.1394957 C909.800972,51.7131469 908.191865,53.3552677 907.660483,55.4422477 L906.693816,59.2387949 C906.666561,59.3458366 906.557693,59.4105167 906.450651,59.3832621 C906.379676,59.3651906 906.324255,59.3097699 906.306184,59.2387949 L905.339517,55.4422477 C904.808135,53.3552677 903.199028,51.7131469 901.123269,51.1394957 L897.697554,50.192774 C897.591087,50.1633513 897.528631,50.0531916 897.558054,49.9467255 C897.576789,49.8789311 897.629759,49.8259614 897.697554,49.807226 L901.123269,48.8605043 C903.199028,48.2868531 904.808135,46.6447323 905.339517,44.5577523 L906.306184,40.7612051 C906.333439,40.6541634 906.442307,40.5894833 906.549349,40.6167379 C906.620324,40.6348094 906.675745,40.6902301 906.693816,40.7612051 L907.660483,44.5577523 C908.191865,46.6447323 909.800972,48.2868531 911.876731,48.8605043 L915.302446,49.807226 C915.408913,49.8366487 915.471369,49.9468084 915.441946,50.0532745 C915.423211,50.1210689 915.370241,50.1740386 915.302446,50.192774 Z\"\n          opacity=\".7\"\n          transform=\"rotate(45 906.5 50)\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M632.523515,47.1347189 L630.226548,47.7841514 C628.77666,48.1940852 627.657449,49.3492625 627.293564,50.8113869 L626.635856,53.4541184 C626.617183,53.5291495 626.54122,53.5748365 626.466189,53.5561632 C626.415912,53.5436507 626.376657,53.5043949 626.364144,53.4541184 L625.706436,50.8113869 C625.342551,49.3492625 624.22334,48.1940852 622.773452,47.7841514 L620.476485,47.1347189 C620.402082,47.1136825 620.358819,47.0363135 620.379856,46.9619103 C620.393091,46.9151004 620.429675,46.8785159 620.476485,46.8652811 L622.773452,46.2158486 C624.22334,45.8059148 625.342551,44.6507375 625.706436,43.1886131 L626.364144,40.5458816 C626.382817,40.4708505 626.45878,40.4251635 626.533811,40.4438368 C626.584088,40.4563493 626.623343,40.4956051 626.635856,40.5458816 L627.293564,43.1886131 C627.657449,44.6507375 628.77666,45.8059148 630.226548,46.2158486 L632.523515,46.8652811 C632.597918,46.8863175 632.641181,46.9636865 632.620144,47.0380897 C632.606909,47.0848996 632.570325,47.1214841 632.523515,47.1347189 Z\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M1142.52352,222.134719 L1140.22655,222.784151 C1138.77666,223.194085 1137.65745,224.349263 1137.29356,225.811387 L1136.63586,228.454118 C1136.61718,228.529149 1136.54122,228.574837 1136.46619,228.556163 C1136.41591,228.543651 1136.37666,228.504395 1136.36414,228.454118 L1135.70644,225.811387 C1135.34255,224.349263 1134.22334,223.194085 1132.77345,222.784151 L1130.47648,222.134719 C1130.40208,222.113683 1130.35882,222.036313 1130.37986,221.96191 C1130.39309,221.9151 1130.42968,221.878516 1130.47648,221.865281 L1132.77345,221.215849 C1134.22334,220.805915 1135.34255,219.650737 1135.70644,218.188613 L1136.36414,215.545882 C1136.38282,215.470851 1136.45878,215.425163 1136.53381,215.443837 C1136.58409,215.456349 1136.62334,215.495605 1136.63586,215.545882 L1137.29356,218.188613 C1137.65745,219.650737 1138.77666,220.805915 1140.22655,221.215849 L1142.52352,221.865281 C1142.59792,221.886317 1142.64118,221.963687 1142.62014,222.03809 C1142.60691,222.0849 1142.57032,222.121484 1142.52352,222.134719 Z\"\n          opacity=\".3\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M321.302446,389.192774 L317.876731,390.139496 C315.800972,390.713147 314.191865,392.355268 313.660483,394.442248 L312.693816,398.238795 C312.666561,398.345837 312.557693,398.410517 312.450651,398.383262 C312.379676,398.365191 312.324255,398.30977 312.306184,398.238795 L311.339517,394.442248 C310.808135,392.355268 309.199028,390.713147 307.123269,390.139496 L303.697554,389.192774 C303.591087,389.163351 303.528631,389.053192 303.558054,388.946725 C303.576789,388.878931 303.629759,388.825961 303.697554,388.807226 L307.123269,387.860504 C309.199028,387.286853 310.808135,385.644732 311.339517,383.557752 L312.306184,379.761205 C312.333439,379.654163 312.442307,379.589483 312.549349,379.616738 C312.620324,379.634809 312.675745,379.69023 312.693816,379.761205 L313.660483,383.557752 C314.191865,385.644732 315.800972,387.286853 317.876731,387.860504 L321.302446,388.807226 C321.408913,388.836649 321.471369,388.946808 321.441946,389.053275 C321.423211,389.121069 321.370241,389.174039 321.302446,389.192774 Z\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M1243.30245,205.192774 L1239.87673,206.139496 C1237.80097,206.713147 1236.19186,208.355268 1235.66048,210.442248 L1234.69382,214.238795 C1234.66656,214.345837 1234.55769,214.410517 1234.45065,214.383262 C1234.37968,214.365191 1234.32426,214.30977 1234.30618,214.238795 L1233.33952,210.442248 C1232.80814,208.355268 1231.19903,206.713147 1229.12327,206.139496 L1225.69755,205.192774 C1225.59109,205.163351 1225.52863,205.053192 1225.55805,204.946725 C1225.57679,204.878931 1225.62976,204.825961 1225.69755,204.807226 L1229.12327,203.860504 C1231.19903,203.286853 1232.80814,201.644732 1233.33952,199.557752 L1234.30618,195.761205 C1234.33344,195.654163 1234.44231,195.589483 1234.54935,195.616738 C1234.62032,195.634809 1234.67574,195.69023 1234.69382,195.761205 L1235.66048,199.557752 C1236.19186,201.644732 1237.80097,203.286853 1239.87673,203.860504 L1243.30245,204.807226 C1243.40891,204.836649 1243.47137,204.946808 1243.44195,205.053275 C1243.42321,205.121069 1243.37024,205.174039 1243.30245,205.192774 Z\"\n          transform=\"rotate(30 1234.5 205)\"\n        />\n        <path\n          fill=\"#5A6399\"\n          fillRule=\"nonzero\"\n          d=\"M953.523515 239.134719L951.226548 239.784151C949.77666 240.194085 948.657449 241.349263 948.293564 242.811387L947.635856 245.454118C947.617183 245.529149 947.54122 245.574837 947.466189 245.556163 947.415912 245.543651 947.376657 245.504395 947.364144 245.454118L946.706436 242.811387C946.342551 241.349263 945.22334 240.194085 943.773452 239.784151L941.476485 239.134719C941.402082 239.113683 941.358819 239.036313 941.379856 238.96191 941.393091 238.9151 941.429675 238.878516 941.476485 238.865281L943.773452 238.215849C945.22334 237.805915 946.342551 236.650737 946.706436 235.188613L947.364144 232.545882C947.382817 232.470851 947.45878 232.425163 947.533811 232.443837 947.584088 232.456349 947.623343 232.495605 947.635856 232.545882L948.293564 235.188613C948.657449 236.650737 949.77666 237.805915 951.226548 238.215849L953.523515 238.865281C953.597918 238.886317 953.641181 238.963687 953.620144 239.03809 953.606909 239.0849 953.570325 239.121484 953.523515 239.134719zM70.265603 80.7024486L66.651681 81.6986856C64.4716547 82.2996457 62.7809424 84.0229057 62.221655 86.2139934L61.2034758 90.2028546C61.1747911 90.3152312 61.0604383 90.3830769 60.9480617 90.3543921 60.8736367 90.3353947 60.8155216 90.2772796 60.7965242 90.2028546L59.778345 86.2139934C59.2190576 84.0229057 57.5283453 82.2996457 55.348319 81.6986856L51.734397 80.7024486C51.6225877 80.6716265 51.5569346 80.556001 51.5877567 80.4441917 51.6074088 80.3729023 51.6631076 80.3172035 51.734397 80.2975514L55.348319 79.3013144C57.5283453 78.7003543 59.2190576 76.9770943 59.778345 74.7860066L60.7965242 70.7971454C60.8252089 70.6847688 60.9395617 70.6169231 61.0519383 70.6456079 61.1263633 70.6646053 61.1844784 70.7227204 61.2034758 70.7971454L62.221655 74.7860066C62.7809424 76.9770943 64.4716547 78.7003543 66.651681 79.3013144L70.265603 80.2975514C70.3774123 80.3283735 70.4430654 80.443999 70.4122433 80.5558083 70.3925912 80.6270977 70.3368924 80.6827965 70.265603 80.7024486z\"\n          opacity=\".5\"\n        />\n      </g>\n    </svg>\n  )\n}\n\nexport default SearchDocker\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/curated/typescript/index.tsx","r":[0,4776],"t":"import React from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport typescriptPageData from './typescript-page-data'\nimport SearchCuratedEssential from '../curated-essential'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {find} from 'lodash'\nimport {VerticalResourceCollectionCard} from 'components/card/vertical-resource-collection-card'\n\nconst SearchTypescript = () => {\n  const location = 'typescript landing'\n  const podcasts: any = find(typescriptPageData, {id: 'podcasts'})\n  const playlists: any = find(typescriptPageData, {id: 'playlists'})\n  const algorithms: any = find(typescriptPageData, {\n    id: 'algorithms',\n  })\n  const stateManagement: any = find(typescriptPageData, {\n    id: 'stateManagement',\n  })\n  const designResources: any = find(typescriptPageData, {id: 'design'})\n\n  return (\n    <SearchCuratedEssential\n      topic={{\n        label: 'TypeScript',\n        name: 'typescript',\n        description: `Over the last several years, TypeScript has been coming on strong with the idea that static types get out of your way and provide deep benefits to code bases of all shapes and sizes, while allowing the flexibility of dynamic types when needed.\n\nTypeScript is a great idea that provides a mature ecosystem, building on top of the ECMAScript we (mostly) all love, while adding protection and resilience to our application without a lot of added hassle or pain.\n\nLove them or hate them, static types are here to stay, and at the very least an interesting concept that deserves inspection and conversation.\n        `,\n      }}\n      pageData={typescriptPageData}\n      CTAComponent={CourseFeatureCard}\n    >\n      <div className=\"mb-6 pb-6 md:mb-10 md:pb-10\">\n        {/* Featured Section */}\n        <section className=\"grid lg:grid-cols-12 grid-cols-1 items-start mt-12 \">\n          <div className=\"md:col-span-8 mr-0 md:mr-5\">\n            <VerticalResourceCollectionCard\n              resource={designResources}\n              location={location}\n            />\n            <VerticalResourceCollectionCard\n              className=\"mt-5\"\n              resource={stateManagement}\n              location={location}\n            />\n          </div>\n          <VerticalResourceCollectionCard\n            className=\"sm:mt-0 mt-5 col-span-4 h-full\"\n            resource={algorithms}\n            location={location}\n          />\n        </section>\n\n        {/* Playlists and Podcasts */}\n        <section className=\"grid md:grid-cols-2 grid-cols-1 gap-5 items-start mt-12\">\n          <VerticalResourceCollectionCard\n            resource={podcasts}\n            location={location}\n            className=\"h-full\"\n          />\n          <VerticalResourceCollectionCard\n            resource={playlists}\n            location={location}\n            className=\"h-full\"\n          />\n        </section>\n      </div>\n    </SearchCuratedEssential>\n  )\n}\n\nconst CourseFeatureCard = ({resource, className}: any) => {\n  return (\n    (<Link\n      href=\"/courses/advanced-typescript-fundamentals-579c174f\"\n      className={`block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center ${\n        className ? className : ''\n      }`}>\n\n      <div className=\"items-center h-full w-full block bg-white dark:bg-gray-800\">\n        <div\n          className=\"relative z-10 flex flex-col h-full justify-between  items-center sm:p-8 p-5\"\n          css={{\n            [bpMinMD]: {\n              minHeight: 477,\n            },\n          }}\n        >\n          <div className=\"flex flex-col items-center\">\n            <Image\n              src=\"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/433/579/full/typescript.png\"\n              width={200}\n              height={200}\n              alt=\"Advanced TypeScript Fundamentals\"\n            />\n            <h2 className=\"text-xl font-bold min-w-full mt-4 sm:mt-14 mb-2 leading-tighter group-hover:underline\">\n              Advanced TypeScript Fundamentals\n            </h2>\n            <span className=\"text-sm opacity-80\">Marius Schulz</span>\n            <p className=\"text-sm mt-4\">\n              Learn the newest language features TypeScript has to offer.\n              Learn how to use optional chaining, const assertions,\n              conditional types, and more!\n            </p>\n          </div>\n        </div>\n        <img\n          className=\"absolute top-0 left-0 z-0 w-full object-fit\"\n          src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1619808981/next.egghead.io/resources/advanced-typescript-fundamentals/background-feature-card-v2.svg\"\n          alt=\"\"\n        />\n      </div>\n\n    </Link>)\n  );\n}\n\nexport default SearchTypescript\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/alex-reardon/index.tsx","r":[0,4141],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nexport default function SearchAlexReardon({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n\n  const {courses} = instructor\n  const [primaryCourse] = courses.resources\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedDomEventsCourse\n            resource={primaryCourse}\n            location=\"Alex Reardon instructor page\"\n          />\n        }\n      />\n    </div>\n  )\n}\n\nexport const alexReardonQuery = groq`*[_type == 'resource' && slug.current == \"alex-reardon-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n}`\n\nconst FeaturedDomEventsCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked Alex Reardon instructor page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <img\n        className=\"absolute h-full w-full object-cover object-left-top\"\n        src={background}\n        alt=\"\"\n      />\n      <div className=\"absolute inset-0 bg-gray-200 mix-blend-multiply\" />\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10 mt-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-white text-opacity-80 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-white\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/christian-nwamba/index.tsx","r":[0,4252],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nexport default function SearchChristianNwamba({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n  const {courses} = instructor\n  const [primaryCourse] = courses.resources\n  const location = 'Christian Nwamba instructor page'\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedCourse resource={primaryCourse} location={location} />\n        }\n      />\n    </div>\n  )\n}\n\nexport const christianNwambaQuery = groq`*[_type == 'resource' && slug.current == \"christian-nwamba-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  }\n}`\n\nconst FeaturedCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked Christian Nwamba instructor page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <div className=\"absolute top-0 left-0 bg-gradient-to-r from-orange-400 to-orange-500 w-full h-2 z-20\"></div>\n      <img\n        className=\"absolute h-full w-full object-cover object-left-top\"\n        src={background}\n        alt=\"\"\n      />\n      <div className=\"absolute inset-0 bg-gray-200 mix-blend-multiply\" />\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10 mt-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-white text-opacity-80 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-white\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/hiroko-nishimura/index.tsx","r":[0,5111],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\n\nexport default function SearchHirokoNishimura({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n  const {courses, projects} = instructor\n  const primaryProject = projects.resources\n  const [primaryCourse, secondaryCourse] = courses.resources\n  const location = 'Hiroko Nishimura instructor page'\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedCourse resource={primaryCourse} location={location} />\n        }\n      />\n      <section className=\"flex md:flex-row flex-col max-w-screen-xl mx-auto gap-3 px-5 md:px-0\">\n        <HorizontalResourceCard\n          resource={primaryProject}\n          location={location}\n          className=\"md:w-2/5\"\n        />\n        <HorizontalResourceCard\n          resource={secondaryCourse}\n          location={location}\n          className=\"md:w-3/5\"\n        />\n      </section>\n    </div>\n  )\n}\n\nexport const hirokoNishimuraQuery = groq`*[_type == 'resource' && slug.current == \"hiroko-nishimura-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n\t'projects': resources[slug.current == 'instructor-landing-page-projects'][0]{\n    resources[0]{\n      title,\n      'path': url,\n      path,\n      description,\n      image,\n      byline\n    }\n  }\n}`\n\nconst FeaturedCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked Hiroko Nishimura instructor page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <div className=\"absolute top-0 left-0 bg-gradient-to-r from-blue-700 to-blue-800 w-full h-2 z-20\"></div>\n      <img\n        className=\"absolute w-full object-fit object-left-top\"\n        src={background}\n        alt=\"\"\n      />\n      <div className=\"absolute inset-0 bg-gray-200 mix-blend-multiply\" />\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10 mt-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked Hiroko Nishimura instructor page CTA', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-gray-900 dark:text-white text-opacity-80 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-gray-900 dark:text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked Hiroko Nishimura instructor page CTA', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-gray-900 dark:text-white\">\n                  {description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/jamund-ferguson/index.tsx","r":[0,7149],"t":"import groq from 'groq'\nimport Link from 'next/link'\nimport Image from 'next/image'\nimport Markdown from 'components/markdown'\n\nimport {track} from 'utils/analytics'\n\nimport SearchInstructorEssential from '../instructor-essential'\nimport {CardResource} from 'types'\nimport CtaCard from 'components/search/components/cta-card'\nimport {VerticalResourceCard} from 'components/card/verticle-resource-card'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\n\nexport default function SearchJamundFerguson({instructor}: {instructor: any}) {\n  let {reduxFeature, featuredCourses} = instructor\n\n  if (!reduxFeature || !featuredCourses) {\n    return (\n      <div className=\"max-w-screen-xl mx-auto\">\n        <SearchInstructorEssential instructor={instructor} />\n      </div>\n    )\n  }\n\n  let [primaryCourse, ...restCourses] = featuredCourses.resources\n  return (\n    <div className=\"mx-auto max-w-screen-xl\">\n      <SearchInstructorEssential\n        instructor={instructor}\n        CTAComponent={\n          <CtaCard\n            resource={primaryCourse}\n            trackTitle=\"clicked instructor landing page CTA resource\"\n            textLight\n            location=\"Jamund Ferguson instructor page\"\n          />\n        }\n      />\n\n      <FeatureSection\n        resource={reduxFeature}\n        location=\"Jamund Ferguson instructor page\"\n      />\n\n      <section className=\"xl:px-0 px-5 mt-20\">\n        <h2 className=\"text-xl sm:font-semibold font-bold mb-3 dark:text-white text-center\">\n          More from Jamund\n        </h2>\n        <div className=\"flex sm:flex-nowrap flex-wrap justify-center gap-4 mt-4\">\n          {restCourses.map((course: CardResource) => {\n            return (\n              <HorizontalResourceCard\n                className=\"mt-0 sm:w-1/2 w-full flex flex-col items-center justify-center text-center sm:py-8 py-6\"\n                resource={course}\n                describe\n                location=\"Kyle Shevlin instructor Landing page\"\n              />\n            )\n          })}\n        </div>\n      </section>\n    </div>\n  )\n}\n\ntype FeatureSectionType = {\n  resource: {\n    title: string\n    description: string\n    path?: string\n    byline: string\n    image: string\n    resources: CardResource[]\n  }\n  location: string\n}\n\nconst FeatureSection = ({resource, location}: FeatureSectionType) => {\n  return (\n    (<section className=\"sm:mt-5 xl:px-0 px-5\">\n      <div className=\"flex items-center justify-center bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-50 overflow-hidden rounded-lg shadow-sm\">\n        <div className=\"px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center lg:px-8 w-full\">\n            <div className=\"w-full\">\n              <div className=\"grid sm:grid-cols-3 grid-cols-1 gap-5 mb-5\">\n                <div className=\"sm:col-span-1 flex-shrink-0 text-center mb-4\">\n                  {resource.path ? (\n                    <Link\n                      href={resource.path}\n                      tabIndex={-1}\n                      onClick={() => {\n                        track('clicked resource', {\n                          resource: resource.path,\n                          location,\n                        })\n                      }}>\n\n                      <Image\n                        quality={100}\n                        src={\n                          'https://res.cloudinary.com/dg3gyk0gu/image/upload/v1617475003/egghead-next-pages/home-page/eggo-gardening.png'\n                        }\n                        width={250}\n                        height={305}\n                        alt={resource.title}\n                      />\n\n                    </Link>\n                  ) : (\n                    <Image\n                      quality={100}\n                      src={resource.image}\n                      width={305}\n                      height={305}\n                      alt={resource.title}\n                    />\n                  )}\n                </div>\n                <div className=\"sm:col-span-2 flex flex-col sm:items-start items-center w-full\">\n                  <h3 className=\"text-xs text-gray-700 dark:text-gray-300 uppercase font-semibold mb-2\">\n                    {resource.byline ? resource.byline : ''}\n                  </h3>\n                  {resource.path ? (\n                    <Link\n                      href={resource.path}\n                      className=\"font-bold hover:text-blue-300 dark:hover:text-blue-300 transition ease-in-out\"\n                      onClick={() => {\n                        track('clicked resource', {\n                          resource: resource.path,\n                          location,\n                        })\n                      }}>\n\n                      <h2 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                        {resource.title}\n                      </h2>\n\n                    </Link>\n                  ) : (\n                    <h2 className=\"sm:text-2xl md:text-4xl text-xl max-w-screen-lg font-extrabold leading-tighter\">\n                      {resource.title}\n                    </h2>\n                  )}\n                  <div>\n                    <Markdown className=\"leading-relaxed text-gray-700 dark:text-gray-50 mt-4\">\n                      {resource.description}\n                    </Markdown>\n                  </div>\n                </div>\n              </div>\n              <div className=\"grid md:grid-cols-3 grid-cols-1 gap-5 mt-12\">\n                {resource.resources.map((course: any) => {\n                  return (\n                    <VerticalResourceCard\n                      className=\"col-span-3 sm:col-span-1 text-center shadow\"\n                      key={course.path}\n                      resource={course}\n                      location={location}\n                    />\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>)\n  );\n}\n\nexport const jamundFergusonQuery = groq`*[_type == 'resource' && slug.current == 'jamund-ferguson-instructor-landing-page'][0]{\n  title,\n  'reduxFeature': resources[slug.current == 'instructor-landing-page-redux-feature'][0]{\n  \tdescription,\n  \timage,\n  \ttitle,\n    resources[]->{\n       title,\n       description,\n       path,\n       byline,\n       image,\n       'background': images[label == 'feature-card-background'][0].url,\n       'instructor': collaborators[]->[role == 'instructor'][0]{\n         'name': person->.name\n       },\n     }\n    },\n\t'featuredCourses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n       title,\n       'description': summary,\n       path,\n       byline,\n       image,\n       'background': images[label == 'feature-card-background'][0].url,\n       'instructor': collaborators[]->[role == 'instructor'][0]{\n         'name': person->.name\n       },\n     }\n    },\n }`\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/kamran-ahmed/index.tsx","r":[0,4152],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\n\nexport default function SearchKamranAhmed({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n\n  const {courses} = instructor\n  const [primaryCourse] = courses.resources\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedTypescriptCourse\n            resource={primaryCourse}\n            location=\"Kamran Ahmed instructor page\"\n          />\n        }\n      />\n    </div>\n  )\n}\n\nexport const kamranAhmedQuery = groq`*[_type == 'resource' && slug.current == \"kamran-ahmed-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n}`\n\nconst FeaturedTypescriptCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked CSS page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"absolute top-0 left-0 bg-gradient-to-r from-yellow-400 to-blue-300 w-full h-2 z-20\" />\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-gray-900 dark:text-white  uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-gray-900 dark:text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-gray-900 dark:text-white\">\n                  {description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <img\n          className=\"absolute top-0 left-0 z-0 w-full\"\n          src={background}\n          alt=\"\"\n        />\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/kevin-cunningham/index.tsx","r":[0,4672],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\n\nexport default function SearchKevinCunningham({instructor}: {instructor: any}) {\n  const {courses} = instructor\n\n  const [primaryCourse, secondaryCourse, thirdCourse] = courses.resources\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={instructor}\n        CTAComponent={\n          <FeaturedVue3Course\n            resource={primaryCourse}\n            location=\"Kevin Cunningham instructor page\"\n          />\n        }\n      />\n      <section className=\"flex md:flex-row flex-col max-w-screen-xl mx-auto gap-4 px-5 md:px-0\">\n        <HorizontalResourceCard\n          resource={secondaryCourse}\n          location=\"Kevin Cunningham instructor page\"\n          className=\"md:w-1/2\"\n        />\n        <HorizontalResourceCard\n          resource={thirdCourse}\n          location=\"Kevin Cunningham instructor page\"\n          className=\"md:w-1/2\"\n        />\n      </section>\n    </div>\n  )\n}\n\nexport const kevinCunninghamQuery = groq`*[_type == 'resource' && slug.current == \"kevin-cunningham-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n}`\n\nconst FeaturedVue3Course: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked kevin cunningham page course CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <img\n        className=\"absolute h-full w-full object-cover object-left-top\"\n        src={background}\n        alt=\"\"\n      />\n      <div className=\"absolute inset-0 bg-gray-200 mix-blend-multiply\" />\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10 mt-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked kevin cunningham page course CTA', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-white text-opacity-80 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked kevin cunningham page course CTA', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-white\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/kristian-freeman/index.tsx","r":[0,4995],"t":"import React from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\n\nexport default function SearchKristianFreeman({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n  const {courses, projects} = instructor\n  const primaryProject = projects.resources\n  const [primaryCourse, secondaryCourse] = courses.resources\n  const location = 'Kristian Freeman instructor page'\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedCourse resource={primaryCourse} location={location} />\n        }\n      />\n      <section className=\"flex md:flex-row flex-col max-w-screen-xl mx-auto gap-3 px-5 md:px-0\">\n        <HorizontalResourceCard\n          resource={primaryProject}\n          location={location}\n          className=\"md:w-2/5\"\n        />\n        <HorizontalResourceCard\n          resource={secondaryCourse}\n          location={location}\n          className=\"md:w-3/5\"\n        />\n      </section>\n    </div>\n  )\n}\n\nexport const kristianFreemanQuery = groq`*[_type == 'resource' && slug.current == \"kristian-freeman-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n\t'projects': resources[slug.current == 'instructor-landing-page-projects'][0]{\n    resources[0]{\n      title,\n      'path': url,\n      path,\n      description,\n      image,\n      byline\n    }\n  }\n}`\n\nconst FeaturedCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked Kristian Freeman instructor page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <div className=\"absolute top-0 left-0 bg-gradient-to-r from-orange-400 to-orange-500 w-full h-2 z-20\"></div>\n      <img\n        className=\"absolute h-full w-full object-cover object-left-top\"\n        src={background}\n        alt=\"\"\n      />\n      <div className=\"absolute inset-0 bg-gray-200 mix-blend-multiply\" />\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10 mt-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-white text-opacity-80 uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-white\">{description}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/matias-hernandez/index.tsx","r":[0,5073],"t":"import groq from 'groq'\nimport Link from 'next/link'\nimport Markdown from 'components/markdown'\nimport {track} from 'utils/analytics'\nimport SearchInstructorEssential from '../instructor-essential'\nimport {CardResource} from 'types'\nimport CtaCard from 'components/search/components/cta-card'\nimport {VerticalResourceCard} from 'components/card/verticle-resource-card'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport Image from 'next/image'\nimport {bpMinMD} from 'utils/breakpoints'\nimport {get} from 'lodash'\n\nexport default function SearchMatiasHernandez({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n\n  const {courses} = instructor\n  const [primaryCourse, ...restCourses] = courses.resources\n\n  return (\n    <div className=\"max-w-screen-xl mx-auto\">\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <FeaturedReactHooksCourse\n            resource={primaryCourse}\n            location=\"Matias Hernandez instructor page\"\n          />\n        }\n      />\n\n      <section className=\"xl:px-0 px-5\">\n        <h2 className=\"text-xl sm:font-semibold font-bold mb-3 dark:text-white\">\n          JavaScript Resources\n        </h2>\n        <div className=\"flex sm:flex-nowrap flex-wrap gap-4 mt-4\">\n          {restCourses.map((course: CardResource) => {\n            return (\n              <VerticalResourceCard\n                className=\"mt-0 sm:w-1/2 w-full flex flex-col items-center justify-center text-center sm:py-8 py-6\"\n                resource={course}\n                describe\n                location=\"Matias Hernandez instructor Landing page\"\n              />\n            )\n          })}\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport const MatiasHernandezQuery = groq`*[_type == 'resource' && slug.current == \"matias-hernandez-landing-page\"][0]{\n  'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n}`\n\nconst FeaturedReactHooksCourse: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked CSS page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden dark:bg-gray-800 border-0 bg-white border-gray-100 shadow-sm relative text-center\"\n      href={path}\n    >\n      <div\n        className=\"md:-mt-5 flex items-center justify-center text-white overflow-hidden \"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        <div className=\"absolute top-0 left-0 bg-gradient-to-r from-blue-400 to-cyan-400 w-full h-2 z-20\" />\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5 gap-10\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-gray-900 dark:text-white  uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-gray-900 dark:text-white hover:text-cyan-400\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-gray-900 dark:text-white\">\n                  {description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <img\n          className=\"absolute top-0 left-0 z-0 w-full\"\n          src={background}\n          alt=\"\"\n        />\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/search/instructors/stephanie-eckles/index.tsx","r":[0,7562],"t":"import React, {FunctionComponent} from 'react'\nimport SearchInstructorEssential from '../instructor-essential'\nimport Image from 'next/image'\nimport {get} from 'lodash'\nimport Link from 'next/link'\nimport groq from 'groq'\n\nimport {Card} from 'components/card'\n\nimport {bpMinMD} from 'utils/breakpoints'\nimport {track} from 'utils/analytics'\nimport ExternalTrackedLink from 'components/external-tracked-link'\nimport {HorizontalResourceCard} from 'components/card/horizontal-resource-card'\nimport {VerticalResourceCard} from '../../../card/verticle-resource-card'\n\nexport default function SearchStephanieEckles({instructor}: {instructor: any}) {\n  const combinedInstructor = {...instructor}\n\n  const {projects, courses} = instructor\n  const [primaryCourse, secondCourse, thirdCourse, fourthCourse] =\n    courses.resources\n\n  return (\n    <div>\n      <SearchInstructorEssential\n        instructor={combinedInstructor}\n        CTAComponent={\n          <CssFormStyling\n            resource={primaryCourse}\n            location=\"Stephanie Eckles instructor page\"\n          />\n        }\n      />\n      <section className=\"grid lg:grid-cols-6 grid-cols-1 mb-10 pb-10 w-full gap-0 lg:gap-3\">\n        <ProjectStack\n          className=\"col-span-2 mb-3 lg:mb-0\"\n          data={projects.resources}\n        />\n        <div className=\"col-span-4 grid lg:grid-cols-2 grid-cols-1 auto-cols-max gap-3\">\n          <HorizontalResourceCard\n            className=\"col-span-2\"\n            resource={secondCourse}\n          />\n          <VerticalResourceCard className=\"col-span-1\" resource={thirdCourse} />\n          <VerticalResourceCard\n            className=\"col-span-1\"\n            resource={fourthCourse}\n          />\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport const stephanieEcklesQuery = groq`*[_type == 'resource' && slug.current == \"stephanie-eckles-landing-page\"][0]{\n\t'projects': resources[slug.current == 'instructor-landing-page-projects'][0]{\n    resources[]{\n      title,\n      'path': url,\n      description,\n      image\n    }\n},\n\t'courses': resources[slug.current == 'instructor-landing-page-featured-courses'][0]{\n    resources[]->{\n      title,\n      'description': summary,\n    \tpath,\n      byline,\n    \timage,\n      'background': images[label == 'feature-card-background'][0].url,\n      'instructor': collaborators[]->[role == 'instructor'][0]{\n      \t'name': person->.name\n    \t},\n    }\n  },\n}`\n\nconst ProjectStack: FunctionComponent<any> = ({data, className}) => {\n  return (\n    (<Card className={className}>\n      <>\n        <h2 className=\"uppercase font-semibold text-xs mb-1 text-gray-700 dark:text-gray-300\">\n          Stephanie's Projects\n        </h2>\n        <hr />\n        <div className=\"h-full\">\n          <ul className=\"flex flex-col h-full justify-evenly\">\n            {data.map((item: any) => {\n              const {description, title, image, path} = item\n              return (\n                (<li key={path} className=\"my-5\">\n                  {path && (\n                    <Link\n                      href={path}\n                      onClick={() => {\n                        track('clicked instructor project resource', {\n                          resource: path,\n                          linkType: 'image',\n                          location: 'instructor page',\n                        })\n                      }}\n                      tabIndex={-1}>\n\n                      <div className=\"flex items-center gap-4 rounded transition duration-200 ease-in-out\">\n                        <div className=\"flex-shrink-0\">\n                          {image && (\n                            <Image\n                              src={get(image, 'src', image)}\n                              width=\"40\"\n                              height=\"40\"\n                              alt={`illustration for ${title}`}\n                            />\n                          )}\n                        </div>\n                        <div>\n                          <h2 className=\"text-lg font-bold leading-tighter hover:text-blue-600 dark:hover:text-blue-300 mb-1\">\n                            {title}\n                          </h2>\n                          <p className=\" text-sm leading-tight max-w-none\">\n                            {description}\n                          </p>\n                        </div>\n                      </div>\n\n                    </Link>\n                  )}\n                </li>)\n              );\n            })}\n          </ul>\n        </div>\n      </>\n    </Card>)\n  );\n}\n\nconst CssFormStyling: React.FC<{location: string; resource: any}> = ({\n  location,\n  resource,\n}) => {\n  const {path, title, byline, description, image, background} = resource\n  return (\n    (<ExternalTrackedLink\n      eventName=\"clicked CSS page CTA\"\n      params={{location}}\n      className=\"block md:col-span-4 rounded-md w-full h-full overflow-hidden border-0 border-gray-100 relative text-center\"\n      href={path}\n    >\n      <div\n        className=\"md:-mt-5 flex items-center justify-center bg-white dark:bg-gray-900 text-white overflow-hidden rounded-b-lg md:rounded-t-none rounded-t-lg shadow-sm\"\n        css={{\n          [bpMinMD]: {\n            minHeight: 477,\n          },\n        }}\n      >\n        {/* <div className=\"absolute top-0 left-0 bg-gradient-to-r from-yellow-500 to-sky-500 w-full h-2 z-20\" /> */}\n        <div className=\"relative z-10 px-5 sm:py-16 py-10 sm:text-left text-center\">\n          <div className=\"space-y-5 mx-auto flex items-center justify-center max-w-screen-xl\">\n            <div className=\"flex flex-col items-center justify-center sm:space-x-5 sm:space-y-0 space-y-5\">\n              <div className=\"flex-shrink-0\">\n                <Link\n                  href={path}\n                  tabIndex={-1}\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'image',\n                    })\n                  }>\n\n                  <Image\n                    quality={100}\n                    src={get(image, 'src', image)}\n                    width={250}\n                    height={250}\n                    alt={get(image, 'alt', `illustration for ${title}`)}\n                  />\n\n                </Link>\n              </div>\n              <div className=\"flex flex-col sm:items-start items-center\">\n                <h2 className=\"text-xs text-gray-900 dark:text-white  uppercase font-semibold mb-2\">\n                  {byline}\n                </h2>\n                <Link\n                  href={path}\n                  className=\"text-xl font-extrabold leading-tighter text-gray-900 dark:text-white hover:text-blue-300\"\n                  onClick={() =>\n                    track('clicked jumbotron resource', {\n                      resource: path,\n                      linkType: 'text',\n                    })\n                  }>\n\n                  <h1>{title}</h1>\n\n                </Link>\n                <p className=\"mt-4 text-gray-900 dark:text-white\">\n                  {description}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <img\n          className=\"absolute top-0 left-0 z-0 w-full\"\n          src={background}\n          alt=\"\"\n        />\n      </div>\n    </ExternalTrackedLink>)\n  );\n}\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/comments/comments/index.tsx","r":[0,2465],"t":"import * as React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport Link from 'next/link'\nimport Comment from 'components/pages/lessons/comments/comment'\nimport CommentField from 'components/pages/lessons/comments/comment-field'\nimport {track} from 'utils/analytics'\nimport {useViewer} from 'context/viewer-context'\nimport {saveCommentForLesson} from 'lib/lesson-comments'\n\ntype CommentsProps = {\n  lesson: any\n  commentingAllowed: boolean\n}\n\nconst Comments: React.FunctionComponent<CommentsProps> = ({\n  lesson,\n  commentingAllowed,\n}: CommentsProps) => {\n  const {viewer} = useViewer()\n  const [comments, setComments] = React.useState(lesson.comments)\n  const {slug} = lesson\n  const commentsAvailable =\n    comments?.some((comment: any) => comment.state === 'published') ?? false\n\n  const handleCommentSubmission = async (comment: string) => {\n    const newComment = await saveCommentForLesson(slug, {\n      comment,\n    })\n    setComments([...comments, newComment])\n  }\n\n  React.useEffect(() => {\n    setComments(lesson.comments)\n  }, [lesson])\n\n  return (\n    (<div className={commentsAvailable ? 'space-y-10' : 'space-y-6'}>\n      {commentsAvailable\n        ? comments.map((comment: any) => {\n            return (\n              <Comment\n                key={comment.id}\n                comment={comment.comment}\n                state={comment.state}\n                createdAt={comment.created_at}\n                isCommentableOwner={comment.is_commentable_owner}\n                user={comment.user}\n              />\n            )\n          })\n        : null}\n      {commentingAllowed ? (\n        viewer.can_comment ? (\n          <CommentField onSubmit={handleCommentSubmission} />\n        ) : (\n          <div className=\"flex flex-col space-y-4 dark:text-white\">\n            <h4 className=\"font-semibold\">\n              Become a Member to join discussion\n            </h4>\n            <Link\n              href=\"/pricing\"\n              onClick={() =>\n                track('clicked pricing', {\n                  location: 'comments',\n                })\n              }\n              className=\"inline-flex px-3 py-2 text-center rounded-md bg-blue-600 text-white font-semibold shadow-lg hover:bg-indigo-600 hover:scale-105 transition-all duration-150 ease-in-out\">\n              \n                View Pricing\n              \n            </Link>\n          </div>\n        )\n      ) : null}\n    </div>)\n  );\n}\n\nexport default Comments\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/comments/comments/index.tsx","r":[0,2465],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport Link from 'next/link'\nimport Comment from 'components/pages/lessons/comments/comment'\nimport CommentField from 'components/pages/lessons/comments/comment-field'\nimport {track} from 'utils/analytics'\nimport {useViewer} from 'context/viewer-context'\nimport {saveCommentForLesson} from 'lib/lesson-comments'\n\ntype CommentsProps = {\n  lesson: any\n  commentingAllowed: boolean\n}\n\nconst Comments: React.FunctionComponent<CommentsProps> = ({\n  lesson,\n  commentingAllowed,\n}: CommentsProps) => {\n  const {viewer} = useViewer()\n  const [comments, setComments] = React.useState(lesson.comments)\n  const {slug} = lesson\n  const commentsAvailable =\n    comments?.some((comment: any) => comment.state === 'published') ?? false\n\n  const handleCommentSubmission = async (comment: string) => {\n    const newComment = await saveCommentForLesson(slug, {\n      comment,\n    })\n    setComments([...comments, newComment])\n  }\n\n  React.useEffect(() => {\n    setComments(lesson.comments)\n  }, [lesson])\n\n  return (\n    <div className={commentsAvailable ? 'space-y-10' : 'space-y-6'}>\n      {commentsAvailable\n        ? comments.map((comment: any) => {\n            return (\n              <Comment\n                key={comment.id}\n                comment={comment.comment}\n                state={comment.state}\n                createdAt={comment.created_at}\n                isCommentableOwner={comment.is_commentable_owner}\n                user={comment.user}\n              />\n            )\n          })\n        : null}\n      {commentingAllowed ? (\n        viewer.can_comment ? (\n          <CommentField onSubmit={handleCommentSubmission} />\n        ) : (\n          <div className=\"flex flex-col space-y-4 dark:text-white\">\n            <h4 className=\"font-semibold\">\n              Become a Member to join discussion\n            </h4>\n            <Link href=\"/pricing\">\n              <a\n                onClick={() =>\n                  track('clicked pricing', {\n                    location: 'comments',\n                  })\n                }\n                className=\"inline-flex px-3 py-2 text-center rounded-md bg-blue-600 text-white font-semibold shadow-lg hover:bg-indigo-600 hover:scale-105 transition-all duration-150 ease-in-out\"\n              >\n                View Pricing\n              </a>\n            </Link>\n          </div>\n        )\n      ) : null}\n    </div>\n  )\n}\n\nexport default Comments\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/rate-course-overlay/index.tsx","r":[0,8473],"t":"import React from \"react\";\nimport React, * as React from 'react';\nimport {Field, Form, Formik} from 'formik'\nimport {useTrackComponent} from 'hooks/use-track-component'\n\nconst rangeArr = [1, 2, 3, 4, 5, 6, 7]\n\nconst rangeArrMobile = [\n  'Not at all likely',\n  'Very unlikely',\n  'Somewhat unlikely',\n  'Neutral',\n  'Somewhat likely',\n  'Very likely',\n  'Entirely likely',\n]\n\nconst RateCourseOverlay: React.FunctionComponent<{\n  course: any\n  onRated: (values: any) => void\n}> = ({course, onRated}) => {\n  const [rating, setRating] = React.useState(false)\n  const [complete, setComplete] = React.useState(false)\n  const {title, square_cover_480_url, slug} = course\n\n  useTrackComponent('show rate course', {course: slug})\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <div className=\"flex flex-col items-center\">\n        <img\n          src={square_cover_480_url}\n          alt={`illustration of ${title} course`}\n          className=\"w-16 md:w-24\"\n        />\n        <h3 className=\"text-md md:text-lg lg:text-xl font-semibold mt-4 text-center white\">\n          {title}\n        </h3>\n      </div>\n      {!rating && (\n        <NumericRating\n          course={course}\n          onRated={(rating: any) => {\n            setRating(rating)\n          }}\n        />\n      )}\n      {rating && !complete && (\n        <TextComment\n          rating={rating}\n          onAnswer={(comment: any) => {\n            onRated({rating, comment})\n            setComplete(true)\n          }}\n        />\n      )}\n      {complete && <div>Thank you!</div>}\n    </div>\n  )\n}\n\nconst TextComment: React.FunctionComponent<{\n  onAnswer: any\n  rating: number | boolean\n}> = ({onAnswer, rating}) => {\n  const MESSAGES: any = {\n    7: {\n      subtitle: \"We're so glad you enjoyed it! 🤗\",\n      title: 'What did you like about this course?',\n    },\n    6: {\n      subtitle: 'We really appreciate your feedback.',\n      title: 'What did you like about this course?',\n    },\n    5: {\n      subtitle: 'Thanks for the feedback.',\n      title: 'What did you like about this course?',\n    },\n    4: {\n      subtitle: 'Thank you so much.',\n      title: 'What did you like about this course?',\n    },\n    3: {\n      subtitle: \"We're sorry this course didn't meet your expectations\",\n      title: 'How can this course be improved?',\n    },\n    2: {\n      subtitle: 'We really want to do better.',\n      title:\n        'Can you take a moment to let us know what you expected from this course?',\n    },\n    1: {\n      subtitle: 'We let you down 😔',\n      title: 'Do you have any constructive feedback so that we can do better?',\n    },\n    default: {\n      subtitle: 'Thank you so much.',\n      title: 'What would make this course more useful for you?',\n    },\n  }\n\n  function getRating(rating: any) {\n    return MESSAGES[rating] || MESSAGES.default\n  }\n\n  const {title, subtitle} = getRating(rating)\n\n  return (\n    <Formik\n      initialValues={{comment: ``, answered: false}}\n      onSubmit={(values: any) => {\n        const comment = values.answered && values.comment\n        onAnswer({\n          comment,\n          context: {prompt: title},\n        })\n      }}\n    >\n      {({setValues, submitForm, values}) => {\n        return (\n          <Form>\n            <div className=\"flex flex-col\">\n              <h2>{subtitle}</h2>\n              <h3>{title}</h3>\n              <Field\n                className=\"text-gray-900 flex-1 p-2 m-1 bg-coolGray-200\"\n                name=\"comment\"\n                value={values.comment}\n                rows={6}\n                as=\"textarea\"\n                onChange={(event: {target: {value: any}}) => {\n                  setValues({...values, comment: event.target.value})\n                }}\n              />\n              <ul className=\"list-none\">\n                <li className=\"w-full py-2\">\n                  <label className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\">\n                    <Field\n                      type=\"radio\"\n                      name=\"picked\"\n                      value=\"submit\"\n                      className=\"appearance-none hidden\"\n                      onChange={() => {\n                        setValues({...values, answered: true})\n                        submitForm()\n                      }}\n                    />\n                    Send Comments\n                  </label>\n                </li>\n              </ul>\n            </div>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n\nconst NumericRating: React.FunctionComponent<{course: any; onRated: any}> = ({\n  course,\n  onRated,\n}) => {\n  const {title, square_cover_480_url} = course\n  return (\n    <>\n      <h3 className=\"text-center mt-4 md:mt-6\">\n        How likely are you to recommend this course to a colleague?\n      </h3>\n      <Formik\n        initialValues={{'rate-input': 7}}\n        onSubmit={(values) => {\n          const rating = values['rate-input']\n          onRated(rating)\n        }}\n      >\n        {(props) => {\n          const {\n            values,\n            submitForm,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          } = props\n          return (\n            <>\n              <form onSubmit={handleSubmit}>\n                <div className=\"flex items-center space-x-4 mt-4 sm:mt-6 md:mt-8 justify-center\">\n                  <div>\n                    <span className=\"hidden sm:block\">not at all likely</span>\n                    <IconThumbDown className=\"w-8 sm:hidden\" />\n                  </div>\n                  <div className=\"flex items-center space-x-3 sm:space-x-4\">\n                    {rangeArr.map((value) => (\n                      <input\n                        key={`rate-input-${value}`}\n                        type=\"radio\"\n                        name=\"rate-input\"\n                        id={`rate-input-${value}`}\n                        value={value}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      />\n                    ))}\n                  </div>\n                  <div>\n                    <span className=\"hidden sm:block\">entirely likely</span>\n                    <IconThumbUp className=\"w-8 sm:hidden\" />\n                  </div>\n                </div>\n                <ul className=\"list-none mt-6\">\n                  <li className=\"w-full py-2\">\n                    <label className=\"inline-block py-3 px-5 cursor-pointer text-center appearance-none transition duration-150 w-full ease-in-out bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded-lg\">\n                      <Field\n                        type=\"radio\"\n                        name=\"picked\"\n                        value=\"submit\"\n                        className=\"appearance-none hidden\"\n                        onChange={() => {\n                          // setValues({...values, answered: true})\n                          submitForm()\n                        }}\n                      />\n                      Add Rating\n                    </label>\n                  </li>\n                </ul>\n              </form>\n            </>\n          )\n        }}\n      </Formik>\n    </>\n  )\n}\n\nexport default RateCourseOverlay\n\nconst IconThumbDown: React.FunctionComponent<{className?: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className={className}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018a2 2 0 01.485.06l3.76.94m-7 10v5a2 2 0 002 2h.096c.5 0 .905-.405.905-.904 0-.715.211-1.413.608-2.008L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5\"\n    ></path>\n  </svg>\n)\n\nconst IconThumbUp: React.FunctionComponent<{className?: string}> = ({\n  className = '',\n}) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className={className}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      d=\"M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5\"\n    ></path>\n  </svg>\n)\n","c":"nextJsAddMissingReactImport"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/lessons/overlay/recommend-next-step-overlay/index.tsx","r":[0,2276],"t":"import Link from 'next/link'\nimport Image from 'next/image'\nimport * as React from 'react'\nimport {track} from 'utils/analytics'\nimport Share from 'components/share'\nimport {useTrackComponent} from 'hooks/use-track-component'\n\nconst RecommendNextStepOverlay: React.FunctionComponent<{\n  lesson: any\n}> = ({lesson}) => {\n  const courseImage = lesson?.collection?.square_cover_480_url\n\n  useTrackComponent('show recommendations', {\n    course: lesson?.collection?.slug,\n    lesson: lesson?.slug,\n  })\n\n  return (\n    (<div className=\"flex flex-col items-center p-4\">\n      {courseImage && (\n        <div className=\"w-16 h-16 md:w-24 md:h-24 lg:w-32 lg:h-32 relative\">\n          <Image\n            src={courseImage}\n            alt={`illustration of ${lesson?.collection.title} course`}\n            layout=\"fill\"\n          />\n        </div>\n      )}\n      <h2 className=\"text-md md:text-lg lg:text-md  mt-4 text-center\">\n        Congrats, you finished!\n      </h2>\n      <h3 className=\"text-md md:text-xl lg:text-2xl  mt-2 text-center\">\n        {' '}\n        <span className=\"font-semibold\">\n          {lesson?.collection ? lesson?.collection?.title : lesson.title}\n        </span>\n      </h3>\n      <Share\n        resource={lesson?.collection || lesson}\n        instructor={lesson?.instructor}\n        className=\"text-black flex items-center mt-6\"\n      >\n        <div className=\"max-w-md mt-2 text-center\">\n          If this {lesson?.collection ? 'course' : 'video'} was useful for you,\n          please share it with your colleagues. It will really help{' '}\n          {lesson.instructor.full_name.split(' ')[0]} get the word out.\n        </div>\n      </Share>\n      <div className=\"mt-8 text-xs md:mt-10 lg:mt-6 xl:mt-16 text-center\">\n        Ready for something new?{' '}\n        <Link\n          href=\"/\"\n          onClick={() => {\n            track('clicked ready for new', {\n              ...(lesson?.collection && {\n                collection: lesson?.collection.slug,\n              }),\n              video: lesson.slug,\n            })\n          }}\n          className=\"font-semibold\">\n          \n            Click here to start your next project.\n          \n        </Link>\n      </div>\n    </div>)\n  );\n}\n\nexport default RecommendNextStepOverlay\n","c":"nextJsNewLink"}
{"k":1,"p":"/Users/nikitamehrotra/egghead-next/src/components/pages/users/dashboard/activity/in-progress-resource.tsx","r":[0,7024],"t":"import * as React from 'react'\nimport {FunctionComponent} from 'react'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport {convertTimeWithTitles} from 'utils/time-utils'\nimport {track} from 'utils/analytics'\nimport {first, get, isEmpty} from 'lodash'\nimport {LessonResource} from 'types'\nimport {Card} from 'components/card'\n\ntype InProgressResourceProps = {\n  resource: any\n  small?: boolean\n  className?: string\n}\n\nconst InProgressResource: FunctionComponent<InProgressResourceProps> = ({\n  resource,\n  small = false,\n  className = '',\n}) => {\n  if (isEmpty(resource)) {\n    return null\n  }\n\n  const {\n    title,\n    square_cover_480_url,\n    series,\n    slug,\n    resource_progress,\n    progress,\n    type,\n    path,\n    lessons,\n    image_128_url,\n    items = [],\n  } = resource\n\n  const definedProgress = resource_progress || progress\n\n  const {\n    completed_lesson_count = 0,\n    time_left = 0,\n    lesson_count = 0,\n    is_completed,\n  } = definedProgress || {}\n\n  const completedLessonSlugs = get(\n    definedProgress,\n    'completed_lessons',\n    [],\n  ).map((lesson: LessonResource) => lesson.slug)\n\n  const allLessons =\n    lessons || items.filter((item: any) => item.type === 'lesson')\n\n  const current_lesson: any = first(\n    allLessons.filter(\n      (lesson: LessonResource) => !completedLessonSlugs.includes(lesson.slug),\n    ),\n  )\n\n  const isInProgress = definedProgress && !is_completed\n  const lessons_left = lesson_count - completed_lesson_count\n  const resource_path = current_lesson?.path || path\n  const image_url = square_cover_480_url || image_128_url\n\n  return (\n    (<Card className={`${small ? 'sm:px-6 sm:py-4' : ''} ${className}`}>\n      <div\n        className={`flex w-full items-center ${\n          small\n            ? ''\n            : 'items-center md:flex-row flex-col md:space-x-4 space-x-0'\n        }`}\n      >\n        {image_url && resource_path && (\n          <Link\n            href={resource_path}\n            onClick={() =>\n              track(`clicked continue watching`, {\n                slug: slug,\n                type: type,\n                location: 'resource in progress (image)',\n              })\n            }\n            tabIndex={-1}>\n\n            <Image\n              src={image_url}\n              alt={title}\n              width={small ? 72 : square_cover_480_url ? 160 : 48}\n              height={small ? 72 : square_cover_480_url ? 160 : 48}\n            />\n\n          </Link>\n        )}\n        <div className=\"space-y-1 w-full pl-4\">\n          <div className=\"\">\n            <Link\n              href={resource_path || '#'}\n              className=\"dark:hover:text-blue-300 hover:text-blue-600\"\n              onClick={() =>\n                track(`clicked continue watching`, {\n                  slug: slug,\n                  type: type,\n                  location: 'resource in progress (title)',\n                })\n              }>\n\n              <h3\n                className={`${\n                  small ? 'text-lg' : 'text-xl'\n                } font-semibold leading-tight`}\n              >\n                {title}\n              </h3>\n\n            </Link>\n            {!isInProgress && series && (\n              <div className=\"text-sm flex items-center\">{series?.title}</div>\n            )}\n          </div>\n\n          {isInProgress && (\n            <h2 className=\"uppercase font-semibold text-xs text-gray-600 dark:text-gray-300 pb-1\">\n              {lessons_left} lessons left\n              <span className=\"lowercase font-normal\">\n                {time_left ? ` (${convertTimeWithTitles(time_left)} left)` : ''}\n              </span>\n            </h2>\n          )}\n\n          {isInProgress && (\n            <div className=\"flex items-center space-x-1\">\n              <Link\n                href={resource_path || '#'}\n                className=\"text-teal-500 dark:text-teal-600 flex bg-white rounded-full\"\n                onClick={() =>\n                  track(`clicked continue watching`, {\n                    slug: slug,\n                    type: type,\n                    location: 'resource in progress (play button)',\n                  })\n                }>\n\n                <PlayIcon />\n\n              </Link>\n\n              {/* <div className=\"relative w-full h-2 bg-gray-200 dark:bg-gray-600 overflow-hidden rounded-sm\">\n                <div\n                  style={{width: `${percent_complete}%`}}\n                  className=\"absolute left-0 top-0 bg-blue-600 h-full\"\n                />\n              </div> */}\n\n              <div className=\"flex relative w-full h-2 bg-gray-200 dark:bg-gray-600 overflow-hidden rounded-sm\">\n                {allLessons.map((lesson: any) => {\n                  const isComplete = completedLessonSlugs.includes(lesson.slug)\n                  return (\n                    (<Link\n                      href={lesson.path}\n                      key={lesson.slug}\n                      style={{width: `${100 / allLessons.length}%`}}\n                      className={`${\n                        isComplete\n                          ? 'dark:bg-teal-500 dark:hover:bg-teal-600 bg-teal-400 hover:bg-teal-500'\n                          : 'dark:bg-gray-500 dark:hover:bg-gray-400 bg-gray-200 hover:bg-gray-300'\n                      } h-full border dark:border-gray-800 border-white transition-colors ease-in-out duration-200`}>\n\n                    </Link>)\n                  );\n                })}\n              </div>\n            </div>\n          )}\n          {!small && isInProgress && current_lesson && (\n            <div className=\"leading-tighter flex items-baseline space-x-2\">\n              <div className=\"text-xs text-gray-600 dark:text-gray-300 flex-shrink-0\">\n                Up Next\n              </div>\n              <Link\n                href={resource_path || '3'}\n                className=\"text-sm font-medium leading-tight\"\n                onClick={() =>\n                  track(`clicked continue watching`, {\n                    slug: slug,\n                    type: type,\n                    location: 'resource in progress (next lesson title)',\n                  })\n                }>\n\n                {current_lesson?.title}\n\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>)\n  );\n}\n\nexport default InProgressResource\n\nconst PlayIcon = () => {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 20 20\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g fill=\"none\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM9.555 7.168A1 1 0 0 0 8 8v4a1 1 0 0 0 1.555.832l3-2a1 1 0 0 0 0-1.664l-3-2z\"\n          fill=\"currentColor\"\n        />\n      </g>\n    </svg>\n  )\n}\n","c":"nextJsNewLink"}
{"k":2}
